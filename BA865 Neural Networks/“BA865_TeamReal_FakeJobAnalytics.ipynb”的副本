{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"“BA865_TeamReal_FakeJobAnalytics.ipynb”的副本","provenance":[{"file_id":"1y34UhvyW-fp3Oqfe626N8i1vztMFRRDg","timestamp":1643911013313}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[""],"metadata":{"id":"xxbh-60Du4KS"}},{"cell_type":"markdown","source":["##BA865 Team Real - Fake Job Analyise\n","Members: Yipeng(Caroline) Guo: ypguo@bu.edu\n","\n","Yilun(Allen) Wang: yilun830@bu.edu\n","\n","Niming(Danny) Wang: wang2021@bu.edu\n","\n","Mochi Zhang: zhangmc@bu.edu\n","\n","Chunxiaqiu(Tommy) Yang: chunqiu@bu.edu\n","\n"],"metadata":{"id":"fVp6WAhEY8Oq"}},{"cell_type":"markdown","source":["#Business Problem & Motivation\n","The problem motivates us is the possibility of identifying fake job recruiting news\n","\n","\n","1.   Recognition of fake job posting by deep learning (NN) technologies, including transfering text into code, MLP model trainging and testing.\n","2.   Exploration of creating fraud testing system to ensure safe hiring environment.\n","\n","The rational behind this is that, with the growth of unemployed and job gaps due to economic stres and Covid impcat, there are multiple websites or Apps that provide job recruting, applying, and other posting. However, scammers may take advantage of this and post fake job information to gather applicants' personal information and privacy. The project aims to distinguish real and fake job recruiting news.\n","\n","\n","\n","\n"],"metadata":{"id":"DuDkJRYhbI0H"}},{"cell_type":"markdown","source":["##Dataset\n","\n","https://www.kaggle.com/shivamb/real-or-fake-fake-jobposting-prediction\n","\n","The Employment Scam Aegean Dataset was explicitly granted and acknowledged by the Laboratory of Information & Communication System Security, The University of the Aegean (http://emscad.samos.aegean.gr/). With thousands of hiring news collected with their detailed description, it allows us to dig deeper than we would imagine. This dataset contains 18K posting entries with 18 features captured, out of which about 800 are fake. It consists of both textual information and meta-information about the jobs."],"metadata":{"id":"d3SiOTlZgnm0"}},{"cell_type":"code","source":["!pip install mlxtend"],"metadata":{"id":"Pw_q6-naeUJV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644256032764,"user_tz":300,"elapsed":10006,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"416d25ee-b175-43df-beb2-e4ef1958175e"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: mlxtend in /usr/local/lib/python3.7/dist-packages (0.14.0)\n","Requirement already satisfied: numpy>=1.10.4 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.19.5)\n","Requirement already satisfied: scipy>=0.17 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.4.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from mlxtend) (57.4.0)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.0.2)\n","Requirement already satisfied: pandas>=0.17.1 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (1.3.5)\n","Requirement already satisfied: matplotlib>=1.5.1 in /usr/local/lib/python3.7/dist-packages (from mlxtend) (3.2.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (1.3.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (3.0.7)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->mlxtend) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.17.1->mlxtend) (2018.9)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib>=1.5.1->mlxtend) (1.15.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.18->mlxtend) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.18->mlxtend) (3.1.0)\n"]}]},{"cell_type":"code","source":["! pip install scikit-plot\n","! pip install newspaper3k\n","! pip install -U spacy\n","! pip install -U textacy\n","! pip install wordcloud\n","! pip install emoji\n","! pip install nltk\n","! pip install scikit-plot\n","! pip install spacytextblob\n","! pip install umap-learn\n","! pip install afinn\n","! pip install pysrt\n","! pip install textdescriptives\n","! pip install tokenwiser"],"metadata":{"id":"Fkfw8enWjpdu","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1644256157980,"user_tz":300,"elapsed":125220,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"02a5a1c9-f2dd-47d4-e76e-32c84be2fd79"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scikit-plot\n","  Downloading scikit_plot-0.3.7-py3-none-any.whl (33 kB)\n","Requirement already satisfied: matplotlib>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (3.2.2)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (1.0.2)\n","Requirement already satisfied: scipy>=0.9 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (1.4.1)\n","Requirement already satisfied: joblib>=0.10 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (1.1.0)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (1.19.5)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (2.8.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (3.0.7)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (0.11.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib>=1.4.0->scikit-plot) (1.15.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.18->scikit-plot) (3.1.0)\n","Installing collected packages: scikit-plot\n","Successfully installed scikit-plot-0.3.7\n","Collecting newspaper3k\n","  Downloading newspaper3k-0.2.8-py3-none-any.whl (211 kB)\n","\u001b[K     |████████████████████████████████| 211 kB 5.3 MB/s \n","\u001b[?25hCollecting tinysegmenter==0.3\n","  Downloading tinysegmenter-0.3.tar.gz (16 kB)\n","Requirement already satisfied: beautifulsoup4>=4.4.1 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (4.6.3)\n","Collecting jieba3k>=0.35.1\n","  Downloading jieba3k-0.35.1.zip (7.4 MB)\n","\u001b[K     |████████████████████████████████| 7.4 MB 8.3 MB/s \n","\u001b[?25hRequirement already satisfied: nltk>=3.2.1 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (3.2.5)\n","Collecting tldextract>=2.0.1\n","  Downloading tldextract-3.1.2-py2.py3-none-any.whl (87 kB)\n","\u001b[K     |████████████████████████████████| 87 kB 2.9 MB/s \n","\u001b[?25hRequirement already satisfied: lxml>=3.6.0 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (4.2.6)\n","Collecting cssselect>=0.9.2\n","  Downloading cssselect-1.1.0-py2.py3-none-any.whl (16 kB)\n","Requirement already satisfied: PyYAML>=3.11 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (3.13)\n","Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (2.8.2)\n","Collecting feedparser>=5.2.1\n","  Downloading feedparser-6.0.8-py3-none-any.whl (81 kB)\n","\u001b[K     |████████████████████████████████| 81 kB 6.6 MB/s \n","\u001b[?25hRequirement already satisfied: requests>=2.10.0 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (2.23.0)\n","Requirement already satisfied: Pillow>=3.3.0 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (7.1.2)\n","Collecting feedfinder2>=0.0.4\n","  Downloading feedfinder2-0.0.4.tar.gz (3.3 kB)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from feedfinder2>=0.0.4->newspaper3k) (1.15.0)\n","Collecting sgmllib3k\n","  Downloading sgmllib3k-1.0.0.tar.gz (5.8 kB)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->newspaper3k) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->newspaper3k) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->newspaper3k) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->newspaper3k) (3.0.4)\n","Collecting requests-file>=1.4\n","  Downloading requests_file-1.5.1-py2.py3-none-any.whl (3.7 kB)\n","Requirement already satisfied: filelock>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from tldextract>=2.0.1->newspaper3k) (3.4.2)\n","Building wheels for collected packages: tinysegmenter, feedfinder2, jieba3k, sgmllib3k\n","  Building wheel for tinysegmenter (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for tinysegmenter: filename=tinysegmenter-0.3-py3-none-any.whl size=13553 sha256=db0d6af49ef1110ec53d77b5c815d6b1428c1b814efdafbc19f7fbfcf2dc3c6d\n","  Stored in directory: /root/.cache/pip/wheels/df/67/41/faca10fa501ca010be41b49d40360c2959e1c4f09bcbfa37fa\n","  Building wheel for feedfinder2 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for feedfinder2: filename=feedfinder2-0.0.4-py3-none-any.whl size=3357 sha256=ecf6810f5a6a393e708a44e4c72ea564bc20d0deeb0fed72d1ae2e6d03b88990\n","  Stored in directory: /root/.cache/pip/wheels/7f/d4/8f/6e2ca54744c9d7292d88ddb8d42876bcdab5e6d84a21c10346\n","  Building wheel for jieba3k (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for jieba3k: filename=jieba3k-0.35.1-py3-none-any.whl size=7398404 sha256=e77ccc030ac375c23dff84a664dd16742be9e6f757f7ec4d6f1353e8303d160e\n","  Stored in directory: /root/.cache/pip/wheels/4c/91/46/3c208287b726df325a5979574324878b679116e4baae1af3c3\n","  Building wheel for sgmllib3k (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sgmllib3k: filename=sgmllib3k-1.0.0-py3-none-any.whl size=6066 sha256=5ef2735748b29cd7f46eacc3bec5b77de05ca35878dc99469f9c553e8baabc80\n","  Stored in directory: /root/.cache/pip/wheels/73/ad/a4/0dff4a6ef231fc0dfa12ffbac2a36cebfdddfe059f50e019aa\n","Successfully built tinysegmenter feedfinder2 jieba3k sgmllib3k\n","Installing collected packages: sgmllib3k, requests-file, tldextract, tinysegmenter, jieba3k, feedparser, feedfinder2, cssselect, newspaper3k\n","Successfully installed cssselect-1.1.0 feedfinder2-0.0.4 feedparser-6.0.8 jieba3k-0.35.1 newspaper3k-0.2.8 requests-file-1.5.1 sgmllib3k-1.0.0 tinysegmenter-0.3 tldextract-3.1.2\n","Requirement already satisfied: spacy in /usr/local/lib/python3.7/dist-packages (2.2.4)\n","Collecting spacy\n","  Downloading spacy-3.2.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.0 MB)\n","\u001b[K     |████████████████████████████████| 6.0 MB 6.6 MB/s \n","\u001b[?25hCollecting thinc<8.1.0,>=8.0.12\n","  Downloading thinc-8.0.13-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (628 kB)\n","\u001b[K     |████████████████████████████████| 628 kB 42.6 MB/s \n","\u001b[?25hRequirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.10.0.2)\n","Collecting typer<0.5.0,>=0.3.0\n","  Downloading typer-0.4.0-py3-none-any.whl (27 kB)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (4.62.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.11.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy) (57.4.0)\n","Collecting spacy-legacy<3.1.0,>=3.0.8\n","  Downloading spacy_legacy-3.0.8-py2.py3-none-any.whl (14 kB)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.0.6)\n","Collecting srsly<3.0.0,>=2.4.1\n","  Downloading srsly-2.4.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (451 kB)\n","\u001b[K     |████████████████████████████████| 451 kB 29.1 MB/s \n","\u001b[?25hCollecting spacy-loggers<2.0.0,>=1.0.0\n","  Downloading spacy_loggers-1.0.1-py3-none-any.whl (7.0 kB)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.9.0)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.4.1)\n","Collecting pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4\n","  Downloading pydantic-1.8.2-cp37-cp37m-manylinux2014_x86_64.whl (10.1 MB)\n","\u001b[K     |████████████████████████████████| 10.1 MB 23.4 MB/s \n","\u001b[?25hRequirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.0.6)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.0.6)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (21.3)\n","Collecting langcodes<4.0.0,>=3.2.0\n","  Downloading langcodes-3.3.0-py3-none-any.whl (181 kB)\n","\u001b[K     |████████████████████████████████| 181 kB 16.6 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.19.5)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.23.0)\n","Collecting pathy>=0.3.5\n","  Downloading pathy-0.6.1-py3-none-any.whl (42 kB)\n","\u001b[K     |████████████████████████████████| 42 kB 1.6 MB/s \n","\u001b[?25hCollecting catalogue<2.1.0,>=2.0.6\n","  Downloading catalogue-2.0.6-py3-none-any.whl (17 kB)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy) (3.7.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy) (3.0.7)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy) (5.2.1)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2021.10.8)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy) (2.0.1)\n","Installing collected packages: catalogue, typer, srsly, pydantic, thinc, spacy-loggers, spacy-legacy, pathy, langcodes, spacy\n","  Attempting uninstall: catalogue\n","    Found existing installation: catalogue 1.0.0\n","    Uninstalling catalogue-1.0.0:\n","      Successfully uninstalled catalogue-1.0.0\n","  Attempting uninstall: srsly\n","    Found existing installation: srsly 1.0.5\n","    Uninstalling srsly-1.0.5:\n","      Successfully uninstalled srsly-1.0.5\n","  Attempting uninstall: thinc\n","    Found existing installation: thinc 7.4.0\n","    Uninstalling thinc-7.4.0:\n","      Successfully uninstalled thinc-7.4.0\n","  Attempting uninstall: spacy\n","    Found existing installation: spacy 2.2.4\n","    Uninstalling spacy-2.2.4:\n","      Successfully uninstalled spacy-2.2.4\n","Successfully installed catalogue-2.0.6 langcodes-3.3.0 pathy-0.6.1 pydantic-1.8.2 spacy-3.2.1 spacy-legacy-3.0.8 spacy-loggers-1.0.1 srsly-2.4.2 thinc-8.0.13 typer-0.4.0\n","Collecting textacy\n","  Downloading textacy-0.11.0-py3-none-any.whl (200 kB)\n","\u001b[K     |████████████████████████████████| 200 kB 8.4 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.7/dist-packages (from textacy) (1.19.5)\n","Requirement already satisfied: tqdm>=4.19.6 in /usr/local/lib/python3.7/dist-packages (from textacy) (4.62.3)\n","Requirement already satisfied: requests>=2.10.0 in /usr/local/lib/python3.7/dist-packages (from textacy) (2.23.0)\n","Collecting pyphen>=0.10.0\n","  Downloading pyphen-0.12.0-py3-none-any.whl (2.0 MB)\n","\u001b[K     |████████████████████████████████| 2.0 MB 50.2 MB/s \n","\u001b[?25hRequirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.7/dist-packages (from textacy) (2.6.3)\n","Requirement already satisfied: spacy>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from textacy) (3.2.1)\n","Collecting cytoolz>=0.10.1\n","  Downloading cytoolz-0.11.2.tar.gz (481 kB)\n","\u001b[K     |████████████████████████████████| 481 kB 43.2 MB/s \n","\u001b[?25hRequirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.7/dist-packages (from textacy) (1.4.1)\n","Requirement already satisfied: cachetools>=4.0.0 in /usr/local/lib/python3.7/dist-packages (from textacy) (4.2.4)\n","Requirement already satisfied: scikit-learn>=0.19.0 in /usr/local/lib/python3.7/dist-packages (from textacy) (1.0.2)\n","Collecting jellyfish>=0.8.0\n","  Downloading jellyfish-0.9.0.tar.gz (132 kB)\n","\u001b[K     |████████████████████████████████| 132 kB 70.7 MB/s \n","\u001b[?25hRequirement already satisfied: joblib>=0.13.0 in /usr/local/lib/python3.7/dist-packages (from textacy) (1.1.0)\n","Requirement already satisfied: toolz>=0.8.0 in /usr/local/lib/python3.7/dist-packages (from cytoolz>=0.10.1->textacy) (0.11.2)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->textacy) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->textacy) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->textacy) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->textacy) (1.24.3)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.19.0->textacy) (3.1.0)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (0.6.1)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (21.3)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (3.0.6)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (2.0.6)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (3.3.0)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (1.0.6)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (0.9.0)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (0.4.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (2.11.3)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.12 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (8.0.13)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (3.10.0.2)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (1.0.1)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (1.8.2)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (2.4.2)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (2.0.6)\n","Requirement already satisfied: typer<0.5.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (0.4.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (57.4.0)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.0->textacy) (3.0.8)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy>=3.0.0->textacy) (3.7.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy>=3.0.0->textacy) (3.0.7)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy>=3.0.0->textacy) (5.2.1)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy>=3.0.0->textacy) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy>=3.0.0->textacy) (2.0.1)\n","Building wheels for collected packages: cytoolz, jellyfish\n","  Building wheel for cytoolz (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for cytoolz: filename=cytoolz-0.11.2-cp37-cp37m-linux_x86_64.whl size=1230796 sha256=4e64ac98bf1cf0be1cd87ba04a694fa115de8aa3e7e492f6b8ce4820e14f2725\n","  Stored in directory: /root/.cache/pip/wheels/38/70/71/ca13ea3d36ccd0b3d0ec7d7a4ca67522048d695b556bba4f59\n","  Building wheel for jellyfish (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for jellyfish: filename=jellyfish-0.9.0-cp37-cp37m-linux_x86_64.whl size=73984 sha256=088ec03b39026c52ee829052a0829f8e844f2e8341a47982612aab02e903914e\n","  Stored in directory: /root/.cache/pip/wheels/fe/99/4e/646ce766df0d070b0ef04db27aa11543e2767fda3075aec31b\n","Successfully built cytoolz jellyfish\n","Installing collected packages: pyphen, jellyfish, cytoolz, textacy\n","Successfully installed cytoolz-0.11.2 jellyfish-0.9.0 pyphen-0.12.0 textacy-0.11.0\n","Requirement already satisfied: wordcloud in /usr/local/lib/python3.7/dist-packages (1.5.0)\n","Requirement already satisfied: numpy>=1.6.1 in /usr/local/lib/python3.7/dist-packages (from wordcloud) (1.19.5)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from wordcloud) (7.1.2)\n","Collecting emoji\n","  Downloading emoji-1.6.3.tar.gz (174 kB)\n","\u001b[K     |████████████████████████████████| 174 kB 7.8 MB/s \n","\u001b[?25hBuilding wheels for collected packages: emoji\n","  Building wheel for emoji (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for emoji: filename=emoji-1.6.3-py3-none-any.whl size=170298 sha256=a3dc319071fc1394f1130687e1725f42e79c8e49431f11e40d57205152510132\n","  Stored in directory: /root/.cache/pip/wheels/03/8b/d7/ad579fbef83c287215c0caab60fb0ae0f30c4d7ce5f580eade\n","Successfully built emoji\n","Installing collected packages: emoji\n","Successfully installed emoji-1.6.3\n","Requirement already satisfied: nltk in /usr/local/lib/python3.7/dist-packages (3.2.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from nltk) (1.15.0)\n","Requirement already satisfied: scikit-plot in /usr/local/lib/python3.7/dist-packages (0.3.7)\n","Requirement already satisfied: joblib>=0.10 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (1.1.0)\n","Requirement already satisfied: scipy>=0.9 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (1.4.1)\n","Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (1.0.2)\n","Requirement already satisfied: matplotlib>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (3.2.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (1.3.2)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (2.8.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (3.0.7)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (0.11.0)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (1.19.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib>=1.4.0->scikit-plot) (1.15.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.18->scikit-plot) (3.1.0)\n","Collecting spacytextblob\n","  Downloading spacytextblob-3.0.1-py3-none-any.whl (4.1 kB)\n","Requirement already satisfied: spacy<4.0,>=3.0 in /usr/local/lib/python3.7/dist-packages (from spacytextblob) (3.2.1)\n","Requirement already satisfied: textblob<0.16.0,>=0.15.3 in /usr/local/lib/python3.7/dist-packages (from spacytextblob) (0.15.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.11.3)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.12 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (8.0.13)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (0.9.0)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (3.10.0.2)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (1.0.6)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (21.3)\n","Requirement already satisfied: typer<0.5.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (0.4.0)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.0.6)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.23.0)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (3.0.6)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (3.3.0)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.0.6)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (1.19.5)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (1.8.2)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (0.4.1)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (4.62.3)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.4.2)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (3.0.8)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (0.6.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (57.4.0)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (1.0.1)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy<4.0,>=3.0->spacytextblob) (3.7.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy<4.0,>=3.0->spacytextblob) (3.0.7)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy<4.0,>=3.0->spacytextblob) (5.2.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<4.0,>=3.0->spacytextblob) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<4.0,>=3.0->spacytextblob) (2021.10.8)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<4.0,>=3.0->spacytextblob) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<4.0,>=3.0->spacytextblob) (2.10)\n","Requirement already satisfied: nltk>=3.1 in /usr/local/lib/python3.7/dist-packages (from textblob<0.16.0,>=0.15.3->spacytextblob) (3.2.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from nltk>=3.1->textblob<0.16.0,>=0.15.3->spacytextblob) (1.15.0)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy<4.0,>=3.0->spacytextblob) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy<4.0,>=3.0->spacytextblob) (2.0.1)\n","Installing collected packages: spacytextblob\n","Successfully installed spacytextblob-3.0.1\n","Collecting umap-learn\n","  Downloading umap-learn-0.5.2.tar.gz (86 kB)\n","\u001b[K     |████████████████████████████████| 86 kB 3.9 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.19.5)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.0.2)\n","Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.4.1)\n","Requirement already satisfied: numba>=0.49 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (0.51.2)\n","Collecting pynndescent>=0.5\n","  Downloading pynndescent-0.5.6.tar.gz (1.1 MB)\n","\u001b[K     |████████████████████████████████| 1.1 MB 12.6 MB/s \n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from umap-learn) (4.62.3)\n","Requirement already satisfied: llvmlite<0.35,>=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba>=0.49->umap-learn) (0.34.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba>=0.49->umap-learn) (57.4.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from pynndescent>=0.5->umap-learn) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.22->umap-learn) (3.1.0)\n","Building wheels for collected packages: umap-learn, pynndescent\n","  Building wheel for umap-learn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for umap-learn: filename=umap_learn-0.5.2-py3-none-any.whl size=82708 sha256=0a705fd7de49b6090b396f5105c4c6f9012eae9b064ed8d01887496d562380bd\n","  Stored in directory: /root/.cache/pip/wheels/84/1b/c6/aaf68a748122632967cef4dffef68224eb16798b6793257d82\n","  Building wheel for pynndescent (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pynndescent: filename=pynndescent-0.5.6-py3-none-any.whl size=53943 sha256=6ad9ae005186c834bf279b8cee3079d425848ff20c6b754d01c24108c290cb03\n","  Stored in directory: /root/.cache/pip/wheels/03/f1/56/f80d72741e400345b5a5b50ec3d929aca581bf45e0225d5c50\n","Successfully built umap-learn pynndescent\n","Installing collected packages: pynndescent, umap-learn\n","Successfully installed pynndescent-0.5.6 umap-learn-0.5.2\n","Collecting afinn\n","  Downloading afinn-0.1.tar.gz (52 kB)\n","\u001b[K     |████████████████████████████████| 52 kB 1.3 MB/s \n","\u001b[?25hBuilding wheels for collected packages: afinn\n","  Building wheel for afinn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for afinn: filename=afinn-0.1-py3-none-any.whl size=53447 sha256=ec041311a9fa878f027933aa16cffdc43b2a75927cf21e483baa659260a1665a\n","  Stored in directory: /root/.cache/pip/wheels/9d/16/3a/9f0953027434eab5dadf3f33ab3298fa95afa8292fcf7aba75\n","Successfully built afinn\n","Installing collected packages: afinn\n","Successfully installed afinn-0.1\n","Collecting pysrt\n","  Downloading pysrt-1.1.2.tar.gz (104 kB)\n","\u001b[K     |████████████████████████████████| 104 kB 10.1 MB/s \n","\u001b[?25hRequirement already satisfied: chardet in /usr/local/lib/python3.7/dist-packages (from pysrt) (3.0.4)\n","Building wheels for collected packages: pysrt\n","  Building wheel for pysrt (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pysrt: filename=pysrt-1.1.2-py3-none-any.whl size=13444 sha256=5e26a5248051c32bc5474ef5e4130ebc69319afcab59f5de7aee05faddcc4d25\n","  Stored in directory: /root/.cache/pip/wheels/b2/f8/e8/a26be4111ab5ec931e845777e574d1483b4adddc50d3e591a6\n","Successfully built pysrt\n","Installing collected packages: pysrt\n","Successfully installed pysrt-1.1.2\n","Collecting textdescriptives\n","  Downloading textdescriptives-1.0.6-py3-none-any.whl (35 kB)\n","Collecting numpy>=1.20.0\n","  Downloading numpy-1.21.5-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (15.7 MB)\n","\u001b[K     |████████████████████████████████| 15.7 MB 12.3 MB/s \n","\u001b[?25hRequirement already satisfied: spacy>=3.0.3 in /usr/local/lib/python3.7/dist-packages (from textdescriptives) (3.2.1)\n","Requirement already satisfied: pandas>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from textdescriptives) (1.3.5)\n","Requirement already satisfied: pyphen>=0.11.0 in /usr/local/lib/python3.7/dist-packages (from textdescriptives) (0.12.0)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.0.0->textdescriptives) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.0.0->textdescriptives) (2018.9)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=1.0.0->textdescriptives) (1.15.0)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (4.62.3)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (1.0.6)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (1.0.1)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.0.6)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.11.3)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (3.3.0)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (1.8.2)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.0.6)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (21.3)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.4.2)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (0.4.1)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (3.10.0.2)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (0.9.0)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (3.0.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (57.4.0)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.12 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (8.0.13)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (0.6.1)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.23.0)\n","Requirement already satisfied: typer<0.5.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (0.4.0)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (3.0.8)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy>=3.0.3->textdescriptives) (3.7.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy>=3.0.3->textdescriptives) (3.0.7)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy>=3.0.3->textdescriptives) (5.2.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.0.3->textdescriptives) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.0.3->textdescriptives) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.0.3->textdescriptives) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.0.3->textdescriptives) (2021.10.8)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy>=3.0.3->textdescriptives) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy>=3.0.3->textdescriptives) (2.0.1)\n","Installing collected packages: numpy, textdescriptives\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.19.5\n","    Uninstalling numpy-1.19.5:\n","      Successfully uninstalled numpy-1.19.5\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","yellowbrick 1.3.post1 requires numpy<1.20,>=1.16.0, but you have numpy 1.21.5 which is incompatible.\n","datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\n","albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n","Successfully installed numpy-1.21.5 textdescriptives-1.0.6\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["numpy"]}}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Collecting tokenwiser\n","  Downloading tokenwiser-0.1.7-py2.py3-none-any.whl (30 kB)\n","Collecting yake-github>=0.4.0\n","  Downloading yake-github-0.4.0.tar.gz (390 kB)\n","\u001b[K     |████████████████████████████████| 390 kB 11.0 MB/s \n","\u001b[?25hRequirement already satisfied: scikit-learn>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from tokenwiser) (1.0.2)\n","Collecting sentencepiece>=0.1.95\n","  Downloading sentencepiece-0.1.96-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.2 MB)\n","\u001b[K     |████████████████████████████████| 1.2 MB 48.7 MB/s \n","\u001b[?25hRequirement already satisfied: Pyphen>=0.10.0 in /usr/local/lib/python3.7/dist-packages (from tokenwiser) (0.12.0)\n","Requirement already satisfied: spacy>=3.1.0 in /usr/local/lib/python3.7/dist-packages (from tokenwiser) (3.2.1)\n","Requirement already satisfied: jellyfish>=0.8.2 in /usr/local/lib/python3.7/dist-packages (from tokenwiser) (0.9.0)\n","Collecting vowpalwabbit>=8.9.0\n","  Downloading vowpalwabbit-9.0.1-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (3.0 MB)\n","\u001b[K     |████████████████████████████████| 3.0 MB 34.8 MB/s \n","\u001b[?25hRequirement already satisfied: snowballstemmer>=2.1.0 in /usr/local/lib/python3.7/dist-packages (from tokenwiser) (2.2.0)\n","Collecting PyYAML>=5.3.1\n","  Downloading PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (596 kB)\n","\u001b[K     |████████████████████████████████| 596 kB 46.9 MB/s \n","\u001b[?25hRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.24.0->tokenwiser) (3.1.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.24.0->tokenwiser) (1.1.0)\n","Requirement already satisfied: numpy>=1.14.6 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.24.0->tokenwiser) (1.21.5)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.24.0->tokenwiser) (1.4.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.11.3)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (3.10.0.2)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (1.0.6)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (4.62.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (57.4.0)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.23.0)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (1.8.2)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.12 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (8.0.13)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (1.0.1)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.0.6)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (0.6.1)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (3.3.0)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (0.9.0)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (3.0.8)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.4.2)\n","Requirement already satisfied: typer<0.5.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (0.4.0)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (0.4.1)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (3.0.6)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (21.3)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.0.6)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy>=3.1.0->tokenwiser) (3.7.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy>=3.1.0->tokenwiser) (3.0.7)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy>=3.1.0->tokenwiser) (5.2.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.1.0->tokenwiser) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.1.0->tokenwiser) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.1.0->tokenwiser) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.1.0->tokenwiser) (3.0.4)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy>=3.1.0->tokenwiser) (7.1.2)\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from yake-github>=0.4.0->tokenwiser) (0.8.9)\n","Collecting segtok\n","  Downloading segtok-1.5.11-py3-none-any.whl (24 kB)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.7/dist-packages (from yake-github>=0.4.0->tokenwiser) (2.6.3)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy>=3.1.0->tokenwiser) (2.0.1)\n","Requirement already satisfied: regex in /usr/local/lib/python3.7/dist-packages (from segtok->yake-github>=0.4.0->tokenwiser) (2019.12.20)\n","Building wheels for collected packages: yake-github\n","  Building wheel for yake-github (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for yake-github: filename=yake_github-0.4.0-py2.py3-none-any.whl size=56625 sha256=89661f06337ffd882ac3703da2d3ba8946ac63dc09522f28bf0884d4a2d5e29b\n","  Stored in directory: /root/.cache/pip/wheels/26/55/0e/edbca8d3acb7fd3b22149e8940c5d003ec8d2ee26671da6fdf\n","Successfully built yake-github\n","Installing collected packages: segtok, yake-github, vowpalwabbit, sentencepiece, PyYAML, tokenwiser\n","  Attempting uninstall: PyYAML\n","    Found existing installation: PyYAML 3.13\n","    Uninstalling PyYAML-3.13:\n","      Successfully uninstalled PyYAML-3.13\n","Successfully installed PyYAML-6.0 segtok-1.5.11 sentencepiece-0.1.96 tokenwiser-0.1.7 vowpalwabbit-9.0.1 yake-github-0.4.0\n"]}]},{"cell_type":"code","execution_count":4,"metadata":{"id":"Felf-hOqnB5Q","executionInfo":{"status":"ok","timestamp":1644256283154,"user_tz":300,"elapsed":3168,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0bd54cc9-1fb0-4a8a-c235-a9d0413c5600"},"outputs":[{"output_type":"stream","name":"stdout","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n"]}],"source":["# imports\n","from sklearn.datasets import load_digits, fetch_openml\n","from sklearn.model_selection import train_test_split\n","import os\n","import numpy as np\n","from PIL import Image\n","import uuid\n","import pandas as pd\n","import cv2   \n","import random\n","from scipy.cluster.hierarchy import linkage, dendrogram, fcluster\n","from scipy.spatial.distance import pdist, squareform\n","# sklearn does have some functionality too, but mostly a wrapper to scipy\n","from sklearn.metrics import pairwise_distances \n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import KMeans, DBSCAN\n","from sklearn.neighbors import NearestNeighbors\n","from scipy.cluster.hierarchy import linkage, dendrogram\n","from scipy.cluster.hierarchy import fcluster\n","from sklearn import metrics \n","from sklearn.datasets import make_blobs\n","import scikitplot as skplt\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# what we need for today\n","from sklearn.decomposition import PCA\n","from sklearn import metrics \n","\n","import scikitplot as skplt\n","\n","# color maps\n","from matplotlib import cm\n","\n","# some \"fun\" packages\n","from wordcloud import WordCloud\n","import emoji\n","import re\n","\n","# text imports\n","\n","import spacy\n","from spacytextblob.spacytextblob import SpacyTextBlob\n","from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer,TfidfVectorizer  \n","import nltk\n","from nltk.corpus import stopwords\n","nltk.download('stopwords')\n","import json\n","\n","# text imports\n","from spacy import cli\n","import textdescriptives as td\n","import tokenwiser\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.pipeline import Pipeline\n","import nltk\n","from nltk.corpus import stopwords\n","nltk.download('stopwords')\n","nltk.download('punkt')\n","import gensim\n","from afinn import Afinn\n","from newspaper import Article\n","from umap import UMAP\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","# for distance and h-clustering\n","from scipy.cluster.hierarchy import linkage, dendrogram, fcluster\n","from scipy.spatial.distance import pdist, squareform\n","\n","#for k-means\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import KMeans\n","from sklearn.neighbors import NearestNeighbors\n","from sklearn.metrics import silhouette_samples, silhouette_score"]},{"cell_type":"code","source":["url = \"https://raw.githubusercontent.com/ChunxiaqiuY/BA865-Advanced-Analytics_Team-Great/main/fake_job_postings.csv\"\n"],"metadata":{"id":"vUXGClvhnNdx","executionInfo":{"status":"ok","timestamp":1644256286596,"user_tz":300,"elapsed":201,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["df = pd.read_csv(url)\n"],"metadata":{"id":"oDWxHGwRnPIN","executionInfo":{"status":"ok","timestamp":1644256290648,"user_tz":300,"elapsed":3098,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"pUjxoYDXnSFk","executionInfo":{"status":"ok","timestamp":1644256290649,"user_tz":300,"elapsed":11,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"30e3b39a-aed3-42f6-fc9b-755b3da927e3","colab":{"base_uri":"https://localhost:8080/","height":600}},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-85ce5cdb-7021-488d-a1ab-45731331befa\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>job_id</th>\n","      <th>title</th>\n","      <th>location</th>\n","      <th>department</th>\n","      <th>salary_range</th>\n","      <th>company_profile</th>\n","      <th>description</th>\n","      <th>requirements</th>\n","      <th>benefits</th>\n","      <th>telecommuting</th>\n","      <th>has_company_logo</th>\n","      <th>has_questions</th>\n","      <th>employment_type</th>\n","      <th>required_experience</th>\n","      <th>required_education</th>\n","      <th>industry</th>\n","      <th>function</th>\n","      <th>fraudulent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>Customer Service - Cloud Video Production</td>\n","      <td>NZ, , Auckland</td>\n","      <td>Success</td>\n","      <td>NaN</td>\n","      <td>90 Seconds, the worlds Cloud Video Production ...</td>\n","      <td>Organised - Focused - Vibrant - Awesome!Do you...</td>\n","      <td>What we expect from you:Your key responsibilit...</td>\n","      <td>What you will get from usThrough being part of...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Full-time</td>\n","      <td>Not Applicable</td>\n","      <td>NaN</td>\n","      <td>Marketing and Advertising</td>\n","      <td>Customer Service</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>Commissioning Machinery Assistant (CMA)</td>\n","      <td>US, IA, Wever</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Valor Services provides Workforce Solutions th...</td>\n","      <td>Our client, located in Houston, is actively se...</td>\n","      <td>Implement pre-commissioning and commissioning ...</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4</td>\n","      <td>Account Executive - Washington DC</td>\n","      <td>US, DC, Washington</td>\n","      <td>Sales</td>\n","      <td>NaN</td>\n","      <td>Our passion for improving quality of life thro...</td>\n","      <td>THE COMPANY: ESRI – Environmental Systems Rese...</td>\n","      <td>EDUCATION: Bachelor’s or Master’s in GIS, busi...</td>\n","      <td>Our culture is anything but corporate—we have ...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Full-time</td>\n","      <td>Mid-Senior level</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Computer Software</td>\n","      <td>Sales</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","      <td>Bill Review Manager</td>\n","      <td>US, FL, Fort Worth</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>SpotSource Solutions LLC is a Global Human Cap...</td>\n","      <td>JOB TITLE: Itemization Review ManagerLOCATION:...</td>\n","      <td>QUALIFICATIONS:RN license in the State of Texa...</td>\n","      <td>Full Benefits Offered</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Full-time</td>\n","      <td>Mid-Senior level</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Hospital &amp; Health Care</td>\n","      <td>Health Care Provider</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>Accounting Clerk</td>\n","      <td>US, MD,</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Job OverviewApex is an environmental consultin...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85ce5cdb-7021-488d-a1ab-45731331befa')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-85ce5cdb-7021-488d-a1ab-45731331befa button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-85ce5cdb-7021-488d-a1ab-45731331befa');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   job_id  ... fraudulent\n","0       2  ...          0\n","1       3  ...          0\n","2       4  ...          0\n","3       5  ...          0\n","4       6  ...          0\n","\n","[5 rows x 18 columns]"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df.isna().sum()"],"metadata":{"id":"vt2lh8qBnTpB","executionInfo":{"status":"ok","timestamp":1644256290649,"user_tz":300,"elapsed":9,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"498a1c56-58bd-43dc-f17e-ebc44bbd9401","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["job_id                     0\n","title                      0\n","location                 346\n","department             11547\n","salary_range           15011\n","company_profile         3308\n","description                1\n","requirements            2695\n","benefits                7209\n","telecommuting              0\n","has_company_logo           0\n","has_questions              0\n","employment_type         3471\n","required_experience     7050\n","required_education      8104\n","industry                4902\n","function                6455\n","fraudulent                 0\n","dtype: int64"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["job = df.copy()"],"metadata":{"id":"-p5eoLI1emky","executionInfo":{"status":"ok","timestamp":1644256290650,"user_tz":300,"elapsed":8,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["del job['department']"],"metadata":{"id":"iH8dOyNOepVW","executionInfo":{"status":"ok","timestamp":1644256290650,"user_tz":300,"elapsed":7,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["del job['salary_range']"],"metadata":{"id":"cIYq7jwte5Rq","executionInfo":{"status":"ok","timestamp":1644256290954,"user_tz":300,"elapsed":1,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["job.dropna(inplace = True)"],"metadata":{"id":"jxJZfaAre7BF","executionInfo":{"status":"ok","timestamp":1644256291933,"user_tz":300,"elapsed":243,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["job.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nMuDzZr0e_3x","executionInfo":{"status":"ok","timestamp":1644256292439,"user_tz":300,"elapsed":257,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"dc170d39-1be4-496e-d0da-94a3afec9d62"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["job_id                 0\n","title                  0\n","location               0\n","company_profile        0\n","description            0\n","requirements           0\n","benefits               0\n","telecommuting          0\n","has_company_logo       0\n","has_questions          0\n","employment_type        0\n","required_experience    0\n","required_education     0\n","industry               0\n","function               0\n","fraudulent             0\n","dtype: int64"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["job.index = job['job_id']"],"metadata":{"id":"FUjdIeeAfvY7","executionInfo":{"status":"ok","timestamp":1644256293638,"user_tz":300,"elapsed":2,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["del job['job_id']"],"metadata":{"id":"ZqopwEa3gAP1","executionInfo":{"status":"ok","timestamp":1644256295527,"user_tz":300,"elapsed":2,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["job.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":562},"id":"00DJtLO-fy8Q","executionInfo":{"status":"ok","timestamp":1644256297575,"user_tz":300,"elapsed":266,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"20f5122d-2a43-48ff-8f9a-0939b4c5ac6b"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-975c5fdd-9425-4c15-87d3-2d6137f5c244\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>location</th>\n","      <th>company_profile</th>\n","      <th>description</th>\n","      <th>requirements</th>\n","      <th>benefits</th>\n","      <th>telecommuting</th>\n","      <th>has_company_logo</th>\n","      <th>has_questions</th>\n","      <th>employment_type</th>\n","      <th>required_experience</th>\n","      <th>required_education</th>\n","      <th>industry</th>\n","      <th>function</th>\n","      <th>fraudulent</th>\n","    </tr>\n","    <tr>\n","      <th>job_id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>Account Executive - Washington DC</td>\n","      <td>US, DC, Washington</td>\n","      <td>Our passion for improving quality of life thro...</td>\n","      <td>THE COMPANY: ESRI – Environmental Systems Rese...</td>\n","      <td>EDUCATION: Bachelor’s or Master’s in GIS, busi...</td>\n","      <td>Our culture is anything but corporate—we have ...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Full-time</td>\n","      <td>Mid-Senior level</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Computer Software</td>\n","      <td>Sales</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Bill Review Manager</td>\n","      <td>US, FL, Fort Worth</td>\n","      <td>SpotSource Solutions LLC is a Global Human Cap...</td>\n","      <td>JOB TITLE: Itemization Review ManagerLOCATION:...</td>\n","      <td>QUALIFICATIONS:RN license in the State of Texa...</td>\n","      <td>Full Benefits Offered</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Full-time</td>\n","      <td>Mid-Senior level</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Hospital &amp; Health Care</td>\n","      <td>Health Care Provider</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Head of Content (m/f)</td>\n","      <td>DE, BE, Berlin</td>\n","      <td>Founded in 2009, the Fonpit AG rose with its i...</td>\n","      <td>Your Responsibilities: Manage the English-spea...</td>\n","      <td>Your Know-How:                                ...</td>\n","      <td>Your Benefits: Being part of a fast-growing co...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Full-time</td>\n","      <td>Mid-Senior level</td>\n","      <td>Master's Degree</td>\n","      <td>Online Media</td>\n","      <td>Management</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>Account Executive - Sydney</td>\n","      <td>AU, NSW, Sydney</td>\n","      <td>Adthena is the UK’s leading competitive intell...</td>\n","      <td>Are you interested in a satisfying and financi...</td>\n","      <td>You’ll need to be smart and passionate and hav...</td>\n","      <td>In return we'll pay you well, give you some ow...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Full-time</td>\n","      <td>Associate</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Internet</td>\n","      <td>Sales</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>VP of Sales - Vault Dragon</td>\n","      <td>SG, 01, Singapore</td>\n","      <td>Jungle Ventures is the leading Singapore based...</td>\n","      <td>About Vault Dragon Vault Dragon is Dropbox for...</td>\n","      <td>Key Superpowers3-5 years of high-pressure sale...</td>\n","      <td>Basic: SGD 120,000Equity negotiable for a rock...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Full-time</td>\n","      <td>Executive</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Facilities Services</td>\n","      <td>Sales</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-975c5fdd-9425-4c15-87d3-2d6137f5c244')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-975c5fdd-9425-4c15-87d3-2d6137f5c244 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-975c5fdd-9425-4c15-87d3-2d6137f5c244');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                                    title  ... fraudulent\n","job_id                                     ...           \n","4       Account Executive - Washington DC  ...          0\n","5                     Bill Review Manager  ...          0\n","7                   Head of Content (m/f)  ...          0\n","15             Account Executive - Sydney  ...          0\n","16             VP of Sales - Vault Dragon  ...          0\n","\n","[5 rows x 15 columns]"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["job.describe().T"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"7crMnzu0gHdA","executionInfo":{"status":"ok","timestamp":1644256303713,"user_tz":300,"elapsed":293,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"9d18964a-28b4-4bca-8859-4d14e048c228"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-aa64d6fd-c3d2-4638-88e3-3aeb000dfdbe\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>telecommuting</th>\n","      <td>4441.0</td>\n","      <td>0.061473</td>\n","      <td>0.240222</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>has_company_logo</th>\n","      <td>4441.0</td>\n","      <td>0.978608</td>\n","      <td>0.144702</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>has_questions</th>\n","      <td>4441.0</td>\n","      <td>0.642423</td>\n","      <td>0.479341</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>fraudulent</th>\n","      <td>4441.0</td>\n","      <td>0.036253</td>\n","      <td>0.186940</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa64d6fd-c3d2-4638-88e3-3aeb000dfdbe')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-aa64d6fd-c3d2-4638-88e3-3aeb000dfdbe button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-aa64d6fd-c3d2-4638-88e3-3aeb000dfdbe');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                   count      mean       std  min  25%  50%  75%  max\n","telecommuting     4441.0  0.061473  0.240222  0.0  0.0  0.0  0.0  1.0\n","has_company_logo  4441.0  0.978608  0.144702  0.0  1.0  1.0  1.0  1.0\n","has_questions     4441.0  0.642423  0.479341  0.0  0.0  1.0  1.0  1.0\n","fraudulent        4441.0  0.036253  0.186940  0.0  0.0  0.0  0.0  1.0"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["##EDA"],"metadata":{"id":"jE1NfRcEiVd3"}},{"cell_type":"code","source":["#开始努力去掉location当中的空格\n","\n","s1 = job.location[job.location.str.strip() != ''].reset_index(drop=True)\n","\n","\n","#不是空格的锅， 而是有些地址查询不到，导致location的type是nonetype"],"metadata":{"id":"vpVtEz5Lhq2W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["s1.head(60)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b2sx_PK6hq0A","executionInfo":{"status":"ok","timestamp":1643925336567,"user_tz":300,"elapsed":135,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"23b6afc9-6fba-4b2f-db9c-d5f0b2db006b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0                     US, DC, Washington\n","1                     US, FL, Fort Worth\n","2                         DE, BE, Berlin\n","3                        AU, NSW, Sydney\n","4                      SG, 01, Singapore\n","5                        NZ, N, Auckland\n","6                                 AE, , \n","7                       US, CA, Carlsbad\n","8                       AE, AZ, Abudhabi\n","9                        US, WA, Everett\n","10                    US, TX, Fort Worth\n","11                 US, CA, San Francisco\n","12                     US, IA, Iowa city\n","13                  US, IA, Cedar Rapids\n","14                     US, NY, Otisville\n","15                        DE, BE, Berlin\n","16                    US, TX, Fort Worth\n","17                       GB, , Edinburgh\n","18                 US, CA, Newport Beach\n","19                      US, NY, New York\n","20                                US, , \n","21                          GB, , London\n","22                     US, , Stocton, CA\n","23                     GB, WAR, Coventry\n","24                 US, CA, San Francisco\n","25                      US, NY, Brooklyn\n","26                              US, GA, \n","27                   GB, , Milton Keynes\n","28                      GB, , Manchester\n","29                       US, TX, Hidalgo\n","30                  US, PA, Philadelphia\n","31                       US, AZ, Phoenix\n","32                      US, NY, New York\n","33                          GB, , London\n","34            US, WI, Western Wisconsin \n","35                          EG, C, Cairo\n","36                          GB, , London\n","37                         GR, I, Athens\n","38                                    US\n","39                       US, IL, Chicago\n","40                       GB, LND, London\n","41                          GR, E, Volos\n","42                        IN, MP, Indore\n","43                   GB, MAN, Manchester\n","44                        BE, , Brussels\n","45                     US, CA, San Mateo\n","46                BR, RJ, Rio De Janeiro\n","47    US, CA, Bakersfield, CA / Mt. Poso\n","48                 SA, 01, Riyadh, Olaya\n","49                       GB, LND, London\n","50                     US, MA, Cambridge\n","51                       GB, LND, London\n","52                       RU, MOW, Moscow\n","53                       GB, LND, London\n","54                       GB, GBN, London\n","55                       GB, GBN, London\n","56                       GB, LND, London\n","57                       GB, LND, London\n","58                       GB, GBN, London\n","59                      US, NY, New York\n","Name: location, dtype: object"]},"metadata":{},"execution_count":156}]},{"cell_type":"code","source":[""],"metadata":{"id":"qExLew1ihqyE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from geopy.geocoders import Nominatim"],"metadata":{"id":"aIt8puGDKKL3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"m5ZVKhET-FBV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["####最最新循环\n","from geopy.exc import GeocoderTimedOut\n","import time\n","\n","LON=[]\n","LAT=[]\n","geolocator1 = Nominatim()\n","location1 = geolocator1.geocode('US, ,Stocton,CA')\n","geolocator = Nominatim()\n","def geocode(loc, recursion=0):\n","  try:\n","       return geolocator.geocode(loc)\n","  except GeocoderTimedOut as e:\n","       if recursion > 10:      # max recursions\n","          raise e\n","       time.sleep(1) # wait a bit\n","       # try again\n","       return geocode(loc, recursion=recursion + 1)\n","         \n","#def geocode_me(loc):\n","#    try:\n","#        return geolocator.geocode(loc)\n","#    except GeocoderTimedOut:\n","#        return geocode_me(loc)\n","         \n","for loc in job.location:    \n","   geocode(loc)\n","   location=geolocator.geocode(loc)\n","   if type(location) != type(location1):\n","    LON.append(location.longitude)\n","    LAT.append(location.latitude)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"DZnF0bLs2lgf","executionInfo":{"status":"error","timestamp":1643931956971,"user_tz":300,"elapsed":161122,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"588d2b61-6e09-4d9d-ce90-48aba672bd6b"},"execution_count":null,"outputs":[{"output_type":"error","ename":"GeocoderTimedOut","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mloc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m    \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m    \u001b[0mlocation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocation1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrecursion\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m#def geocode_me(loc):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0mrecursion\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m:\u001b[0m      \u001b[0;31m# max recursions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m           \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m        \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# wait a bit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m        \u001b[0;31m# try again\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-250-cc6acb0c46d6>\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(loc, recursion)\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m        \u001b[0;32mreturn\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0mrecursion\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m:\u001b[0m      \u001b[0;31m# max recursions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    305\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n\u001b[1;32m    309\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    369\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderUnavailable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service not available'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    373\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"timed out\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out"]}]},{"cell_type":"code","source":[""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RANCZrr63azV","executionInfo":{"status":"ok","timestamp":1643930456005,"user_tz":300,"elapsed":355,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"e1aa7366-aafa-4465-aab8-f6788becd4c7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function __main__.geocode>"]},"metadata":{},"execution_count":244}]},{"cell_type":"code","source":["###最新循环：\n","geolocator1 = Nominatim()\n","location1 = geolocator1.geocode('US, ,Stocton,CA')\n","type(location1)\n","\n","#开始循环\n","LON=[]\n","LAT=[]\n","for loc in job.location:\n","   geolocator = Nominatim()\n","   location = geolocator.geocode(loc,timeout=None)\n","  # print(type(location)!='NoneType') \n","   if type(location) != type(location1):\n","     LON.append(location.longitude)\n","     LAT.append(location.latitude)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":453},"id":"eejEpn5_zMo7","executionInfo":{"status":"error","timestamp":1643929412391,"user_tz":300,"elapsed":40697,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"52413e66-2bbc-4a62-bd5b-ac30f937508a"},"execution_count":null,"outputs":[{"output_type":"error","ename":"GeocoderTimedOut","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mtimeout\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mtimeout\u001b[0m: The read operation timed out","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mGeocoderTimedOut\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-233-6e8772772d60>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mloc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m    \u001b[0mgeolocator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mNominatim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m    \u001b[0mlocation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m   \u001b[0;31m# print(type(location)!='NoneType')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m    \u001b[0;32mif\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocation1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    305\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n\u001b[1;32m    309\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    369\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderUnavailable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service not available'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSocketTimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 371\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mGeocoderTimedOut\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Service timed out'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    372\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSSLError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    373\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"timed out\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mGeocoderTimedOut\u001b[0m: Service timed out"]}]},{"cell_type":"code","source":["#测试专用1\n","geolocator = Nominatim(user_agent='myapplication')\n","location = geolocator.geocode('US, ,Stocton,CA')\n","print(type(location)!='NoneType')\n","print(type(location)=='geopy.location.Location')\n","print(type(location))\n","#location.raw['lon']\n","#location.raw['lat'] \n","print(location.longitude)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"3yl9iwHHKKKB","executionInfo":{"status":"error","timestamp":1643928776117,"user_tz":300,"elapsed":729,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"79691db7-1d09-4301-ab7d-c092564eccc1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n","<class 'NoneType'>\n"]},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-229-d5ed984f0c7f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m#location.raw['lon']\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m#location.raw['lat']\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlongitude\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'longitude'"]}]},{"cell_type":"code","source":["!pip install geocoder"],"metadata":{"id":"e9TCi4bVuV1F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import geocoder"],"metadata":{"id":"YdkVdyXOubWF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#测试专用2 - -暂时舍弃\n","g = geocoder.bing('US,GA', key='AiPH1bDrwkR741iHL1ycFgWr3bgRdkDY3UhZXMUejMljQpq98Z9C4tbqLfwrFLf1')\n","results = g.json\n","print(results['lat'], results['lng'])"],"metadata":{"id":"jlo-WKzIYA5E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["results"],"metadata":{"id":"ZT6JdOfFurBh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Bing API Key\n","AiPH1bDrwkR741iHL1ycFgWr3bgRdkDY3UhZXMUejMljQpq98Z9C4tbqLfwrFLf1"],"metadata":{"id":"pvu3ulosZ5dz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#循环2  - -暂时舍弃\n","LAT=[]\n","LON=[]\n","for loc in job.location:\n","   g = geocoder.bing(loc, key='AiPH1bDrwkR741iHL1ycFgWr3bgRdkDY3UhZXMUejMljQpq98Z9C4tbqLfwrFLf1')\n","   results = g.json\n","   if type(results) == 'dict':\n","    LAT.append(results['lat'])\n","    LON.append(results['lng'])"],"metadata":{"id":"Zm-m2W7VvSQX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" # print(type(location)=='geopy.location.Location') \n"," #  if type(location) == 'geopy.location.Location':\n"," #    print(type(location))\n"," #    LON.append(location.longitude])\n"," #    LAT.append(location.latitude)"],"metadata":{"id":"eCxt-P7hZ5b1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#循环\n","LON=[]\n","LAT=[]\n","for loc in job.location:\n","   geolocator = Nominatim()\n","   location = geolocator.geocode(loc)\n","  # print(type(location)!='NoneType') \n"," #  if type(location) == 'geopy.location.Location':\n","   print(type(location))\n"," #    LON.append(location.longitude])\n"," #    LAT.append(location.latitude)\n","      \n","  \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":471},"id":"r5LCX7tRJFyH","executionInfo":{"status":"error","timestamp":1643928724462,"user_tz":300,"elapsed":2666,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"6f145145-b767-4eb8-c45d-1276822a946e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'geopy.location.Location'>\n","<class 'geopy.location.Location'>\n","<class 'geopy.location.Location'>\n","<class 'geopy.location.Location'>\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-228-081e5be0e477>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mloc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocation\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m    \u001b[0mgeolocator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mNominatim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m    \u001b[0mlocation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgeolocator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeocode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m   \u001b[0;31m# print(type(location)!='NoneType')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m  \u001b[0;31m#  if type(location) == 'geopy.location.Location':\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/osm.py\u001b[0m in \u001b[0;36mgeocode\u001b[0;34m(self, query, exactly_one, timeout, limit, addressdetails, language, geometry, extratags)\u001b[0m\n\u001b[1;32m    305\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    306\u001b[0m         return self._parse_json(\n\u001b[0;32m--> 307\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_geocoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexactly_one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    308\u001b[0m         )\n\u001b[1;32m    309\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/geopy/geocoders/base.py\u001b[0m in \u001b[0;36m_call_geocoder\u001b[0;34m(self, url, timeout, raw, requester, deserializer, **kwargs)\u001b[0m\n\u001b[1;32m    342\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 344\u001b[0;31m             \u001b[0mpage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequester\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    345\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merror\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    346\u001b[0m             message = (\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(self, fullurl, data, timeout)\u001b[0m\n\u001b[1;32m    523\u001b[0m             \u001b[0mreq\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmeth\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    524\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m         \u001b[0;31m# post-process response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self, req, data)\u001b[0m\n\u001b[1;32m    541\u001b[0m         \u001b[0mprotocol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m         result = self._call_chain(self.handle_open, protocol, protocol +\n\u001b[0;32m--> 543\u001b[0;31m                                   '_open', req)\n\u001b[0m\u001b[1;32m    544\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    545\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36m_call_chain\u001b[0;34m(self, chain, kind, meth_name, *args)\u001b[0m\n\u001b[1;32m    501\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mhandler\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhandlers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeth_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    505\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mhttps_open\u001b[0;34m(self, req)\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mhttps_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1392\u001b[0m             return self.do_open(http.client.HTTPSConnection, req,\n\u001b[0;32m-> 1393\u001b[0;31m                 context=self._context, check_hostname=self._check_hostname)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1395\u001b[0m         \u001b[0mhttps_request\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAbstractHTTPHandler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_request_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/urllib/request.py\u001b[0m in \u001b[0;36mdo_open\u001b[0;34m(self, http_class, req, **http_conn_args)\u001b[0m\n\u001b[1;32m   1351\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m# timeout error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mURLError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1355\u001b[0m             \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1371\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1372\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1373\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1374\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1375\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    317\u001b[0m         \u001b[0;31m# read until we get a non-100 response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    278\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    279\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 280\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    281\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mLineTooLong\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"status line\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1069\u001b[0m                   \u001b[0;34m\"non-zero flags not allowed in calls to recv_into() on %s\"\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1070\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1071\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1072\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1073\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbuffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m    927\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    928\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 929\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    930\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    931\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["#job.location.isnull()\n","#job.location.isna().sum()\n","#job.location.dropna(inplace = True)\n","type(job.location)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_WqLiV95NbcU","executionInfo":{"status":"ok","timestamp":1643924023978,"user_tz":300,"elapsed":175,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"ad241455-9a54-4b92-db37-820276ab1a5b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pandas.core.series.Series"]},"metadata":{},"execution_count":113}]},{"cell_type":"code","source":["#地址\n","address_yep=(location.raw['lon'],location.raw['lat'])\n","print(address_yep)"],"metadata":{"id":"hLjrhNvGM2Nh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["job.location.head(25)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VgWssrjaMcfu","executionInfo":{"status":"ok","timestamp":1643923883029,"user_tz":300,"elapsed":133,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"6e352695-bf35-4f44-80fe-73adf170f096"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["job_id\n","4         US, DC, Washington\n","5         US, FL, Fort Worth\n","7             DE, BE, Berlin\n","15           AU, NSW, Sydney\n","16         SG, 01, Singapore\n","22           NZ, N, Auckland\n","23                    AE, , \n","24          US, CA, Carlsbad\n","28          AE, AZ, Abudhabi\n","33           US, WA, Everett\n","59        US, TX, Fort Worth\n","60     US, CA, San Francisco\n","61         US, IA, Iowa city\n","62      US, IA, Cedar Rapids\n","72         US, NY, Otisville\n","76            DE, BE, Berlin\n","77        US, TX, Fort Worth\n","83           GB, , Edinburgh\n","86     US, CA, Newport Beach\n","91          US, NY, New York\n","96                    US, , \n","97              GB, , London\n","99         US, , Stocton, CA\n","103        GB, WAR, Coventry\n","117    US, CA, San Francisco\n","Name: location, dtype: object"]},"metadata":{},"execution_count":111}]},{"cell_type":"code","source":["#查询出来的location全部信息\n","location.raw"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cN9dCPdAMF90","executionInfo":{"status":"ok","timestamp":1643918685160,"user_tz":300,"elapsed":159,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"7360b9a4-b523-4e96-99db-d5153b16ff7d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'boundingbox': ['52.3570365', '52.6770365', '13.2288599', '13.5488599'],\n"," 'class': 'place',\n"," 'display_name': 'Berlin, 10117, Deutschland',\n"," 'icon': 'https://nominatim.openstreetmap.org/ui/mapicons//poi_place_city.p.20.png',\n"," 'importance': 1.0975390282491362,\n"," 'lat': '52.5170365',\n"," 'licence': 'Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright',\n"," 'lon': '13.3888599',\n"," 'osm_id': 240109189,\n"," 'osm_type': 'node',\n"," 'place_id': 508901,\n"," 'type': 'city'}"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":[""],"metadata":{"id":"P5RMGeuCMFfv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"hNBWCcMGMFdP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.scatter(location.raw['lat'], location.raw['lon'])\n","plt.colorbar()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":269},"id":"6BVrTAMBLG1J","executionInfo":{"status":"ok","timestamp":1643918469244,"user_tz":300,"elapsed":608,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"91d5d322-80a2-47f2-adb9-9b056d175415"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":[""],"metadata":{"id":"gv-rUYrLGdoj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"JKSKRlGlCkps"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"3HomtksKGIKT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["####Sort the location? company logo?"],"metadata":{"id":"oee-H5xAilKD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#sns.displot(job, x=\"location\", binwidth=3, hue=\"location\", multiple=\"stack\")\n"],"metadata":{"id":"2w2CxJPav9Hm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["corr1 = job.corr()\n","corr1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"GPCgVjiC_h42","executionInfo":{"status":"ok","timestamp":1644256314132,"user_tz":300,"elapsed":4,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"34f9f4cf-6533-406b-828f-572371ce4b79"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-b6845c3e-1d3c-4b18-9d96-ea691a5f4921\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>telecommuting</th>\n","      <th>has_company_logo</th>\n","      <th>has_questions</th>\n","      <th>fraudulent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>telecommuting</th>\n","      <td>1.000000</td>\n","      <td>0.011921</td>\n","      <td>-0.024218</td>\n","      <td>0.020577</td>\n","    </tr>\n","    <tr>\n","      <th>has_company_logo</th>\n","      <td>0.011921</td>\n","      <td>1.000000</td>\n","      <td>0.081276</td>\n","      <td>-0.037933</td>\n","    </tr>\n","    <tr>\n","      <th>has_questions</th>\n","      <td>-0.024218</td>\n","      <td>0.081276</td>\n","      <td>1.000000</td>\n","      <td>0.019027</td>\n","    </tr>\n","    <tr>\n","      <th>fraudulent</th>\n","      <td>0.020577</td>\n","      <td>-0.037933</td>\n","      <td>0.019027</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6845c3e-1d3c-4b18-9d96-ea691a5f4921')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b6845c3e-1d3c-4b18-9d96-ea691a5f4921 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b6845c3e-1d3c-4b18-9d96-ea691a5f4921');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                  telecommuting  has_company_logo  has_questions  fraudulent\n","telecommuting          1.000000          0.011921      -0.024218    0.020577\n","has_company_logo       0.011921          1.000000       0.081276   -0.037933\n","has_questions         -0.024218          0.081276       1.000000    0.019027\n","fraudulent             0.020577         -0.037933       0.019027    1.000000"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["plt.figure(figsize=(16,16),dpi=80)\n","heat = sns.heatmap(corr1, vmin=-1, vmax=1, center=0, cmap=sns.diverging_palette(20, 220, n=200), square=True,annot=True)\n","plt.title(\"Correlation\", fontsize = 15);"],"metadata":{"id":"Be2uESd36XBu","executionInfo":{"status":"ok","timestamp":1644256316180,"user_tz":300,"elapsed":599,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"096903a1-9dbd-4660-93da-46970a9d26d4"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1280x1280 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["sns.displot(job,x='employment_type')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":387},"id":"i3Z_P8j8v9Fk","executionInfo":{"status":"ok","timestamp":1643912305172,"user_tz":300,"elapsed":368,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"d6d6c7f4-7d03-498d-f881-24349b306620"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7efbb0410bd0>"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(figsize=(8,8))\n","sns.barplot(data=job, x=\"required_experience\", y=\"fraudulent\")\n","plt.title(\"Average Fraudulent by required experience\")\n","plt.ylabel(\"Average fraudulent\")\n","plt.xlabel(\"Requirement of job\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":531},"id":"qxdDPpUZy3HA","executionInfo":{"status":"ok","timestamp":1643912438406,"user_tz":300,"elapsed":2111,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"6c5e787f-384d-49e7-ea9d-999ea5275bc7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Requirement of job')"]},"metadata":{},"execution_count":21},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(figsize=(8,8))\n","sns.barplot(data=job, x=\"employment_type\", y=\"fraudulent\")\n","plt.title(\"Average Fraudulent by employment type\")\n","plt.ylabel(\"Average fraudulent\")\n","plt.xlabel(\"employment type\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":531},"id":"rkDsyfbS0W-n","executionInfo":{"status":"ok","timestamp":1643912538629,"user_tz":300,"elapsed":729,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"d8b517a4-3344-4a19-9309-21c1a3c8386f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'employment type')"]},"metadata":{},"execution_count":22},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import pylab as pl"],"metadata":{"id":"1HJuWYFqU_X3","executionInfo":{"status":"ok","timestamp":1644256557835,"user_tz":300,"elapsed":292,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=[5,4])\n","sns.histplot(x=\"employment_type\", hue='fraudulent', edgecolor=\"black\", multiple=\"stack\", alpha=0.7, data=job)\n","sns.despine()\n","plt.title(\"Histplot of employment_type by target\")"],"metadata":{"id":"7FYbCepm0W8j","colab":{"base_uri":"https://localhost:8080/","height":314},"executionInfo":{"status":"ok","timestamp":1644256453187,"user_tz":300,"elapsed":560,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"692ce1c8-0226-4d99-df87-5412802f6eba"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Histplot of employment_type by target')"]},"metadata":{},"execution_count":29},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(figsize=[5,4])\n","sns.histplot(x=\"required_experience\", hue='fraudulent', edgecolor=\"black\", multiple=\"stack\", alpha=0.7, data=job)\n","sns.despine()\n","plt.title(\"Histplot of required_experience by target\")\n","pl.xticks(rotation=45)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"5mrX9m6sUL4N","executionInfo":{"status":"ok","timestamp":1644256560904,"user_tz":300,"elapsed":613,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"3ce73c35-f8cc-419b-ad28-c8a015c88608"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([0, 1, 2, 3, 4, 5, 6], <a list of 7 Text major ticklabel objects>)"]},"metadata":{},"execution_count":36},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(figsize=[7,4])\n","sns.histplot(x=\"required_education\", hue='fraudulent', edgecolor=\"black\", multiple=\"stack\", alpha=0.7, data=job)\n","sns.despine()\n","plt.title(\"Histplot of required_education by target\")\n","pl.xticks(rotation=45)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"id":"21G4K4orUL2K","executionInfo":{"status":"ok","timestamp":1644256607056,"user_tz":300,"elapsed":833,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"f444a2cc-5676-4371-e7b5-50cb56bff827"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n"," <a list of 12 Text major ticklabel objects>)"]},"metadata":{},"execution_count":40},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 504x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(figsize=[5,4])\n","sns.histplot(x=\"has_company_logo\", hue='fraudulent', edgecolor=\"black\", multiple=\"stack\", alpha=0.7, data=job)\n","sns.despine()\n","plt.title(\"Histplot of has_company_logo by target\")\n","pl.xticks(rotation=45)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":340},"id":"jhKN576CULye","executionInfo":{"status":"ok","timestamp":1644256650632,"user_tz":300,"elapsed":763,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"5552d45d-fd1e-4d67-e6d2-3b9e81a74a57"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([-0.2,  0. ,  0.2,  0.4,  0.6,  0.8,  1. ,  1.2]),\n"," <a list of 8 Text major ticklabel objects>)"]},"metadata":{},"execution_count":41},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(figsize=[5,4])\n","sns.histplot(x=\"has_questions\", hue='fraudulent', edgecolor=\"black\", multiple=\"stack\", alpha=0.7, data=job)\n","sns.despine()\n","plt.title(\"Histplot of has_questions by target\")\n","pl.xticks(rotation=45)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":340},"id":"EEKBnFfPULwF","executionInfo":{"status":"ok","timestamp":1644256651750,"user_tz":300,"elapsed":227,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"8d593855-5f90-4051-8a5a-09f457542899"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([-0.2,  0. ,  0.2,  0.4,  0.6,  0.8,  1. ,  1.2]),\n"," <a list of 8 Text major ticklabel objects>)"]},"metadata":{},"execution_count":42},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAVMAAAEgCAYAAAAJ/ZAbAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deZgV5Zn38e+PRRsFdyRCg5CIipAEEbe4jBMXkGTUxAQ1iAtGNErymomZxEwmMonmNaOj0SExL0aCimIYlxEdgqDGEOMGGnc0EIXQuKC4Elfgfv+op/HY9nK6u06fc+jf57rO1XWeqnrqrqrT93nqqTpVigjMzKx9upQ7ADOzjYGTqZlZDpxMzcxy4GRqZpYDJ1Mzsxw4mZqZ5cDJtEJIelLSQSWo925JX8+73iaW9Q1JL0laI2nbBuMGSgpJ3ToilkpRqv3azPJOknRPRy3PPuRk2gEkLZN0SIOyj3zoI2JoRNzdQj0lS0jtrVtSd+Bi4LCI6BkRq/ONsPJJmi7pvMKyYvZrperIL+JKXH5rOZlaXvoANcCT5Q7EKkNnOwpxMq0Qha1XSXtJWiTpzXTYfHGabEH6+3o6lN43tXD/JGmKpDckPS3p4CaW0UXSDyUtl7RK0tWStmyq7kbm31TSzyU9n14/T2U7A88UzH9XM6s6TtLfJL0i6V8L6t5L0n2SXpf0QlqfTdI4SbokxfympMclDWthe24raXaa/kFJP6k/EmisFd6wFSRpgqTFkl6TdLukHZuLRdJEYBzwL2n73ZqmL9yvjW6/NO4gSXWSvpPqfkHSyQXxjJH0lKS3JK2UdHbzq//xz4Okr0p6qMGE/yzplkYqOB84AJiS1mdKKr9U0oq07g9JOqBgnsmSbpA0Q9KbwEmSBklakOK+Q9IvJM0omGcfSfem/f6oUpdIU8uvaBHhV4lfwDLgkAZlJwH3NDYNcB8wPg33BPZJwwOBALo1qGct8G2gO3AM8AawTRp/N/D1NDwBWAp8MtV7E3BNU3U3sh4/Bu4Htgd6A/cCPylm/oLxVwA9gM8C7wFD0vg9gH2AbmnaxcBZadwo4CFgK0DAEGCHFrb59cAsYHNgGLCyfns3sR0Lt9ORaTsNSfH8ELi3pViA6cB5Te37FrbfQWk//jjtxzHA28DWafwLwAFpeGtgRBPr3eTnAdgUeLV+m6fp/wwc3URdG7ZJQdnxwLZpu3wHeBGoSeMmAx8AR5E11HqQfZYvAjYB9gfeBGak6fsBq9O6dgEOTe97N7X8Sn6VPYDO8Er/UGuA1wteb9N0Ml0A/DuwXYN6GksCJwHPAyooe5APk/GGDyRwJ3BGwXS7pA9/t8bqbmQ9/gqMKXg/CljWVGxNxF7bIM5jm5j+LODmNPx54C9kybZLEdu7a1qvXQvKfkrxyfR3wCkF47qk/bVjc7HQcjJtbvsdBLzTIKZVfPhF+jfgNGCLFta9pc/D5cD5aXgo8BqwaRN1bdgmzSzvNeCzaXgysKBg3ACyxL5ZQdkMPkym3yN9mReMvx04sdjlV9LLh/kd56iI2Kr+BZzRzLSnADsDT0taKOmLLdS9MtKnL1kO9G1kur5pXOF03cj6O4vR2PyNLac5LxYMv03WQkbSzpJuk/RiOkT8KbAdQETcBUwBfgGskjRV0hbNLKM32XqtaBBrsXYELk2Hnq+TteYE9GtDLIVa2n6rI2JtwfsN2wc4mqwFt1zSHxrrhinQ3OfhKuBrkgSMB2ZFxHtFxo+ks1P3xxtp22xJ2k9J4TbvC7waEW83MX5H4Kv12znVtz+wQ7HxVBIn0woUEUsi4jiyw8GfATdI2pysNdWYfumfo94AstZJQ8+TfYALp1sLvNRM3S3N39hy2uJy4GlgcERsAfyALIEBEBGXRcQewG5kXzTfbaaul8nWq3+DWOv9Pf3drKDsEwXDK4DTCr/8IqJHRNzbQiwtbcM2b7+IWBgRR5J9Jv6HrAujKU1+HiLifuB9sv7IrwHXNLfYwjepf/RfgLFk3Q9bkXUhqIl5XgC2kVS4nQv3yQqylmnhdt48Ii5obPmVzsm0Akk6XlLviFhP1iUAsJ4sSawn6/MstD3wLUndJX2VrB9vTiNVzwS+nU4K9CRr/f02tYaaqrvh/D+U1FvSdsCPyA7b8tCLrD9tjaRdgW/Uj5C0p6S9lV1+9Xfg3RRroyJiHVl/8GRJm0naDTixYPzLZH2ox0vqKmkC8KmCKn4FnCNpaFr+lmm7thTLS5Rg+0naRNI4SVtGxAdpOzW5/rT8ebiarHX9QUQ0d01qw/XpRfYl9TLQTdKPgCZb5RGxHFhEth82Sa3pfyqYZAbwT5JGpf1Qk07E1Tax/IrmZFqZRgNPSloDXErWr/hOOlw6H/hTOizaJ03/ADAYeCWN/0o0fp3nNLKWyALgObJE8E2AZuoudB7ZP8djwOPAw6ksD2eTtZTeIjtJ9duCcVukstfIDllXAxe2UN8kskPkF8n6Mn/TYPypZC3K1WR9h/fWj4iIm8mOCK5PXQ5PAIcXEcuVwG5p+/1PIzG1Z/uNB5aleE4nu3KgKS19Hq4hOynXUiK/FPiKsisaLiPrz5xL1me8nOzzs6KZ+Ulx7ku2nc4j26/vAUTECrKTfT8gS9AryPZJfV5quPyKpo92rVi1kXQSWSf9/uWOpZJ5O31IUg+yk1sjImJJBy/7t8DTEXFuRy63I7hlatb5fANY2BGJNHWLfErZNc6jyVqijbXaq16n+oWCbVwkPclHT+jUOy0iru3oeKqBpGVkJ4yO6qBFfoKs/3pboA74RkT8uYOW3aF8mG9mlgMf5puZ5cDJ1MwsBxtln+no0aNj7ty55Q7DzDY+amrERtkyfeWVV8odgpl1MhtlMjUz62hOpmZmOXAyNTPLwUZ5AqoxH3zwAXV1dbz77rvlDqVD1NTUUFtbS/fu3csdilmn0GmSaV1dHb169WLgwIF89O5kG5+IYPXq1dTV1TFo0KByh2PWKXSaw/x3332XbbfddqNPpACS2HbbbTtNK9ysEnSaZAp0ikRarzOtq1kl6FTJtDGXXXYZQ4YMYdy45m4P2Xp33303X/xiS08bgZ49e7Y4TVOmT5/O88/ndaN7M2uPTtNn2pRf/vKX3HHHHdTW1m4oW7t2Ld26Vf6mmT59OsOGDaNv39Y+hsnM8tapW6ann346zz77LIcffjhbbrkl48ePZ7/99mP8+PEsW7aMAw44gBEjRjBixAjuvTe7EXvDFuekSZOYPn06AHPnzmXXXXdlxIgR3HTTTRummTx5MhdddNGG98OGDWPZsmUfi+fCCy9kzz335DOf+QznnpvdO3fZsmUMGTKEU089laFDh3LYYYfxzjvvcMMNN7Bo0SLGjRvH8OHDeeedd0qwhcwqU7/+OyKp3a9+/Ru7g2PbVH7zq4R+9atfMXfuXH7/+98zZcoUbr31Vu655x569OjB22+/zfz586mpqWHJkiUcd9xxLFq0qMm63n33XU499VTuuusudtppJ4455phWxTJv3jyWLFnCgw8+SERwxBFHsGDBAgYMGMCSJUuYOXMmV1xxBWPHjuXGG2/k+OOPZ8qUKVx00UWMHDmyvZvCrKo8X/c3JvzmwXbXM+3kvXKIJtOpk2lDRxxxBD169ACy61InTZrEI488QteuXfnLX/7S7LxPP/00gwYNYvDgwQAcf/zxTJ06tehlz5s3j3nz5rH77rsDsGbNGpYsWcKAAQMYNGgQw4cPB2CPPfZotFVrZuXlZFpg88033zB8ySWX0KdPHx599FHWr19PTU0NAN26dWP9+g8fDFnM5UfFzBMRnHPOOZx22mkfKV+2bBmbbrrphvddu3b1Ib1ZBerUfabNeeONN9hhhx3o0qUL11xzDevWrQNgxx135KmnnuK9997j9ddf58477wRg1113ZdmyZfz1r38FYObMmRvqGjhwIA8//DAADz/8MM8999zHljdq1CimTZvGmjVrAFi5ciWrVq1qNsZevXrx1ltvtX9lzazd3DJtwhlnnMHRRx/N1VdfzejRoze0Wvv378/YsWMZNmwYgwYN2nBYXlNTw9SpU/nCF77AZpttxgEHHLAh0dXXM3ToUPbee2923nnnjy3vsMMOY/Hixey7775AdsnUjBkz6Nq1a5MxnnTSSZx++un06NGD++67b0MXhZl1vI3yGVAjR46MhieLFi9ezJAhQ8oUUXl0xnW2zkFSbiegWpkDO9fNoc3MOpqTqZlZDpxMzcxy4GRqZpYDJ1Mzsxw4mZqZ5cDJtALNnTuXXXbZhZ122okLLrig3OGYWRGcTJuR151pWnOHmnXr1nHmmWfyu9/9jqeeeoqZM2fy1FNPdcDamll7+BdQzcjrzjT1irlDzYMPPshOO+3EJz/5SQCOPfZYbrnlFnbbbbfc4jCz/LllWmFWrlxJ//79N7yvra1l5cqVZYzIzIrhZGpmlgMn0wrTr18/VqxYseF9XV0d/fr1K2NEZlYMJ9MKs+eee7JkyRKee+453n//fa6//nqOOOKIcodlZi3wCagK061bN6ZMmcKoUaNYt24dEyZMYOjQoeUOy8xaULJkKqk/cDXQBwhgakRcKmkycCrwcpr0BxExJ81zDnAKsA74VkTcnspHA5cCXYFfR0SHXHzZt3ZArs+I6Vs7oKjpxowZw5gxY3JbrpmVXilbpmuB70TEw5J6AQ9Jmp/GXRIRFxVOLGk34FhgKNAXuENS/V2UfwEcCtQBCyXNjoiSX3y5csXyUi/CzDYSJUumEfEC8EIafkvSYqC5MylHAtdHxHvAc5KWAvXNwqUR8SyApOvTtL6S3cwqRoecgJI0ENgdeCAVTZL0mKRpkrZOZf2AFQWz1aWypsrNzCpGyZOppJ7AjcBZEfEmcDnwKWA4Wcv1P3NazkRJiyQtevnll1uewcwsRyVNppK6kyXSayPiJoCIeCki1kXEeuAKPjyUXwn0L5i9NpU1Vf4RETE1IkZGxMjevXvnvzJmZs0oWTKVJOBKYHFEXFxQvkPBZF8CnkjDs4FjJW0qaRAwGHgQWAgMljRI0iZkJ6lmlypuM7O2KOXZ/P2A8cDjkh5JZT8AjpM0nOxyqWXAaQAR8aSkWWQnltYCZ0bEOgBJk4DbyS6NmhYRT5Yw7rKbMGECt912G9tvvz1PPPFEyzOYWdmV8mz+PTT+WNQ5zcxzPnB+I+VzmpuvVAb278fyuudzq2/H2r4sW9HyTUtOOukkJk2axAknnJDbss2stPwLqGYsr3ueuHZsbvVp3KyipjvwwANZtmxZbss1s9Lzb/PNzHLgZGpmlgMnUzOzHDiZmpnlwMm0Ah133HHsu+++PPPMM9TW1nLllVeWOyQza4HP5jdjx9q+RZ+BL7a+YsycOTO3ZZpZx3AybUYx14SamYEP883McuFkamaWg06VTCOi3CF0mM60rmaVoNMk05qaGlavXt0pkkxEsHr1ampqasodilmn0WlOQNXW1lJXV0dnuXF0TU0NtbW15Q7DrNPoNMm0e/fuDBo0qNxhmNlGqtMc5puZlZKTqZlZDpxMzcxy4GRqZpYDJ1Mzsxw4mZqZ5cDJ1MwsB06mZmY5cDI1M8uBk6mZWQ6cTM3McuBkamaWAydTM7MclCyZSuov6feSnpL0pKT/k8q3kTRf0pL0d+tULkmXSVoq6TFJIwrqOjFNv0TSiaWK2cysrUrZMl0LfCcidgP2Ac6UtBvwfeDOiBgM3JneAxwODE6vicDlkCVf4Fxgb2Av4Nz6BGxmVilKlkwj4oWIeDgNvwUsBvoBRwJXpcmuAo5Kw0cCV0fmfmArSTsAo4D5EfFqRLwGzAdGlypuM7O26JA+U0kDgd2BB4A+EfFCGvUi0CcN9wNWFMxWl8qaKjczqxglT6aSegI3AmdFxJuF4yJ7IFMuD2WSNFHSIkmLOsujScyscpQ0mUrqTpZIr42Im1LxS+nwnfR3VSpfCfQvmL02lTVV/hERMTUiRkbEyN69e+e7ImZmLSjl2XwBVwKLI+LiglGzgfoz8icCtxSUn5DO6u8DvJG6A24HDpO0dTrxdFgqMzOrGKV8oN5+wHjgcUmPpLIfABcAsySdAiwHxqZxc4AxwFLgbeBkgIh4VdJPgIVpuh9HxKsljNvMrNVKlkwj4h5ATYw+uJHpAzizibqmAdPyi87MLF/+BZSZWQ6cTM3McuBkamaWAydTM7McOJmameXAydTMLAdOpmZmOXAyNTPLgZOpmVkOnEzNzHLgZGpmlgMnUzOzHDiZmpnlwMnUzCwHTqZmZjlwMjUzy4GTqZlZDpxMzcxy4GRqZpaDopKppP2KKTMz66yKbZn+V5FlZmadUrNPJ5W0L/A5oLekfy4YtQXQtZSBmZlVk5Ye9bwJ0DNN16ug/E3gK6UKysys2jSbTCPiD8AfJE2PiOUdFJOZWdVpqWVab1NJU4GBhfNExOdLEZSZWbUpNpn+N/Ar4NfAutKFUz79+u/I83V/a3c9fWsHsHKFG/FmnU2xyXRtRFxe0kjK7Pm6vzHhNw+2u55pJ++VQzRmVm2KvTTqVklnSNpB0jb1r5JGZmZWRYpNpicC3wXuBR5Kr0XNzSBpmqRVkp4oKJssaaWkR9JrTMG4cyQtlfSMpFEF5aNT2VJJ32/NypmZdZSiDvMjYlAb6p4OTAGublB+SURcVFggaTfgWGAo0Be4Q9LOafQvgEOBOmChpNkR8VQb4jEzK5mikqmkExorj4iGibJw3AJJA4uM40jg+oh4D3hO0lKgvvNxaUQ8m+K4Pk3rZGpmFaXYE1B7FgzXAAcDD/PxVmcxJqXkvAj4TkS8BvQD7i+Ypi6VAaxoUL53G5ZpZlZSxR7mf7PwvaStgOvbsLzLgZ8Akf7+JzChDfV8jKSJwESAAQMG5FGlmVnR2noLvr8Dre5HjYiXImJdRKwHruDDQ/mVQP+CSWtTWVPljdU9NSJGRsTI3r17tzY0M7N2KbbP9Fay1iRkNzgZAsxq7cIk7RARL6S3XwLqz/TPBq6TdDHZCajBwIOAgMGSBpEl0WOBr7V2uWZmpVZsn2nh2fe1wPKIqGtuBkkzgYOA7STVAecCB0kaTpaYlwGnAUTEk5JmkZ1YWgucGRHrUj2TgNvJkvi0iHiyyJjNzDpMsX2mf5DUhw9PRC0pYp7jGim+spnpzwfOb6R8DjCnmDjNzMql2DvtjyU77P4qMBZ4QJJvwWdmlhR7mP+vwJ4RsQpAUm/gDuCGUgVmZlZNij2b36U+kSarWzGvmdlGr9iW6VxJtwMz0/tjcD+mmdkGLT0DaiegT0R8V9KXgf3TqPuAa0sdnJlZtWipZfpz4ByAiLgJuAlA0qfTuH8qaXRmZlWipX7PPhHxeMPCVDawJBGZmVWhlpLpVs2M65FnIGZm1aylZLpI0qkNCyV9newG0WZmRst9pmcBN0sax4fJcySwCdlv683MjBaSaUS8BHxO0j8Cw1Lx/0bEXSWPzMysihT72/zfA78vcSxmZlXLv2IyM8uBk6mZWQ6cTM3McuBkamaWAydTM7McOJmameXAydTMLAdOpmZmOXAyNTPLgZOpmVkOnEzNzHLgZGpmlgMnUzOzHDiZmpnlwMnUzCwHJUumkqZJWiXpiYKybSTNl7Qk/d06lUvSZZKWSnpM0oiCeU5M0y+RdGKp4jUza49StkynA6MblH0fuDMiBgN3pvcAhwOD02sicDlkyRc4F9gb2As4tz4Bm5lVkpIl04hYALzaoPhI4Ko0fBVwVEH51ZG5H9hK0g7AKGB+RLwaEa8B8/l4gjYzK7uO7jPtExEvpOEXgT5puB+womC6ulTWVLmZWUUp2wmoiAgg8qpP0kRJiyQtevnll/Oq1sysKB2dTF9Kh++kv6tS+Uqgf8F0tamsqfKPiYipETEyIkb27t0798DNzJrT0cl0NlB/Rv5E4JaC8hPSWf19gDdSd8DtwGGStk4nng5LZWZmFaWoRz23haSZwEHAdpLqyM7KXwDMknQKsBwYmyafA4wBlgJvAycDRMSrkn4CLEzT/TgiGp7UMjMru5Il04g4rolRBzcybQBnNlHPNGBajqGZmeXOv4AyM8uBk6mZWQ6cTM3McuBkamaWAydTM7McOJmameXAydTMLAdOpmZmOXAyNTPLgZOpmVkOnEzNzHLgZGpmlgMnUzOzHDiZmpnlwMnUzCwHTqZmZjlwMjUzy4GTqZlZDpxMzcxy4GRqZpYDJ1Mzsxw4mZqZ5cDJ1MwsB06mZmY5cDI1M8uBk6mZWQ6cTM3MclCWZCppmaTHJT0iaVEq20bSfElL0t+tU7kkXSZpqaTHJI0oR8xmZs0pZ8v0HyNieESMTO+/D9wZEYOBO9N7gMOBwek1Ebi8wyM1M2tBJR3mHwlclYavAo4qKL86MvcDW0naoRwBmpk1pVzJNIB5kh6SNDGV9YmIF9Lwi0CfNNwPWFEwb10qMzOrGN3KtNz9I2KlpO2B+ZKeLhwZESEpWlNhSsoTAQYMGJBfpGZmRShLyzQiVqa/q4Cbgb2Al+oP39PfVWnylUD/gtlrU1nDOqdGxMiIGNm7d+9Shm9m9jEdnkwlbS6pV/0wcBjwBDAbODFNdiJwSxqeDZyQzurvA7xR0B1gZlYRynGY3we4WVL98q+LiLmSFgKzJJ0CLAfGpunnAGOApcDbwMkdH7KZWfM6PJlGxLPAZxspXw0c3Eh5AGd2QGhmZm1WSZdGmZlVLSdTM7McOJmameXAydTMLAdOpmZmOXAyNTPLgZOpmVkOnEzNzHLgZGpmlgMnUzOzHDiZmpnlwMnUzCwHTqZmZjlwMjUzy4GTqZlZDpxMzcxy4GRqZpYDJ1Mzsxw4mZqZ5cDJ1MwsB06mZmY5cDI1M8uBk6mZWQ6cTM3MctCt3AGYmbVW1+6bMO3kvXKpJy9OpmZWddZ98D5x7dh216Nxs3KIJuPDfDOzHDiZmpnloGoO8yWNBi4FugK/jogL8qy/EvtgzKx6VEUyldQV+AVwKFAHLJQ0OyKeymsZldgHY2bVo1oO8/cClkbEsxHxPnA9cGSZYzIz26Bakmk/YEXB+7pUZmZWEariML8YkiYCE9PbNZKeaWUV22ncrFdyiiWPatpjOyCXdakAG8u6bCzrARWyLjl1qW0nqTXrMjciRjc2olqS6Uqgf8H72lS2QURMBaa2dQGSFkXEyLbOX0m8LpVnY1kP8Lo0pVoO8xcCgyUNkrQJcCwwu8wxmZltUBUt04hYK2kScDvZpVHTIuLJModlZrZBVSRTgIiYA8wp4SLa3EVQgbwulWdjWQ/wujRKEZFXXWZmnVa19JmamVU0J1OzDqAKuF7OSqtq+kxLSdJw4D2AiFhc5nAskXQIsBb4Y0SsK3c87bQl8Hq5g2gvSZ8D+gJvRMT8csdTSTp9y1TS4cCtwBnAf0s6ucwhtYukYZJ2kTSk3LG0h6TuwP8Fzgf2klS1X/ySRgG/lrR9uWNpD0mHAdOBocANkg4sb0T5kdTuXFi1H9D2SoddmwPfBM6MiNmS9gFmSNo0In5V3ghbT9IY4GfAfcCnJf17RMwtc1httRa4H/gM8K/ARcDdkhRVdNZU0j8A/w84LSJWlTuetpLUG/gxcFZEzJH0d6CLpMERsaTM4bWapC+Q3fNjE+CiiFjd3jo7bcs0MmuARcAWkrpHxP1kPwj4nqSTyhpgK0kaCVwMfB04DbgcOFyZqtvPKWHOASYDNwLflvQt4Kx0F7FqsQvws4i4XdInJH2uSlt0r5P9eOZ9ScOAHwCnAH+QdEZZI2slSXsDU4BngK2B2Wm/dG9PvVX3T1YCLwIHAz0AImIRMB6YJGlQOQNrpe2A8yPigZSIniVr1XWJiPXlDa1dvhkRvyH7+fAlwGZV1n/6PrBH+izNIfuyvkbS2eUNq3Ui4gNgDXAcMAu4NCLGA0cA50nav5zxtdIwYF5EXBcRp5N9Wf8LsAe0/ZC/0ybT+rOrEfFLYDPgcklbphbqPcBjQNUcTqbD+TsKih4B3qlPPJI+UZbA2qDgzPd84DFJ+5J94V0JfD6dBKkWC4F3gHHANRHxLWAMcFrqr6949cklIs4BvkF21PPHVLYImEF1dRkuBHpI2hUgIi4G7gEukbRVWxsfnSqZphMz+6bm/IZ1j4hj0vufAxMknQn8A1m/XcUr+GJ4oaC4G1ArqWvqsrhS0maVeIlO4X6R1DUiIvWNrgX2BP4EnB0RE4GbyG7BWBXSz55fJ2vB7SCpZyq7gXQ0VIka/K8olSndT1jAKZJ2lnQKcAiwvIzhttaLZP/bh0raDiAiLgKeIOsia5NO8wsoSV8Gfkp2uLiSrK90ekS8WTDNBLLLPj4LTK7k3/9L2gXYhmw91kfEOkkbDuklbQr8FniQ7B/5lEpcn5b2i6SewC4R8VD5oixOY/ukYNy/AQOA58gOl78NHBIRfy1HrM0p8n/lOrLLCQcDE/N86kUppC/pwv2xO/ATsvt93B0Rj0v6Ptl++482LaMzJNP07ToDuCwi/iTpaGAfsv6s/4iINxpMv2lEvFeGUIvS3Ie9QUK9j+z6xqMr8frZFvbLhRHxeoPpK7b/t8gE9HngU8BuwNQq3Ccf+V9Jh/+bR8Rb5Ym2ZZJ2joi/pOGuqdGhdPSzO1lLdCuyLr29gKMi4vG2LKszHeZvQfYtCnAzcBvQnaxDHUl7SRqRxr/f8eEVJ33YjyFraR4M3EJ2r9fvSdqyQbK5FfhyJf7TFmhqvxwL2VUKyn5UQQUn0mb3Sf10EXFXRFwBfLdK90n9/8rekoZHxPoKT6RfBB5JrWhSIq3vRuoSEX8Gfgj8G9n/yiFtTaTQSZJpOhN5MfBlSQekf8p7yE7SHCipB7Af8HyavtKb68V82HeOiJ9GxNNlirFFRe6XA8j6uCpdS/tkz4Iv64q9GqHIffI5KnyfSNocmAScRXY51wzYkFC7FXwxr42IJenM/nPtWWanSKbJH4F5wHhJB0bEuoi4jqyPtG9EXBIRFf0BgVZ92Cu2xdBA1e+XIvfJ/lTPl/XGsE/+DkwArgPOBmoKEupaAEmfBY6XVJPHidlqupyhXSLiXUnXkvWNnJMui3gP6E12QqCa/JHsYvDxqf9nAXCdsudg9Y2IS8obXvE2ov3ifa5VQGgAAAPZSURBVFJhIuL5NLhG0mnAVEkzIuJ4SZ8BdgJmRcS7eSyv0yRTgIh4TdIVwFNkHc/vAsdHxEvljax1NpYPe72NYb94n1S2iFidEuqFyh622QU4MHL8iW+nOJvfGGU/SYxKPalRDGXPw9qPDz/sl6ZO9apV7fvF+6SySfo28D3g0PacbGq07s6aTDcmG9OHfWPhfVJ5JG1N9lPY70TEY7nX72RqZp2FpJq8+kg/VreTqZlZ+3WmS6PMzErGydTMLAdOpmZmOXAyNTPLgZOplYWkgZKeKHccrZXi/lrB+5GSLitnTFYZnEzNWmcgsCGZRsSiyO6eb52ck6mVU1dJV0h6UtI8ST0knSppoaRHJd0oaTMASV+V9EQqX9BUhamO6yUtlnSzpAeUPWwQSWsKpvuKpOlpuHda1sL02i+V/4OkR9Lrz5J6ARcAB6Syb0s6SNJtafptJP2PpMck3Z9+/42kyZKmSbpb0rPKHgyIpM0l/W9apyckHVOSrWwdIyL88qvDX2QtvLXA8PR+FnA8sG3BNOeRPVAP4HGgXxreqpl6/xmYloY/k5YxMr1fUzDdV8hu3gzZnYX2T8MDgMVp+FZgvzTck+xeFgcBtxXUs+E98F/AuWn488AjaXgycC+wKdmDD1eT3Z7vaOCKgrq2LPd+8avtL7dMrZyei4hH0vBDZAl2mKQ/Snqc7CF0Q9P4PwHTJZ0KNPeo5wPJ7hRPZD8ZLOZng4cAUyQ9Aswme/R3z7TMi1NLcqtIt25rxv7ANWnZdwHbStoijfvfiHgvIl4BVgF9yL4gDpX0s3TrvjcardWqgpOplVPho2HWkbX8pgOTIuLTwL8DNQCRPZL3h2R3sH9I0rZtWF7hz/1qCoa7APtExPD06hcRayLiAuDrZA+++1O6E1RbfWxdI3ucxgiypHqepB+1o34rMydTqzS9gBeUPQpkXH2hpE9FxAMR8SPgZbKk2pgFpBNEkoaRHerXe0nSEGXPLvpSQfk84JsFyxpesMzHI+JnZI8H3pXsptu9mlj2H+tjlnQQ8EoUPAOqIUl9gbcjYgZwIVlitSrVqe5nalXh34AHyBLmA3yYuC6UNJjsMcN3Ao82Mf/lwG8kLQYWk3Uf1Ps+2eNEXiZ74F3PVP4t4BeSHiP7n1gAnA6cJekfgfXAk8Dv0vA6SY+StaILb683GZiW6nkbOLGFdf10Wq/1wAdkz6S3KuUbndhGTdLdwNkRsajcsdjGzYf5ZmY5cMvUqpKkUcDPGhQ/FxFfamx6s1JzMjUzy4EP883McuBkamaWAydTM7McOJmameXAydTMLAf/Hxa4e4Ytwa8cAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 360x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Plot the educational condition by target to see the different\n","plt.figure(figsize=[9,15])\n","plot=[\"employment_type\", \"required_experience\", \"required_education\",'has_company_logo','has_questions']\n","n=1\n","for f in plot:\n","    plt.subplot(5,1,n)\n","    sns.histplot(x=f, hue='fraudulent', edgecolor=\"black\", multiple=\"stack\", alpha=0.7, data=job)\n","    sns.despine()\n","    plt.title(\"Histplot of {}  by target\".format(f))\n","    n=n+1\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"_O6w_a5S0W6m","executionInfo":{"status":"ok","timestamp":1643912952956,"user_tz":300,"elapsed":3570,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"1a4f3a93-03d4-46c1-e961-8231f65b2c9f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 648x1080 with 5 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"_5zdADbC0W42"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"09ztVWjb0W27"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"hihtdnyZ0W1B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"f9qmb_oh0Wy0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##TF vectorizer"],"metadata":{"id":"Zbgt5LRsiP_G"}},{"cell_type":"code","source":["text_info = job.title + job.location + job['company_profile'] + job.description + job.requirements + job. benefits + job['required_experience'] + job['required_education'] + job.industry + job.function"],"metadata":{"id":"RJ8Fc0O-iPt8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Check the size of the text\n","text_info.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-afVoelnjXf3","executionInfo":{"status":"ok","timestamp":1643908012103,"user_tz":300,"elapsed":179,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"a92358fb-5b8b-4767-9dac-edf2bc30f31a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4441,)"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["#Utilize tfid vectorizer to tokenlize our text\n","tf = TfidfVectorizer()\n","tf.fit(text_info)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i5kw-9swjb5d","executionInfo":{"status":"ok","timestamp":1643908226946,"user_tz":300,"elapsed":2222,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"6ca24916-db7d-45c4-8b32-c0df97f52d54"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TfidfVectorizer()"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["#Check the vocabulary\n","tf.vocabulary_"],"metadata":{"id":"LcpCorblkN3a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Check the len of vocabulary\n","len(tf.vocabulary_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ky9F7bXQkQMX","executionInfo":{"status":"ok","timestamp":1643908237189,"user_tz":300,"elapsed":164,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"363bbeec-5adf-47ec-cc2c-4f993e82fa4d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["48229"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["dtm = tf.transform(text_info)"],"metadata":{"id":"jLQhRFfakShV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dtm.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q4sDRyn3kXgF","executionInfo":{"status":"ok","timestamp":1643908267073,"user_tz":300,"elapsed":187,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"9ffad297-939b-4089-c6bd-c4a51f49355b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4441, 48229)"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["feature_names = tf.get_feature_names()"],"metadata":{"id":"4rwunGGTkZr6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["feature_names"],"metadata":{"id":"LDJjqIwrkbPq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["first_doc_vector = dtm[0]"],"metadata":{"id":"RHHsg7CukgEj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["first_doc_vector"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zQCCcC3pkhX2","executionInfo":{"status":"ok","timestamp":1643908307257,"user_tz":300,"elapsed":116,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"21844499-c340-4174-ca24-45660c6f8d03"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<1x48229 sparse matrix of type '<class 'numpy.float64'>'\n","\twith 373 stored elements in Compressed Sparse Row format>"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["dt = pd.DataFrame(first_doc_vector.T.todense(), index=feature_names, columns=[\"tfidf\"]) "],"metadata":{"id":"sYd6PBHlki85"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"H0wn7VDvkkVK","executionInfo":{"status":"ok","timestamp":1643908319761,"user_tz":300,"elapsed":229,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"8ecb2fdf-d0c8-43a1-c812-bcd83605fe36"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-93c15f6e-d156-4bc5-b948-a1797cef8c88\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tfidf</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>00</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>000</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>0001pt</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>000a</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>000aed</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>хотят</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>цель</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>шаг</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>你值得擁有的價格are</th>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>ﬁnd</th>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>48229 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93c15f6e-d156-4bc5-b948-a1797cef8c88')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-93c15f6e-d156-4bc5-b948-a1797cef8c88 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-93c15f6e-d156-4bc5-b948-a1797cef8c88');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["             tfidf\n","00             0.0\n","000            0.0\n","0001pt         0.0\n","000a           0.0\n","000aed         0.0\n","...            ...\n","хотят          0.0\n","цель           0.0\n","шаг            0.0\n","你值得擁有的價格are    0.0\n","ﬁnd            0.0\n","\n","[48229 rows x 1 columns]"]},"metadata":{},"execution_count":53}]},{"cell_type":"markdown","source":["##Spacy"],"metadata":{"id":"L1OZ_GzwkrTP"}},{"cell_type":"code","source":["model = \"en_core_web_lg\" #md\n","cli.download(model)\n","nlp = spacy.load(model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"shfPueNSksmX","executionInfo":{"status":"ok","timestamp":1643908395464,"user_tz":300,"elapsed":39970,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"ccb9194f-82d5-4976-8840-56f04b379350"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('en_core_web_lg')\n"]}]},{"cell_type":"code","source":["nlp.pipe_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SS-LGeEwk6F5","executionInfo":{"status":"ok","timestamp":1643908408615,"user_tz":300,"elapsed":160,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"1e375764-cdd3-48ac-b12c-aaaa3730be72"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['tok2vec', 'tagger', 'parser', 'attribute_ruler', 'lemmatizer', 'ner']"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["#process the text\n","EXCL = ['tagger', 'parser', 'attribute_ruler', 'lemmatizer', 'ner']\n","docs = list(nlp.pipe(text_info, disable=EXCL))"],"metadata":{"id":"oejsC_4Hk7hT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Get the vectors\n","dv = [doc.vector for doc in docs]\n","dv = np.array(dv)\n","dv.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nh79J8Apk9dR","executionInfo":{"status":"ok","timestamp":1643908585409,"user_tz":300,"elapsed":8137,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"ce96b395-3206-4484-981c-af6731efecfd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4441, 300)"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["goal = pd.DataFrame(dv, index=job.index, columns=range(0,300))"],"metadata":{"id":"qpW0JbN3lAkf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["goal.head()"],"metadata":{"id":"ASO3RMp2lmpv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["job.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":562},"id":"XAPqGqYhluVJ","executionInfo":{"status":"ok","timestamp":1643908625070,"user_tz":300,"elapsed":8,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"96dec785-9eba-438f-c534-084d4344acba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-542a1e5d-b5f1-43d4-9f4e-7668561b94ac\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>location</th>\n","      <th>company_profile</th>\n","      <th>description</th>\n","      <th>requirements</th>\n","      <th>benefits</th>\n","      <th>telecommuting</th>\n","      <th>has_company_logo</th>\n","      <th>has_questions</th>\n","      <th>employment_type</th>\n","      <th>required_experience</th>\n","      <th>required_education</th>\n","      <th>industry</th>\n","      <th>function</th>\n","      <th>fraudulent</th>\n","    </tr>\n","    <tr>\n","      <th>job_id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>Account Executive - Washington DC</td>\n","      <td>US, DC, Washington</td>\n","      <td>Our passion for improving quality of life thro...</td>\n","      <td>THE COMPANY: ESRI – Environmental Systems Rese...</td>\n","      <td>EDUCATION: Bachelor’s or Master’s in GIS, busi...</td>\n","      <td>Our culture is anything but corporate—we have ...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Full-time</td>\n","      <td>Mid-Senior level</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Computer Software</td>\n","      <td>Sales</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Bill Review Manager</td>\n","      <td>US, FL, Fort Worth</td>\n","      <td>SpotSource Solutions LLC is a Global Human Cap...</td>\n","      <td>JOB TITLE: Itemization Review ManagerLOCATION:...</td>\n","      <td>QUALIFICATIONS:RN license in the State of Texa...</td>\n","      <td>Full Benefits Offered</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Full-time</td>\n","      <td>Mid-Senior level</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Hospital &amp; Health Care</td>\n","      <td>Health Care Provider</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Head of Content (m/f)</td>\n","      <td>DE, BE, Berlin</td>\n","      <td>Founded in 2009, the Fonpit AG rose with its i...</td>\n","      <td>Your Responsibilities: Manage the English-spea...</td>\n","      <td>Your Know-How:                                ...</td>\n","      <td>Your Benefits: Being part of a fast-growing co...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Full-time</td>\n","      <td>Mid-Senior level</td>\n","      <td>Master's Degree</td>\n","      <td>Online Media</td>\n","      <td>Management</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>Account Executive - Sydney</td>\n","      <td>AU, NSW, Sydney</td>\n","      <td>Adthena is the UK’s leading competitive intell...</td>\n","      <td>Are you interested in a satisfying and financi...</td>\n","      <td>You’ll need to be smart and passionate and hav...</td>\n","      <td>In return we'll pay you well, give you some ow...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>Full-time</td>\n","      <td>Associate</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Internet</td>\n","      <td>Sales</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>VP of Sales - Vault Dragon</td>\n","      <td>SG, 01, Singapore</td>\n","      <td>Jungle Ventures is the leading Singapore based...</td>\n","      <td>About Vault Dragon Vault Dragon is Dropbox for...</td>\n","      <td>Key Superpowers3-5 years of high-pressure sale...</td>\n","      <td>Basic: SGD 120,000Equity negotiable for a rock...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Full-time</td>\n","      <td>Executive</td>\n","      <td>Bachelor's Degree</td>\n","      <td>Facilities Services</td>\n","      <td>Sales</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-542a1e5d-b5f1-43d4-9f4e-7668561b94ac')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-542a1e5d-b5f1-43d4-9f4e-7668561b94ac button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-542a1e5d-b5f1-43d4-9f4e-7668561b94ac');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                                    title  ... fraudulent\n","job_id                                     ...           \n","4       Account Executive - Washington DC  ...          0\n","5                     Bill Review Manager  ...          0\n","7                   Head of Content (m/f)  ...          0\n","15             Account Executive - Sydney  ...          0\n","16             VP of Sales - Vault Dragon  ...          0\n","\n","[5 rows x 15 columns]"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["numeric = ['telecommuting', 'has_company_logo','has_questions']"],"metadata":{"id":"fdHs-nNNlw5e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["goal[numeric] = job[numeric]"],"metadata":{"id":"McfUZVU_mBhi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["goal.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":331},"id":"uVvQFA5bmF-N","executionInfo":{"status":"ok","timestamp":1643908720010,"user_tz":300,"elapsed":389,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"58f97db1-c771-40cf-cd56-a668dcf83dee"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-8eb3324c-8227-447b-b301-a033422d74d5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>19</th>\n","      <th>20</th>\n","      <th>21</th>\n","      <th>22</th>\n","      <th>23</th>\n","      <th>24</th>\n","      <th>25</th>\n","      <th>26</th>\n","      <th>27</th>\n","      <th>28</th>\n","      <th>29</th>\n","      <th>30</th>\n","      <th>31</th>\n","      <th>32</th>\n","      <th>33</th>\n","      <th>34</th>\n","      <th>35</th>\n","      <th>36</th>\n","      <th>37</th>\n","      <th>38</th>\n","      <th>39</th>\n","      <th>...</th>\n","      <th>263</th>\n","      <th>264</th>\n","      <th>265</th>\n","      <th>266</th>\n","      <th>267</th>\n","      <th>268</th>\n","      <th>269</th>\n","      <th>270</th>\n","      <th>271</th>\n","      <th>272</th>\n","      <th>273</th>\n","      <th>274</th>\n","      <th>275</th>\n","      <th>276</th>\n","      <th>277</th>\n","      <th>278</th>\n","      <th>279</th>\n","      <th>280</th>\n","      <th>281</th>\n","      <th>282</th>\n","      <th>283</th>\n","      <th>284</th>\n","      <th>285</th>\n","      <th>286</th>\n","      <th>287</th>\n","      <th>288</th>\n","      <th>289</th>\n","      <th>290</th>\n","      <th>291</th>\n","      <th>292</th>\n","      <th>293</th>\n","      <th>294</th>\n","      <th>295</th>\n","      <th>296</th>\n","      <th>297</th>\n","      <th>298</th>\n","      <th>299</th>\n","      <th>telecommuting</th>\n","      <th>has_company_logo</th>\n","      <th>has_questions</th>\n","    </tr>\n","    <tr>\n","      <th>job_id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.074170</td>\n","      <td>0.165025</td>\n","      <td>-0.065346</td>\n","      <td>-0.039646</td>\n","      <td>0.089815</td>\n","      <td>0.013197</td>\n","      <td>0.007432</td>\n","      <td>0.004670</td>\n","      <td>0.012471</td>\n","      <td>2.023824</td>\n","      <td>-0.238985</td>\n","      <td>0.028326</td>\n","      <td>0.002697</td>\n","      <td>-0.017480</td>\n","      <td>-0.043137</td>\n","      <td>-0.038027</td>\n","      <td>-0.051446</td>\n","      <td>1.195197</td>\n","      <td>-0.202656</td>\n","      <td>0.000267</td>\n","      <td>0.015082</td>\n","      <td>0.024222</td>\n","      <td>-0.090910</td>\n","      <td>-0.088316</td>\n","      <td>0.061901</td>\n","      <td>0.063443</td>\n","      <td>0.030616</td>\n","      <td>0.059950</td>\n","      <td>0.013901</td>\n","      <td>-0.036301</td>\n","      <td>0.001918</td>\n","      <td>0.001109</td>\n","      <td>-0.002499</td>\n","      <td>0.040921</td>\n","      <td>0.066326</td>\n","      <td>-0.111725</td>\n","      <td>0.049013</td>\n","      <td>0.002621</td>\n","      <td>-0.027777</td>\n","      <td>-0.069215</td>\n","      <td>...</td>\n","      <td>0.103910</td>\n","      <td>0.043302</td>\n","      <td>-0.189422</td>\n","      <td>-0.065079</td>\n","      <td>-0.018523</td>\n","      <td>0.427765</td>\n","      <td>-0.021746</td>\n","      <td>-0.075367</td>\n","      <td>-0.031028</td>\n","      <td>-0.022145</td>\n","      <td>-0.102062</td>\n","      <td>-0.104845</td>\n","      <td>-0.037443</td>\n","      <td>0.053366</td>\n","      <td>0.080994</td>\n","      <td>0.042980</td>\n","      <td>0.102085</td>\n","      <td>0.086325</td>\n","      <td>0.048150</td>\n","      <td>0.030411</td>\n","      <td>0.024277</td>\n","      <td>-0.038438</td>\n","      <td>-0.135802</td>\n","      <td>0.138332</td>\n","      <td>-0.101140</td>\n","      <td>0.095916</td>\n","      <td>-0.085677</td>\n","      <td>-0.236432</td>\n","      <td>0.062649</td>\n","      <td>0.031496</td>\n","      <td>0.008179</td>\n","      <td>-0.057313</td>\n","      <td>-0.052130</td>\n","      <td>-0.003300</td>\n","      <td>-0.055074</td>\n","      <td>0.002310</td>\n","      <td>0.085398</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>-0.085336</td>\n","      <td>0.163455</td>\n","      <td>-0.044860</td>\n","      <td>-0.047602</td>\n","      <td>0.053126</td>\n","      <td>0.012566</td>\n","      <td>0.038308</td>\n","      <td>-0.062512</td>\n","      <td>0.049174</td>\n","      <td>1.928253</td>\n","      <td>-0.263093</td>\n","      <td>0.011726</td>\n","      <td>0.047264</td>\n","      <td>-0.009443</td>\n","      <td>-0.045993</td>\n","      <td>-0.046660</td>\n","      <td>0.014060</td>\n","      <td>1.216041</td>\n","      <td>-0.191105</td>\n","      <td>0.005540</td>\n","      <td>0.030120</td>\n","      <td>0.042696</td>\n","      <td>-0.114017</td>\n","      <td>-0.118537</td>\n","      <td>0.072917</td>\n","      <td>0.079910</td>\n","      <td>-0.027263</td>\n","      <td>0.031647</td>\n","      <td>0.078666</td>\n","      <td>-0.044321</td>\n","      <td>-0.014635</td>\n","      <td>-0.028644</td>\n","      <td>0.024455</td>\n","      <td>0.043648</td>\n","      <td>0.049461</td>\n","      <td>-0.046764</td>\n","      <td>0.018432</td>\n","      <td>0.024086</td>\n","      <td>-0.022037</td>\n","      <td>-0.036409</td>\n","      <td>...</td>\n","      <td>0.077904</td>\n","      <td>-0.005445</td>\n","      <td>-0.177648</td>\n","      <td>-0.048050</td>\n","      <td>-0.038854</td>\n","      <td>0.423318</td>\n","      <td>-0.041598</td>\n","      <td>-0.046418</td>\n","      <td>-0.024038</td>\n","      <td>-0.015796</td>\n","      <td>-0.090301</td>\n","      <td>-0.080371</td>\n","      <td>0.018706</td>\n","      <td>0.068227</td>\n","      <td>0.107882</td>\n","      <td>0.050315</td>\n","      <td>0.125921</td>\n","      <td>0.084703</td>\n","      <td>0.034182</td>\n","      <td>0.077624</td>\n","      <td>0.022582</td>\n","      <td>-0.028505</td>\n","      <td>-0.135282</td>\n","      <td>0.067328</td>\n","      <td>-0.060390</td>\n","      <td>0.136159</td>\n","      <td>-0.068546</td>\n","      <td>-0.167054</td>\n","      <td>0.014665</td>\n","      <td>0.037319</td>\n","      <td>0.022789</td>\n","      <td>-0.052726</td>\n","      <td>-0.036593</td>\n","      <td>-0.003889</td>\n","      <td>-0.043930</td>\n","      <td>-0.006937</td>\n","      <td>0.023831</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>-0.031751</td>\n","      <td>0.184626</td>\n","      <td>-0.063825</td>\n","      <td>-0.000345</td>\n","      <td>0.113116</td>\n","      <td>0.010853</td>\n","      <td>0.035106</td>\n","      <td>-0.043667</td>\n","      <td>0.037940</td>\n","      <td>1.902359</td>\n","      <td>-0.244781</td>\n","      <td>-0.012371</td>\n","      <td>0.021981</td>\n","      <td>-0.046794</td>\n","      <td>-0.039027</td>\n","      <td>-0.037707</td>\n","      <td>-0.067926</td>\n","      <td>1.135793</td>\n","      <td>-0.156313</td>\n","      <td>-0.014791</td>\n","      <td>-0.027095</td>\n","      <td>0.031544</td>\n","      <td>-0.075226</td>\n","      <td>-0.094284</td>\n","      <td>0.076632</td>\n","      <td>0.047967</td>\n","      <td>-0.025520</td>\n","      <td>0.042511</td>\n","      <td>0.048556</td>\n","      <td>-0.015992</td>\n","      <td>0.006162</td>\n","      <td>0.031122</td>\n","      <td>-0.037905</td>\n","      <td>0.063981</td>\n","      <td>0.091608</td>\n","      <td>-0.099194</td>\n","      <td>-0.002704</td>\n","      <td>0.015987</td>\n","      <td>-0.042315</td>\n","      <td>-0.046778</td>\n","      <td>...</td>\n","      <td>0.083671</td>\n","      <td>0.062874</td>\n","      <td>-0.160748</td>\n","      <td>-0.054129</td>\n","      <td>-0.054492</td>\n","      <td>0.376009</td>\n","      <td>-0.010108</td>\n","      <td>-0.101188</td>\n","      <td>-0.027604</td>\n","      <td>-0.033154</td>\n","      <td>-0.131805</td>\n","      <td>-0.090998</td>\n","      <td>-0.064971</td>\n","      <td>0.021758</td>\n","      <td>0.045357</td>\n","      <td>0.041248</td>\n","      <td>0.133343</td>\n","      <td>0.100208</td>\n","      <td>0.043264</td>\n","      <td>0.023066</td>\n","      <td>-0.002719</td>\n","      <td>-0.027052</td>\n","      <td>-0.134840</td>\n","      <td>0.110306</td>\n","      <td>-0.093369</td>\n","      <td>0.106443</td>\n","      <td>-0.097505</td>\n","      <td>-0.239248</td>\n","      <td>0.002536</td>\n","      <td>0.019619</td>\n","      <td>-0.006326</td>\n","      <td>-0.041707</td>\n","      <td>-0.018980</td>\n","      <td>0.001242</td>\n","      <td>-0.082178</td>\n","      <td>-0.011545</td>\n","      <td>0.105240</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>-0.080259</td>\n","      <td>0.187966</td>\n","      <td>-0.098461</td>\n","      <td>-0.085447</td>\n","      <td>0.134600</td>\n","      <td>-0.002374</td>\n","      <td>0.026500</td>\n","      <td>-0.048637</td>\n","      <td>0.055267</td>\n","      <td>2.088626</td>\n","      <td>-0.235742</td>\n","      <td>0.024384</td>\n","      <td>0.028314</td>\n","      <td>-0.002574</td>\n","      <td>-0.042162</td>\n","      <td>-0.039604</td>\n","      <td>-0.051528</td>\n","      <td>1.295958</td>\n","      <td>-0.219546</td>\n","      <td>0.003566</td>\n","      <td>-0.011112</td>\n","      <td>0.010391</td>\n","      <td>-0.091432</td>\n","      <td>-0.094298</td>\n","      <td>0.050906</td>\n","      <td>0.071701</td>\n","      <td>-0.003549</td>\n","      <td>0.060181</td>\n","      <td>0.073410</td>\n","      <td>-0.051002</td>\n","      <td>0.008871</td>\n","      <td>-0.007032</td>\n","      <td>0.004903</td>\n","      <td>0.072795</td>\n","      <td>0.078004</td>\n","      <td>-0.119908</td>\n","      <td>0.049386</td>\n","      <td>0.005885</td>\n","      <td>-0.025192</td>\n","      <td>-0.079358</td>\n","      <td>...</td>\n","      <td>0.085785</td>\n","      <td>0.064417</td>\n","      <td>-0.199434</td>\n","      <td>-0.014532</td>\n","      <td>0.002793</td>\n","      <td>0.483283</td>\n","      <td>0.031221</td>\n","      <td>-0.082567</td>\n","      <td>-0.031613</td>\n","      <td>-0.032252</td>\n","      <td>-0.124783</td>\n","      <td>-0.123861</td>\n","      <td>-0.044167</td>\n","      <td>0.032946</td>\n","      <td>0.047736</td>\n","      <td>0.087655</td>\n","      <td>0.161014</td>\n","      <td>0.070702</td>\n","      <td>0.034681</td>\n","      <td>0.042286</td>\n","      <td>0.054547</td>\n","      <td>-0.030453</td>\n","      <td>-0.149536</td>\n","      <td>0.134136</td>\n","      <td>-0.108187</td>\n","      <td>0.120681</td>\n","      <td>-0.062831</td>\n","      <td>-0.276895</td>\n","      <td>0.052723</td>\n","      <td>-0.003327</td>\n","      <td>-0.000209</td>\n","      <td>-0.044020</td>\n","      <td>-0.052075</td>\n","      <td>-0.005890</td>\n","      <td>-0.089590</td>\n","      <td>-0.000331</td>\n","      <td>0.097587</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>-0.059504</td>\n","      <td>0.191398</td>\n","      <td>-0.099652</td>\n","      <td>-0.078266</td>\n","      <td>0.104973</td>\n","      <td>-0.003298</td>\n","      <td>0.014692</td>\n","      <td>-0.059040</td>\n","      <td>0.031528</td>\n","      <td>2.040665</td>\n","      <td>-0.206510</td>\n","      <td>0.012842</td>\n","      <td>0.039708</td>\n","      <td>-0.047372</td>\n","      <td>-0.058541</td>\n","      <td>-0.045978</td>\n","      <td>-0.044206</td>\n","      <td>1.178727</td>\n","      <td>-0.188997</td>\n","      <td>0.018375</td>\n","      <td>0.019045</td>\n","      <td>0.030992</td>\n","      <td>-0.073698</td>\n","      <td>-0.079815</td>\n","      <td>0.018159</td>\n","      <td>0.044635</td>\n","      <td>-0.038412</td>\n","      <td>-0.006055</td>\n","      <td>0.048423</td>\n","      <td>-0.046294</td>\n","      <td>0.000510</td>\n","      <td>0.035252</td>\n","      <td>-0.029964</td>\n","      <td>0.082707</td>\n","      <td>0.070316</td>\n","      <td>-0.053920</td>\n","      <td>0.023548</td>\n","      <td>0.016571</td>\n","      <td>-0.025103</td>\n","      <td>-0.079084</td>\n","      <td>...</td>\n","      <td>0.100631</td>\n","      <td>0.056709</td>\n","      <td>-0.143318</td>\n","      <td>-0.029658</td>\n","      <td>0.002798</td>\n","      <td>0.388937</td>\n","      <td>-0.007842</td>\n","      <td>-0.017839</td>\n","      <td>-0.048486</td>\n","      <td>-0.052443</td>\n","      <td>-0.115692</td>\n","      <td>-0.083860</td>\n","      <td>-0.032173</td>\n","      <td>0.020114</td>\n","      <td>0.060237</td>\n","      <td>0.037948</td>\n","      <td>0.128423</td>\n","      <td>0.114112</td>\n","      <td>0.019684</td>\n","      <td>0.025796</td>\n","      <td>0.023155</td>\n","      <td>-0.022236</td>\n","      <td>-0.109986</td>\n","      <td>0.126930</td>\n","      <td>-0.119697</td>\n","      <td>0.119482</td>\n","      <td>-0.061804</td>\n","      <td>-0.249119</td>\n","      <td>0.046786</td>\n","      <td>0.030646</td>\n","      <td>0.010268</td>\n","      <td>-0.052094</td>\n","      <td>-0.033774</td>\n","      <td>-0.033480</td>\n","      <td>-0.037922</td>\n","      <td>0.026167</td>\n","      <td>0.063701</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 303 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8eb3324c-8227-447b-b301-a033422d74d5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8eb3324c-8227-447b-b301-a033422d74d5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8eb3324c-8227-447b-b301-a033422d74d5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["               0         1  ...  has_company_logo  has_questions\n","job_id                      ...                                 \n","4      -0.074170  0.165025  ...                 1              0\n","5      -0.085336  0.163455  ...                 1              1\n","7      -0.031751  0.184626  ...                 1              1\n","15     -0.080259  0.187966  ...                 1              0\n","16     -0.059504  0.191398  ...                 1              1\n","\n","[5 rows x 303 columns]"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["#Utilize uMAP for Dimension reduction \n","umap = UMAP(random_state=865)\n","embeds = umap.fit_transform(goal)"],"metadata":{"id":"u_HNBzbkmIhc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["embeds.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YnTr5tCBmI0e","executionInfo":{"status":"ok","timestamp":1643908892339,"user_tz":300,"elapsed":152,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"a120f668-91ee-4bc3-a615-414c04b2ad51"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4441, 2)"]},"metadata":{},"execution_count":65}]},{"cell_type":"markdown","source":["##NN"],"metadata":{"id":"-dJ0mYC_oJ8k"}},{"cell_type":"code","source":["labels = job.fraudulent"],"metadata":{"id":"tOZvkwgXqoF5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras import layers\n","import matplotlib.pyplot as plt\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","from google.colab import files\n","from keras.preprocessing.text import text_to_word_sequence\n","def build_model():\n","    model = keras.Sequential([\n","        # This is essentially a dense layer that mimics word embedding; we are reducing the one-hot encoded text (10,000+ one-hot tokens) down to 750 latent dimensions.\n","        layers.Dense(865, activation=\"linear\"),\n","        layers.Dense(65, activation=\"relu\",kernel_regularizer=\"l2\"),\n","        layers.Dense(5, activation=\"relu\"),\n","        layers.Dense(1, activation=\"sigmoid\")\n","    ])\n","    model.compile(optimizer=keras.optimizers.Adadelta(learning_rate=0.01), loss=\"binary_crossentropy\", metrics=[keras.metrics.BinaryAccuracy(threshold=0.5)])\n","    return model\n","\n","model = build_model()\n","\n","data_train = embeds[:3108]\n","labels_train = labels[:3108]\n","data_test = embeds[3108:]\n","labels_test = labels[3108:]\n","\n","k = 4\n","num_validation_samples = len(data_train) // k\n","num_epochs = 50\n","batch_sizes = 25\n","all_loss_histories = []\n","all_val_loss_histories = []  \n","all_acc_histories = []\n","all_val_acc_histories = []\n","\n","# For each validation fold, we will train a full set of epochs, and store the history. \n","for fold in range(k):\n","    validation_data = data_train[num_validation_samples * fold:\n","                           num_validation_samples * (fold + 1)]\n","    validation_targets = labels_train[num_validation_samples * fold:\n","                           num_validation_samples * (fold + 1)]\n","    training_data = np.concatenate([\n","        data_train[:num_validation_samples * fold],\n","        data_train[num_validation_samples * (fold + 1):]])\n","    training_targets = np.concatenate([\n","        labels_train[:num_validation_samples * fold],\n","        labels_train[num_validation_samples * (fold + 1):]])\n","    model = build_model()\n","    history = model.fit(training_data, training_targets, \n","                        validation_data = (validation_data,validation_targets), \n","                        epochs=num_epochs, batch_size=batch_sizes)\n","    val_loss_history = history.history['val_loss']\n","    val_acc_history = history.history['val_binary_accuracy']\n","    loss_history = history.history['loss']\n","    acc_history = history.history['binary_accuracy']\n","    all_val_loss_histories.append(val_loss_history)\n","    all_loss_histories.append(loss_history)\n","    all_val_acc_histories.append(val_acc_history)\n","    all_acc_histories.append(acc_history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c-Qs7QqomwC5","executionInfo":{"status":"ok","timestamp":1643910188330,"user_tz":300,"elapsed":116965,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"ff78af20-7bea-40cb-916f-0c08b398418c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","94/94 [==============================] - 4s 18ms/step - loss: 1.6483 - binary_accuracy: 0.9155 - val_loss: 1.5313 - val_binary_accuracy: 0.9730\n","Epoch 2/50\n","94/94 [==============================] - 1s 5ms/step - loss: 1.5257 - binary_accuracy: 0.9520 - val_loss: 1.4532 - val_binary_accuracy: 0.9730\n","Epoch 3/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.4707 - binary_accuracy: 0.9520 - val_loss: 1.4012 - val_binary_accuracy: 0.9730\n","Epoch 4/50\n","94/94 [==============================] - 1s 6ms/step - loss: 1.4306 - binary_accuracy: 0.9520 - val_loss: 1.3596 - val_binary_accuracy: 0.9730\n","Epoch 5/50\n","94/94 [==============================] - 1s 6ms/step - loss: 1.3975 - binary_accuracy: 0.9520 - val_loss: 1.3257 - val_binary_accuracy: 0.9730\n","Epoch 6/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.3685 - binary_accuracy: 0.9520 - val_loss: 1.2947 - val_binary_accuracy: 0.9730\n","Epoch 7/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.3418 - binary_accuracy: 0.9520 - val_loss: 1.2673 - val_binary_accuracy: 0.9730\n","Epoch 8/50\n","94/94 [==============================] - 1s 6ms/step - loss: 1.3169 - binary_accuracy: 0.9520 - val_loss: 1.2415 - val_binary_accuracy: 0.9730\n","Epoch 9/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.2929 - binary_accuracy: 0.9520 - val_loss: 1.2165 - val_binary_accuracy: 0.9730\n","Epoch 10/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.2697 - binary_accuracy: 0.9520 - val_loss: 1.1936 - val_binary_accuracy: 0.9730\n","Epoch 11/50\n","94/94 [==============================] - 1s 6ms/step - loss: 1.2473 - binary_accuracy: 0.9520 - val_loss: 1.1720 - val_binary_accuracy: 0.9730\n","Epoch 12/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.2262 - binary_accuracy: 0.9520 - val_loss: 1.1502 - val_binary_accuracy: 0.9730\n","Epoch 13/50\n","94/94 [==============================] - 0s 5ms/step - loss: 1.2056 - binary_accuracy: 0.9520 - val_loss: 1.1295 - val_binary_accuracy: 0.9730\n","Epoch 14/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1857 - binary_accuracy: 0.9520 - val_loss: 1.1098 - val_binary_accuracy: 0.9730\n","Epoch 15/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1667 - binary_accuracy: 0.9520 - val_loss: 1.0910 - val_binary_accuracy: 0.9730\n","Epoch 16/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1481 - binary_accuracy: 0.9520 - val_loss: 1.0720 - val_binary_accuracy: 0.9730\n","Epoch 17/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1297 - binary_accuracy: 0.9520 - val_loss: 1.0543 - val_binary_accuracy: 0.9730\n","Epoch 18/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1114 - binary_accuracy: 0.9520 - val_loss: 1.0355 - val_binary_accuracy: 0.9730\n","Epoch 19/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0938 - binary_accuracy: 0.9520 - val_loss: 1.0191 - val_binary_accuracy: 0.9730\n","Epoch 20/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0767 - binary_accuracy: 0.9520 - val_loss: 1.0024 - val_binary_accuracy: 0.9730\n","Epoch 21/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0601 - binary_accuracy: 0.9520 - val_loss: 0.9864 - val_binary_accuracy: 0.9730\n","Epoch 22/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0439 - binary_accuracy: 0.9520 - val_loss: 0.9712 - val_binary_accuracy: 0.9730\n","Epoch 23/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0281 - binary_accuracy: 0.9520 - val_loss: 0.9545 - val_binary_accuracy: 0.9730\n","Epoch 24/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0127 - binary_accuracy: 0.9520 - val_loss: 0.9395 - val_binary_accuracy: 0.9730\n","Epoch 25/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9976 - binary_accuracy: 0.9520 - val_loss: 0.9256 - val_binary_accuracy: 0.9730\n","Epoch 26/50\n","94/94 [==============================] - 0s 5ms/step - loss: 0.9828 - binary_accuracy: 0.9520 - val_loss: 0.9108 - val_binary_accuracy: 0.9730\n","Epoch 27/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9684 - binary_accuracy: 0.9520 - val_loss: 0.8968 - val_binary_accuracy: 0.9730\n","Epoch 28/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9547 - binary_accuracy: 0.9520 - val_loss: 0.8829 - val_binary_accuracy: 0.9730\n","Epoch 29/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9413 - binary_accuracy: 0.9520 - val_loss: 0.8693 - val_binary_accuracy: 0.9730\n","Epoch 30/50\n","94/94 [==============================] - 0s 3ms/step - loss: 0.9282 - binary_accuracy: 0.9520 - val_loss: 0.8562 - val_binary_accuracy: 0.9730\n","Epoch 31/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9158 - binary_accuracy: 0.9520 - val_loss: 0.8451 - val_binary_accuracy: 0.9730\n","Epoch 32/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9033 - binary_accuracy: 0.9520 - val_loss: 0.8325 - val_binary_accuracy: 0.9730\n","Epoch 33/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8917 - binary_accuracy: 0.9520 - val_loss: 0.8212 - val_binary_accuracy: 0.9730\n","Epoch 34/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8803 - binary_accuracy: 0.9520 - val_loss: 0.8096 - val_binary_accuracy: 0.9730\n","Epoch 35/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8687 - binary_accuracy: 0.9520 - val_loss: 0.7985 - val_binary_accuracy: 0.9730\n","Epoch 36/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8576 - binary_accuracy: 0.9520 - val_loss: 0.7875 - val_binary_accuracy: 0.9730\n","Epoch 37/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8468 - binary_accuracy: 0.9520 - val_loss: 0.7774 - val_binary_accuracy: 0.9730\n","Epoch 38/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8361 - binary_accuracy: 0.9520 - val_loss: 0.7669 - val_binary_accuracy: 0.9730\n","Epoch 39/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8256 - binary_accuracy: 0.9520 - val_loss: 0.7567 - val_binary_accuracy: 0.9730\n","Epoch 40/50\n","94/94 [==============================] - 1s 7ms/step - loss: 0.8156 - binary_accuracy: 0.9520 - val_loss: 0.7471 - val_binary_accuracy: 0.9730\n","Epoch 41/50\n","94/94 [==============================] - 1s 7ms/step - loss: 0.8059 - binary_accuracy: 0.9520 - val_loss: 0.7378 - val_binary_accuracy: 0.9730\n","Epoch 42/50\n","94/94 [==============================] - 1s 7ms/step - loss: 0.7969 - binary_accuracy: 0.9520 - val_loss: 0.7295 - val_binary_accuracy: 0.9730\n","Epoch 43/50\n","94/94 [==============================] - 1s 8ms/step - loss: 0.7884 - binary_accuracy: 0.9520 - val_loss: 0.7211 - val_binary_accuracy: 0.9730\n","Epoch 44/50\n","94/94 [==============================] - 1s 8ms/step - loss: 0.7800 - binary_accuracy: 0.9520 - val_loss: 0.7133 - val_binary_accuracy: 0.9730\n","Epoch 45/50\n","94/94 [==============================] - 1s 8ms/step - loss: 0.7716 - binary_accuracy: 0.9520 - val_loss: 0.7051 - val_binary_accuracy: 0.9730\n","Epoch 46/50\n","94/94 [==============================] - 1s 10ms/step - loss: 0.7634 - binary_accuracy: 0.9520 - val_loss: 0.6959 - val_binary_accuracy: 0.9730\n","Epoch 47/50\n","94/94 [==============================] - 1s 8ms/step - loss: 0.7554 - binary_accuracy: 0.9520 - val_loss: 0.6890 - val_binary_accuracy: 0.9730\n","Epoch 48/50\n","94/94 [==============================] - 1s 8ms/step - loss: 0.7473 - binary_accuracy: 0.9520 - val_loss: 0.6803 - val_binary_accuracy: 0.9730\n","Epoch 49/50\n","94/94 [==============================] - 1s 7ms/step - loss: 0.7393 - binary_accuracy: 0.9520 - val_loss: 0.6729 - val_binary_accuracy: 0.9730\n","Epoch 50/50\n","94/94 [==============================] - 1s 8ms/step - loss: 0.7314 - binary_accuracy: 0.9520 - val_loss: 0.6651 - val_binary_accuracy: 0.9730\n","Epoch 1/50\n","94/94 [==============================] - 2s 10ms/step - loss: 1.9309 - binary_accuracy: 0.6641 - val_loss: 1.8986 - val_binary_accuracy: 0.8919\n","Epoch 2/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.8877 - binary_accuracy: 0.9356 - val_loss: 1.8781 - val_binary_accuracy: 0.9241\n","Epoch 3/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.8658 - binary_accuracy: 0.9571 - val_loss: 1.8524 - val_binary_accuracy: 0.9408\n","Epoch 4/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.8309 - binary_accuracy: 0.9622 - val_loss: 1.8066 - val_binary_accuracy: 0.9408\n","Epoch 5/50\n","94/94 [==============================] - 1s 6ms/step - loss: 1.7644 - binary_accuracy: 0.9622 - val_loss: 1.7366 - val_binary_accuracy: 0.9408\n","Epoch 6/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.6702 - binary_accuracy: 0.9627 - val_loss: 1.6432 - val_binary_accuracy: 0.9408\n","Epoch 7/50\n","94/94 [==============================] - 1s 8ms/step - loss: 1.5548 - binary_accuracy: 0.9627 - val_loss: 1.5446 - val_binary_accuracy: 0.9408\n","Epoch 8/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.4239 - binary_accuracy: 0.9627 - val_loss: 1.4289 - val_binary_accuracy: 0.9408\n","Epoch 9/50\n","94/94 [==============================] - 1s 8ms/step - loss: 1.3167 - binary_accuracy: 0.9627 - val_loss: 1.3751 - val_binary_accuracy: 0.9408\n","Epoch 10/50\n","94/94 [==============================] - 1s 9ms/step - loss: 1.2622 - binary_accuracy: 0.9627 - val_loss: 1.3440 - val_binary_accuracy: 0.9408\n","Epoch 11/50\n","94/94 [==============================] - 1s 11ms/step - loss: 1.2253 - binary_accuracy: 0.9627 - val_loss: 1.3193 - val_binary_accuracy: 0.9408\n","Epoch 12/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.1953 - binary_accuracy: 0.9627 - val_loss: 1.2966 - val_binary_accuracy: 0.9408\n","Epoch 13/50\n","94/94 [==============================] - 1s 8ms/step - loss: 1.1685 - binary_accuracy: 0.9627 - val_loss: 1.2735 - val_binary_accuracy: 0.9408\n","Epoch 14/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.1437 - binary_accuracy: 0.9627 - val_loss: 1.2510 - val_binary_accuracy: 0.9408\n","Epoch 15/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.1199 - binary_accuracy: 0.9627 - val_loss: 1.2309 - val_binary_accuracy: 0.9408\n","Epoch 16/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.0972 - binary_accuracy: 0.9627 - val_loss: 1.2074 - val_binary_accuracy: 0.9408\n","Epoch 17/50\n","94/94 [==============================] - 1s 7ms/step - loss: 1.0748 - binary_accuracy: 0.9627 - val_loss: 1.1862 - val_binary_accuracy: 0.9408\n","Epoch 18/50\n","94/94 [==============================] - 1s 6ms/step - loss: 1.0531 - binary_accuracy: 0.9627 - val_loss: 1.1645 - val_binary_accuracy: 0.9408\n","Epoch 19/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0324 - binary_accuracy: 0.9627 - val_loss: 1.1449 - val_binary_accuracy: 0.9408\n","Epoch 20/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0126 - binary_accuracy: 0.9627 - val_loss: 1.1246 - val_binary_accuracy: 0.9408\n","Epoch 21/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9930 - binary_accuracy: 0.9627 - val_loss: 1.1055 - val_binary_accuracy: 0.9408\n","Epoch 22/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9737 - binary_accuracy: 0.9627 - val_loss: 1.0853 - val_binary_accuracy: 0.9408\n","Epoch 23/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9551 - binary_accuracy: 0.9627 - val_loss: 1.0675 - val_binary_accuracy: 0.9408\n","Epoch 24/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9372 - binary_accuracy: 0.9627 - val_loss: 1.0503 - val_binary_accuracy: 0.9408\n","Epoch 25/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9197 - binary_accuracy: 0.9627 - val_loss: 1.0312 - val_binary_accuracy: 0.9408\n","Epoch 26/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9027 - binary_accuracy: 0.9627 - val_loss: 1.0145 - val_binary_accuracy: 0.9408\n","Epoch 27/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8861 - binary_accuracy: 0.9627 - val_loss: 0.9979 - val_binary_accuracy: 0.9408\n","Epoch 28/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8700 - binary_accuracy: 0.9627 - val_loss: 0.9819 - val_binary_accuracy: 0.9408\n","Epoch 29/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8542 - binary_accuracy: 0.9627 - val_loss: 0.9660 - val_binary_accuracy: 0.9408\n","Epoch 30/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8388 - binary_accuracy: 0.9627 - val_loss: 0.9511 - val_binary_accuracy: 0.9408\n","Epoch 31/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8237 - binary_accuracy: 0.9627 - val_loss: 0.9353 - val_binary_accuracy: 0.9408\n","Epoch 32/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8092 - binary_accuracy: 0.9627 - val_loss: 0.9220 - val_binary_accuracy: 0.9408\n","Epoch 33/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7953 - binary_accuracy: 0.9627 - val_loss: 0.9077 - val_binary_accuracy: 0.9408\n","Epoch 34/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7816 - binary_accuracy: 0.9627 - val_loss: 0.8934 - val_binary_accuracy: 0.9408\n","Epoch 35/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7682 - binary_accuracy: 0.9627 - val_loss: 0.8803 - val_binary_accuracy: 0.9408\n","Epoch 36/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7551 - binary_accuracy: 0.9627 - val_loss: 0.8667 - val_binary_accuracy: 0.9408\n","Epoch 37/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7426 - binary_accuracy: 0.9627 - val_loss: 0.8555 - val_binary_accuracy: 0.9408\n","Epoch 38/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7303 - binary_accuracy: 0.9627 - val_loss: 0.8431 - val_binary_accuracy: 0.9408\n","Epoch 39/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7182 - binary_accuracy: 0.9627 - val_loss: 0.8299 - val_binary_accuracy: 0.9408\n","Epoch 40/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7064 - binary_accuracy: 0.9627 - val_loss: 0.8186 - val_binary_accuracy: 0.9408\n","Epoch 41/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6950 - binary_accuracy: 0.9627 - val_loss: 0.8074 - val_binary_accuracy: 0.9408\n","Epoch 42/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6840 - binary_accuracy: 0.9627 - val_loss: 0.7959 - val_binary_accuracy: 0.9408\n","Epoch 43/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6731 - binary_accuracy: 0.9627 - val_loss: 0.7845 - val_binary_accuracy: 0.9408\n","Epoch 44/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6625 - binary_accuracy: 0.9627 - val_loss: 0.7749 - val_binary_accuracy: 0.9408\n","Epoch 45/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6525 - binary_accuracy: 0.9627 - val_loss: 0.7637 - val_binary_accuracy: 0.9408\n","Epoch 46/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6427 - binary_accuracy: 0.9627 - val_loss: 0.7553 - val_binary_accuracy: 0.9408\n","Epoch 47/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6332 - binary_accuracy: 0.9627 - val_loss: 0.7452 - val_binary_accuracy: 0.9408\n","Epoch 48/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6238 - binary_accuracy: 0.9627 - val_loss: 0.7362 - val_binary_accuracy: 0.9408\n","Epoch 49/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6147 - binary_accuracy: 0.9627 - val_loss: 0.7266 - val_binary_accuracy: 0.9408\n","Epoch 50/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6058 - binary_accuracy: 0.9627 - val_loss: 0.7185 - val_binary_accuracy: 0.9408\n","Epoch 1/50\n","94/94 [==============================] - 1s 6ms/step - loss: 1.5576 - binary_accuracy: 0.9550 - val_loss: 1.4683 - val_binary_accuracy: 0.9640\n","Epoch 2/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.4403 - binary_accuracy: 0.9550 - val_loss: 1.4106 - val_binary_accuracy: 0.9640\n","Epoch 3/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.4067 - binary_accuracy: 0.9550 - val_loss: 1.3794 - val_binary_accuracy: 0.9640\n","Epoch 4/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.3829 - binary_accuracy: 0.9550 - val_loss: 1.3524 - val_binary_accuracy: 0.9640\n","Epoch 5/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.3609 - binary_accuracy: 0.9550 - val_loss: 1.3276 - val_binary_accuracy: 0.9640\n","Epoch 6/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.3394 - binary_accuracy: 0.9550 - val_loss: 1.3047 - val_binary_accuracy: 0.9640\n","Epoch 7/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.3186 - binary_accuracy: 0.9550 - val_loss: 1.2821 - val_binary_accuracy: 0.9640\n","Epoch 8/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.2982 - binary_accuracy: 0.9550 - val_loss: 1.2612 - val_binary_accuracy: 0.9640\n","Epoch 9/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.2784 - binary_accuracy: 0.9550 - val_loss: 1.2409 - val_binary_accuracy: 0.9640\n","Epoch 10/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.2586 - binary_accuracy: 0.9550 - val_loss: 1.2206 - val_binary_accuracy: 0.9640\n","Epoch 11/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.2394 - binary_accuracy: 0.9550 - val_loss: 1.2010 - val_binary_accuracy: 0.9640\n","Epoch 12/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.2206 - binary_accuracy: 0.9550 - val_loss: 1.1818 - val_binary_accuracy: 0.9640\n","Epoch 13/50\n","94/94 [==============================] - 0s 3ms/step - loss: 1.2017 - binary_accuracy: 0.9550 - val_loss: 1.1626 - val_binary_accuracy: 0.9640\n","Epoch 14/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1831 - binary_accuracy: 0.9550 - val_loss: 1.1441 - val_binary_accuracy: 0.9640\n","Epoch 15/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1651 - binary_accuracy: 0.9550 - val_loss: 1.1261 - val_binary_accuracy: 0.9640\n","Epoch 16/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1475 - binary_accuracy: 0.9550 - val_loss: 1.1085 - val_binary_accuracy: 0.9640\n","Epoch 17/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1309 - binary_accuracy: 0.9550 - val_loss: 1.0927 - val_binary_accuracy: 0.9640\n","Epoch 18/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1149 - binary_accuracy: 0.9550 - val_loss: 1.0762 - val_binary_accuracy: 0.9640\n","Epoch 19/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0989 - binary_accuracy: 0.9550 - val_loss: 1.0602 - val_binary_accuracy: 0.9640\n","Epoch 20/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0831 - binary_accuracy: 0.9550 - val_loss: 1.0445 - val_binary_accuracy: 0.9640\n","Epoch 21/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0676 - binary_accuracy: 0.9550 - val_loss: 1.0292 - val_binary_accuracy: 0.9640\n","Epoch 22/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0525 - binary_accuracy: 0.9550 - val_loss: 1.0147 - val_binary_accuracy: 0.9640\n","Epoch 23/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0381 - binary_accuracy: 0.9550 - val_loss: 1.0003 - val_binary_accuracy: 0.9640\n","Epoch 24/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0235 - binary_accuracy: 0.9550 - val_loss: 0.9858 - val_binary_accuracy: 0.9640\n","Epoch 25/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0092 - binary_accuracy: 0.9550 - val_loss: 0.9717 - val_binary_accuracy: 0.9640\n","Epoch 26/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9951 - binary_accuracy: 0.9550 - val_loss: 0.9577 - val_binary_accuracy: 0.9640\n","Epoch 27/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9814 - binary_accuracy: 0.9550 - val_loss: 0.9440 - val_binary_accuracy: 0.9640\n","Epoch 28/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9680 - binary_accuracy: 0.9550 - val_loss: 0.9308 - val_binary_accuracy: 0.9640\n","Epoch 29/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9551 - binary_accuracy: 0.9550 - val_loss: 0.9184 - val_binary_accuracy: 0.9640\n","Epoch 30/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9425 - binary_accuracy: 0.9550 - val_loss: 0.9059 - val_binary_accuracy: 0.9640\n","Epoch 31/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9302 - binary_accuracy: 0.9550 - val_loss: 0.8937 - val_binary_accuracy: 0.9640\n","Epoch 32/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9181 - binary_accuracy: 0.9550 - val_loss: 0.8817 - val_binary_accuracy: 0.9640\n","Epoch 33/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9066 - binary_accuracy: 0.9550 - val_loss: 0.8709 - val_binary_accuracy: 0.9640\n","Epoch 34/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8955 - binary_accuracy: 0.9550 - val_loss: 0.8601 - val_binary_accuracy: 0.9640\n","Epoch 35/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8846 - binary_accuracy: 0.9550 - val_loss: 0.8493 - val_binary_accuracy: 0.9640\n","Epoch 36/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8738 - binary_accuracy: 0.9550 - val_loss: 0.8388 - val_binary_accuracy: 0.9640\n","Epoch 37/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8629 - binary_accuracy: 0.9550 - val_loss: 0.8280 - val_binary_accuracy: 0.9640\n","Epoch 38/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8525 - binary_accuracy: 0.9550 - val_loss: 0.8177 - val_binary_accuracy: 0.9640\n","Epoch 39/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8425 - binary_accuracy: 0.9550 - val_loss: 0.8080 - val_binary_accuracy: 0.9640\n","Epoch 40/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8326 - binary_accuracy: 0.9550 - val_loss: 0.7981 - val_binary_accuracy: 0.9640\n","Epoch 41/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8229 - binary_accuracy: 0.9550 - val_loss: 0.7885 - val_binary_accuracy: 0.9640\n","Epoch 42/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8134 - binary_accuracy: 0.9550 - val_loss: 0.7795 - val_binary_accuracy: 0.9640\n","Epoch 43/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8042 - binary_accuracy: 0.9550 - val_loss: 0.7703 - val_binary_accuracy: 0.9640\n","Epoch 44/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7951 - binary_accuracy: 0.9550 - val_loss: 0.7613 - val_binary_accuracy: 0.9640\n","Epoch 45/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7865 - binary_accuracy: 0.9550 - val_loss: 0.7528 - val_binary_accuracy: 0.9640\n","Epoch 46/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7780 - binary_accuracy: 0.9550 - val_loss: 0.7443 - val_binary_accuracy: 0.9640\n","Epoch 47/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7696 - binary_accuracy: 0.9550 - val_loss: 0.7362 - val_binary_accuracy: 0.9640\n","Epoch 48/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7612 - binary_accuracy: 0.9550 - val_loss: 0.7281 - val_binary_accuracy: 0.9640\n","Epoch 49/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7531 - binary_accuracy: 0.9550 - val_loss: 0.7203 - val_binary_accuracy: 0.9640\n","Epoch 50/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7450 - binary_accuracy: 0.9550 - val_loss: 0.7129 - val_binary_accuracy: 0.9640\n","Epoch 1/50\n","94/94 [==============================] - 1s 6ms/step - loss: 1.6891 - binary_accuracy: 0.8541 - val_loss: 1.5560 - val_binary_accuracy: 0.9305\n","Epoch 2/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.5517 - binary_accuracy: 0.8897 - val_loss: 1.4738 - val_binary_accuracy: 0.9356\n","Epoch 3/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.4900 - binary_accuracy: 0.9091 - val_loss: 1.4268 - val_binary_accuracy: 0.9408\n","Epoch 4/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.4496 - binary_accuracy: 0.9395 - val_loss: 1.3906 - val_binary_accuracy: 0.9511\n","Epoch 5/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.4178 - binary_accuracy: 0.9584 - val_loss: 1.3615 - val_binary_accuracy: 0.9511\n","Epoch 6/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.3889 - binary_accuracy: 0.9588 - val_loss: 1.3341 - val_binary_accuracy: 0.9511\n","Epoch 7/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.3617 - binary_accuracy: 0.9592 - val_loss: 1.3085 - val_binary_accuracy: 0.9511\n","Epoch 8/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.3360 - binary_accuracy: 0.9588 - val_loss: 1.2839 - val_binary_accuracy: 0.9511\n","Epoch 9/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.3105 - binary_accuracy: 0.9592 - val_loss: 1.2597 - val_binary_accuracy: 0.9511\n","Epoch 10/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.2840 - binary_accuracy: 0.9584 - val_loss: 1.2363 - val_binary_accuracy: 0.9511\n","Epoch 11/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.2579 - binary_accuracy: 0.9592 - val_loss: 1.2138 - val_binary_accuracy: 0.9511\n","Epoch 12/50\n","94/94 [==============================] - 0s 5ms/step - loss: 1.2332 - binary_accuracy: 0.9592 - val_loss: 1.1919 - val_binary_accuracy: 0.9511\n","Epoch 13/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.2094 - binary_accuracy: 0.9592 - val_loss: 1.1709 - val_binary_accuracy: 0.9511\n","Epoch 14/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1866 - binary_accuracy: 0.9592 - val_loss: 1.1500 - val_binary_accuracy: 0.9511\n","Epoch 15/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1639 - binary_accuracy: 0.9592 - val_loss: 1.1301 - val_binary_accuracy: 0.9511\n","Epoch 16/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1423 - binary_accuracy: 0.9592 - val_loss: 1.1110 - val_binary_accuracy: 0.9511\n","Epoch 17/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1214 - binary_accuracy: 0.9592 - val_loss: 1.0918 - val_binary_accuracy: 0.9511\n","Epoch 18/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.1013 - binary_accuracy: 0.9592 - val_loss: 1.0735 - val_binary_accuracy: 0.9511\n","Epoch 19/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0815 - binary_accuracy: 0.9592 - val_loss: 1.0558 - val_binary_accuracy: 0.9511\n","Epoch 20/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0625 - binary_accuracy: 0.9592 - val_loss: 1.0380 - val_binary_accuracy: 0.9511\n","Epoch 21/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0443 - binary_accuracy: 0.9592 - val_loss: 1.0207 - val_binary_accuracy: 0.9511\n","Epoch 22/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0266 - binary_accuracy: 0.9592 - val_loss: 1.0041 - val_binary_accuracy: 0.9511\n","Epoch 23/50\n","94/94 [==============================] - 0s 4ms/step - loss: 1.0092 - binary_accuracy: 0.9592 - val_loss: 0.9879 - val_binary_accuracy: 0.9511\n","Epoch 24/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9924 - binary_accuracy: 0.9592 - val_loss: 0.9721 - val_binary_accuracy: 0.9511\n","Epoch 25/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9758 - binary_accuracy: 0.9592 - val_loss: 0.9564 - val_binary_accuracy: 0.9511\n","Epoch 26/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9598 - binary_accuracy: 0.9592 - val_loss: 0.9418 - val_binary_accuracy: 0.9511\n","Epoch 27/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9443 - binary_accuracy: 0.9592 - val_loss: 0.9268 - val_binary_accuracy: 0.9511\n","Epoch 28/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9290 - binary_accuracy: 0.9592 - val_loss: 0.9130 - val_binary_accuracy: 0.9511\n","Epoch 29/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.9142 - binary_accuracy: 0.9592 - val_loss: 0.8986 - val_binary_accuracy: 0.9511\n","Epoch 30/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8999 - binary_accuracy: 0.9592 - val_loss: 0.8847 - val_binary_accuracy: 0.9511\n","Epoch 31/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8864 - binary_accuracy: 0.9592 - val_loss: 0.8720 - val_binary_accuracy: 0.9511\n","Epoch 32/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8735 - binary_accuracy: 0.9592 - val_loss: 0.8594 - val_binary_accuracy: 0.9511\n","Epoch 33/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8606 - binary_accuracy: 0.9592 - val_loss: 0.8471 - val_binary_accuracy: 0.9511\n","Epoch 34/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8479 - binary_accuracy: 0.9592 - val_loss: 0.8350 - val_binary_accuracy: 0.9511\n","Epoch 35/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8357 - binary_accuracy: 0.9592 - val_loss: 0.8234 - val_binary_accuracy: 0.9511\n","Epoch 36/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8238 - binary_accuracy: 0.9592 - val_loss: 0.8120 - val_binary_accuracy: 0.9511\n","Epoch 37/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8123 - binary_accuracy: 0.9592 - val_loss: 0.8011 - val_binary_accuracy: 0.9511\n","Epoch 38/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.8008 - binary_accuracy: 0.9592 - val_loss: 0.7901 - val_binary_accuracy: 0.9511\n","Epoch 39/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7896 - binary_accuracy: 0.9592 - val_loss: 0.7789 - val_binary_accuracy: 0.9511\n","Epoch 40/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7786 - binary_accuracy: 0.9592 - val_loss: 0.7683 - val_binary_accuracy: 0.9511\n","Epoch 41/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7679 - binary_accuracy: 0.9592 - val_loss: 0.7582 - val_binary_accuracy: 0.9511\n","Epoch 42/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7575 - binary_accuracy: 0.9592 - val_loss: 0.7477 - val_binary_accuracy: 0.9511\n","Epoch 43/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7473 - binary_accuracy: 0.9592 - val_loss: 0.7378 - val_binary_accuracy: 0.9511\n","Epoch 44/50\n","94/94 [==============================] - 1s 11ms/step - loss: 0.7371 - binary_accuracy: 0.9592 - val_loss: 0.7286 - val_binary_accuracy: 0.9511\n","Epoch 45/50\n","94/94 [==============================] - 1s 8ms/step - loss: 0.7273 - binary_accuracy: 0.9592 - val_loss: 0.7188 - val_binary_accuracy: 0.9511\n","Epoch 46/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7177 - binary_accuracy: 0.9592 - val_loss: 0.7094 - val_binary_accuracy: 0.9511\n","Epoch 47/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.7084 - binary_accuracy: 0.9592 - val_loss: 0.7008 - val_binary_accuracy: 0.9511\n","Epoch 48/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6997 - binary_accuracy: 0.9592 - val_loss: 0.6922 - val_binary_accuracy: 0.9511\n","Epoch 49/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6913 - binary_accuracy: 0.9592 - val_loss: 0.6847 - val_binary_accuracy: 0.9511\n","Epoch 50/50\n","94/94 [==============================] - 0s 4ms/step - loss: 0.6834 - binary_accuracy: 0.9592 - val_loss: 0.6763 - val_binary_accuracy: 0.9511\n"]}]},{"cell_type":"code","source":["average_loss_history = [np.mean([x[i] for x in all_loss_histories]) for i in range(num_epochs)]\n","average_val_loss_history = [np.mean([x[i] for x in all_val_loss_histories]) for i in range(num_epochs)]\n","average_acc_history = [np.mean([x[i] for x in all_acc_histories]) for i in range(num_epochs)]\n","average_val_acc_history = [np.mean([x[i] for x in all_val_acc_histories]) for i in range(num_epochs)]"],"metadata":{"id":"90tAMk-Mrte0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Plot validation performance. \n","plt.plot(average_loss_history,c='r')\n","plt.plot(average_acc_history,c=\"r\",linestyle=\"dashed\")\n","plt.plot(average_val_loss_history,c='b')\n","plt.plot(average_val_acc_history,c='b',linestyle=\"dashed\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend(['Training Loss','Training Accuracy','Validation Loss','Validation Accuracy'])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"Ulh5UKUZrvZd","executionInfo":{"status":"ok","timestamp":1643910200648,"user_tz":300,"elapsed":869,"user":{"displayName":"Chunxiaqiu Yang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10924460394628477546"}},"outputId":"627bf21d-3cf3-4fe3-d018-aba9797ebe85"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]}]}