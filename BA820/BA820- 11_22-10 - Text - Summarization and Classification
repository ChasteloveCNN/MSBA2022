{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BA820- 11/22-10 - Text - Summarization and Classification","provenance":[{"file_id":"1AI7HA5JTKkIkSRhPgsj2-f4q8bBi3Bof","timestamp":1637608457244}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"yjl1uas62G5u"},"source":["##############################################################################\n","## Fundamentals for pratical Text Analytics - classification tasks and applications\n","##\n","## Learning goals:\n","##                 - reinforce text as a robust dataset via language modeling and understanding\n","##                 - python packages for handling our corpus for these exploratory tasks\n","##                 - a little more spacy\n","##                 - text classification discussions and include it in other pipelines\n","##############################################################################"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d8N_nvFY2g9o","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1637610036472,"user_tz":300,"elapsed":68788,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"f9c205e8-07ff-4bde-f3a9-064fee7027c9"},"source":["# installs \n","! pip install newspaper3k\n","! pip install -U spacy\n","! pip install afinn\n","! pip install spacytextblob\n","! pip install pysrt\n","! pip install textdescriptives\n","! pip install tokenwiser\n","\n","## you may need to restart the colab kernel"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting newspaper3k\n","  Downloading newspaper3k-0.2.8-py3-none-any.whl (211 kB)\n","\u001b[K     |████████████████████████████████| 211 kB 5.3 MB/s \n","\u001b[?25hRequirement already satisfied: requests>=2.10.0 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (2.23.0)\n","Requirement already satisfied: Pillow>=3.3.0 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (7.1.2)\n","Collecting tldextract>=2.0.1\n","  Downloading tldextract-3.1.2-py2.py3-none-any.whl (87 kB)\n","\u001b[K     |████████████████████████████████| 87 kB 4.7 MB/s \n","\u001b[?25hCollecting jieba3k>=0.35.1\n","  Downloading jieba3k-0.35.1.zip (7.4 MB)\n","\u001b[K     |████████████████████████████████| 7.4 MB 19.1 MB/s \n","\u001b[?25hCollecting feedparser>=5.2.1\n","  Downloading feedparser-6.0.8-py3-none-any.whl (81 kB)\n","\u001b[K     |████████████████████████████████| 81 kB 8.8 MB/s \n","\u001b[?25hRequirement already satisfied: nltk>=3.2.1 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (3.2.5)\n","Requirement already satisfied: PyYAML>=3.11 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (3.13)\n","Collecting feedfinder2>=0.0.4\n","  Downloading feedfinder2-0.0.4.tar.gz (3.3 kB)\n","Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (2.8.2)\n","Requirement already satisfied: beautifulsoup4>=4.4.1 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (4.6.3)\n","Collecting tinysegmenter==0.3\n","  Downloading tinysegmenter-0.3.tar.gz (16 kB)\n","Collecting cssselect>=0.9.2\n","  Downloading cssselect-1.1.0-py2.py3-none-any.whl (16 kB)\n","Requirement already satisfied: lxml>=3.6.0 in /usr/local/lib/python3.7/dist-packages (from newspaper3k) (4.2.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from feedfinder2>=0.0.4->newspaper3k) (1.15.0)\n","Collecting sgmllib3k\n","  Downloading sgmllib3k-1.0.0.tar.gz (5.8 kB)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->newspaper3k) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->newspaper3k) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->newspaper3k) (2021.10.8)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.10.0->newspaper3k) (3.0.4)\n","Requirement already satisfied: filelock>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from tldextract>=2.0.1->newspaper3k) (3.4.0)\n","Collecting requests-file>=1.4\n","  Downloading requests_file-1.5.1-py2.py3-none-any.whl (3.7 kB)\n","Building wheels for collected packages: tinysegmenter, feedfinder2, jieba3k, sgmllib3k\n","  Building wheel for tinysegmenter (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for tinysegmenter: filename=tinysegmenter-0.3-py3-none-any.whl size=13552 sha256=118b9d12948c9766476ab74d1b7c6921a926a7c0fd1305ec8afecda89750ad9f\n","  Stored in directory: /root/.cache/pip/wheels/df/67/41/faca10fa501ca010be41b49d40360c2959e1c4f09bcbfa37fa\n","  Building wheel for feedfinder2 (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for feedfinder2: filename=feedfinder2-0.0.4-py3-none-any.whl size=3356 sha256=1d7127466323401182eae6ba6d1d8a2898d91edbf2176ac494370322831f4a01\n","  Stored in directory: /root/.cache/pip/wheels/7f/d4/8f/6e2ca54744c9d7292d88ddb8d42876bcdab5e6d84a21c10346\n","  Building wheel for jieba3k (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for jieba3k: filename=jieba3k-0.35.1-py3-none-any.whl size=7398405 sha256=bf01b9d8c9c72ee4fe41907faa978c7904bfe38e9ae469b5dfa828871a1c8f8f\n","  Stored in directory: /root/.cache/pip/wheels/4c/91/46/3c208287b726df325a5979574324878b679116e4baae1af3c3\n","  Building wheel for sgmllib3k (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sgmllib3k: filename=sgmllib3k-1.0.0-py3-none-any.whl size=6065 sha256=f97c5dc03f721626104972911b85d47411b8510e976291f35d0287801844f012\n","  Stored in directory: /root/.cache/pip/wheels/73/ad/a4/0dff4a6ef231fc0dfa12ffbac2a36cebfdddfe059f50e019aa\n","Successfully built tinysegmenter feedfinder2 jieba3k sgmllib3k\n","Installing collected packages: sgmllib3k, requests-file, tldextract, tinysegmenter, jieba3k, feedparser, feedfinder2, cssselect, newspaper3k\n","Successfully installed cssselect-1.1.0 feedfinder2-0.0.4 feedparser-6.0.8 jieba3k-0.35.1 newspaper3k-0.2.8 requests-file-1.5.1 sgmllib3k-1.0.0 tinysegmenter-0.3 tldextract-3.1.2\n","Requirement already satisfied: spacy in /usr/local/lib/python3.7/dist-packages (2.2.4)\n","Collecting spacy\n","  Downloading spacy-3.2.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.0 MB)\n","\u001b[K     |████████████████████████████████| 6.0 MB 4.7 MB/s \n","\u001b[?25hRequirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.0.6)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.8.2)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.0.6)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (4.62.3)\n","Collecting pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4\n","  Downloading pydantic-1.8.2-cp37-cp37m-manylinux2014_x86_64.whl (10.1 MB)\n","\u001b[K     |████████████████████████████████| 10.1 MB 21.8 MB/s \n","\u001b[?25hCollecting spacy-legacy<3.1.0,>=3.0.8\n","  Downloading spacy_legacy-3.0.8-py2.py3-none-any.whl (14 kB)\n","Collecting pathy>=0.3.5\n","  Downloading pathy-0.6.1-py3-none-any.whl (42 kB)\n","\u001b[K     |████████████████████████████████| 42 kB 1.3 MB/s \n","\u001b[?25hRequirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.0.6)\n","Collecting thinc<8.1.0,>=8.0.12\n","  Downloading thinc-8.0.13-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (628 kB)\n","\u001b[K     |████████████████████████████████| 628 kB 55.9 MB/s \n","\u001b[?25hCollecting catalogue<2.1.0,>=2.0.6\n","  Downloading catalogue-2.0.6-py3-none-any.whl (17 kB)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (21.3)\n","Collecting spacy-loggers<2.0.0,>=1.0.0\n","  Downloading spacy_loggers-1.0.1-py3-none-any.whl (7.0 kB)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy) (57.4.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.11.3)\n","Collecting langcodes<4.0.0,>=3.2.0\n","  Downloading langcodes-3.3.0-py3-none-any.whl (181 kB)\n","\u001b[K     |████████████████████████████████| 181 kB 60.5 MB/s \n","\u001b[?25hRequirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.23.0)\n","Collecting typer<0.5.0,>=0.3.0\n","  Downloading typer-0.4.0-py3-none-any.whl (27 kB)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.4.1)\n","Collecting srsly<3.0.0,>=2.4.1\n","  Downloading srsly-2.4.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (451 kB)\n","\u001b[K     |████████████████████████████████| 451 kB 68.9 MB/s \n","\u001b[?25hRequirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.10.0.2)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.19.5)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy) (3.6.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy) (3.0.6)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy) (5.2.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2021.10.8)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy) (2.0.1)\n","Installing collected packages: catalogue, typer, srsly, pydantic, thinc, spacy-loggers, spacy-legacy, pathy, langcodes, spacy\n","  Attempting uninstall: catalogue\n","    Found existing installation: catalogue 1.0.0\n","    Uninstalling catalogue-1.0.0:\n","      Successfully uninstalled catalogue-1.0.0\n","  Attempting uninstall: srsly\n","    Found existing installation: srsly 1.0.5\n","    Uninstalling srsly-1.0.5:\n","      Successfully uninstalled srsly-1.0.5\n","  Attempting uninstall: thinc\n","    Found existing installation: thinc 7.4.0\n","    Uninstalling thinc-7.4.0:\n","      Successfully uninstalled thinc-7.4.0\n","  Attempting uninstall: spacy\n","    Found existing installation: spacy 2.2.4\n","    Uninstalling spacy-2.2.4:\n","      Successfully uninstalled spacy-2.2.4\n","Successfully installed catalogue-2.0.6 langcodes-3.3.0 pathy-0.6.1 pydantic-1.8.2 spacy-3.2.0 spacy-legacy-3.0.8 spacy-loggers-1.0.1 srsly-2.4.2 thinc-8.0.13 typer-0.4.0\n","Collecting afinn\n","  Downloading afinn-0.1.tar.gz (52 kB)\n","\u001b[K     |████████████████████████████████| 52 kB 907 kB/s \n","\u001b[?25hBuilding wheels for collected packages: afinn\n","  Building wheel for afinn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for afinn: filename=afinn-0.1-py3-none-any.whl size=53448 sha256=6ffde09726835ebae143fe4f63bb6e02cb70a17a68b17598761275bf0b54f497\n","  Stored in directory: /root/.cache/pip/wheels/9d/16/3a/9f0953027434eab5dadf3f33ab3298fa95afa8292fcf7aba75\n","Successfully built afinn\n","Installing collected packages: afinn\n","Successfully installed afinn-0.1\n","Collecting spacytextblob\n","  Downloading spacytextblob-3.0.1-py3-none-any.whl (4.1 kB)\n","Requirement already satisfied: spacy<4.0,>=3.0 in /usr/local/lib/python3.7/dist-packages (from spacytextblob) (3.2.0)\n","Requirement already satisfied: textblob<0.16.0,>=0.15.3 in /usr/local/lib/python3.7/dist-packages (from spacytextblob) (0.15.3)\n","Requirement already satisfied: typer<0.5.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (0.4.0)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (3.10.0.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (57.4.0)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (1.0.6)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (0.8.2)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.23.0)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.12 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (8.0.13)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (0.6.1)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (0.4.1)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.4.2)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.0.6)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.11.3)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (1.0.1)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (3.3.0)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (3.0.8)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (1.8.2)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (2.0.6)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (4.62.3)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (21.3)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (1.19.5)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy<4.0,>=3.0->spacytextblob) (3.0.6)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy<4.0,>=3.0->spacytextblob) (3.6.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy<4.0,>=3.0->spacytextblob) (3.0.6)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy<4.0,>=3.0->spacytextblob) (5.2.1)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<4.0,>=3.0->spacytextblob) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<4.0,>=3.0->spacytextblob) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<4.0,>=3.0->spacytextblob) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<4.0,>=3.0->spacytextblob) (2021.10.8)\n","Requirement already satisfied: nltk>=3.1 in /usr/local/lib/python3.7/dist-packages (from textblob<0.16.0,>=0.15.3->spacytextblob) (3.2.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from nltk>=3.1->textblob<0.16.0,>=0.15.3->spacytextblob) (1.15.0)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy<4.0,>=3.0->spacytextblob) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy<4.0,>=3.0->spacytextblob) (2.0.1)\n","Installing collected packages: spacytextblob\n","Successfully installed spacytextblob-3.0.1\n","Collecting pysrt\n","  Downloading pysrt-1.1.2.tar.gz (104 kB)\n","\u001b[K     |████████████████████████████████| 104 kB 5.4 MB/s \n","\u001b[?25hRequirement already satisfied: chardet in /usr/local/lib/python3.7/dist-packages (from pysrt) (3.0.4)\n","Building wheels for collected packages: pysrt\n","  Building wheel for pysrt (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pysrt: filename=pysrt-1.1.2-py3-none-any.whl size=13442 sha256=0cb8d6b6af5e99f46ad9ced7376d557e988854c952822e61b430adb337011e60\n","  Stored in directory: /root/.cache/pip/wheels/b2/f8/e8/a26be4111ab5ec931e845777e574d1483b4adddc50d3e591a6\n","Successfully built pysrt\n","Installing collected packages: pysrt\n","Successfully installed pysrt-1.1.2\n","Collecting textdescriptives\n","  Downloading textdescriptives-1.0.6-py3-none-any.whl (35 kB)\n","Requirement already satisfied: spacy>=3.0.3 in /usr/local/lib/python3.7/dist-packages (from textdescriptives) (3.2.0)\n","Collecting pyphen>=0.11.0\n","  Downloading pyphen-0.11.0-py3-none-any.whl (2.0 MB)\n","\u001b[K     |████████████████████████████████| 2.0 MB 9.0 MB/s \n","\u001b[?25hCollecting numpy>=1.20.0\n","  Downloading numpy-1.21.4-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (15.7 MB)\n","\u001b[K     |████████████████████████████████| 15.7 MB 60 kB/s \n","\u001b[?25hRequirement already satisfied: pandas>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from textdescriptives) (1.1.5)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.0.0->textdescriptives) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=1.0.0->textdescriptives) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=1.0.0->textdescriptives) (1.15.0)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (0.4.1)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (21.3)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (3.10.0.2)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (1.0.6)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.0.6)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (4.62.3)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.4.2)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (1.8.2)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (1.0.1)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.12 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (8.0.13)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (3.3.0)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (3.0.6)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (0.8.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (57.4.0)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (3.0.8)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (0.6.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.11.3)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.0.6)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (2.23.0)\n","Requirement already satisfied: typer<0.5.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.0.3->textdescriptives) (0.4.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy>=3.0.3->textdescriptives) (3.6.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy>=3.0.3->textdescriptives) (3.0.6)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy>=3.0.3->textdescriptives) (5.2.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.0.3->textdescriptives) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.0.3->textdescriptives) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.0.3->textdescriptives) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.0.3->textdescriptives) (3.0.4)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy>=3.0.3->textdescriptives) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy>=3.0.3->textdescriptives) (2.0.1)\n","Installing collected packages: numpy, pyphen, textdescriptives\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.19.5\n","    Uninstalling numpy-1.19.5:\n","      Successfully uninstalled numpy-1.19.5\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","yellowbrick 1.3.post1 requires numpy<1.20,>=1.16.0, but you have numpy 1.21.4 which is incompatible.\n","datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\n","albumentations 0.1.12 requires imgaug<0.2.7,>=0.2.5, but you have imgaug 0.2.9 which is incompatible.\u001b[0m\n","Successfully installed numpy-1.21.4 pyphen-0.11.0 textdescriptives-1.0.6\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["numpy"]}}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Collecting tokenwiser\n","  Downloading tokenwiser-0.1.7-py2.py3-none-any.whl (30 kB)\n","Collecting vowpalwabbit>=8.9.0\n","  Downloading vowpalwabbit-8.11.0-cp37-cp37m-manylinux2010_x86_64.whl (2.6 MB)\n","\u001b[K     |████████████████████████████████| 2.6 MB 6.3 MB/s \n","\u001b[?25hCollecting sentencepiece>=0.1.95\n","  Downloading sentencepiece-0.1.96-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.2 MB)\n","\u001b[K     |████████████████████████████████| 1.2 MB 48.3 MB/s \n","\u001b[?25hRequirement already satisfied: spacy>=3.1.0 in /usr/local/lib/python3.7/dist-packages (from tokenwiser) (3.2.0)\n","Requirement already satisfied: scikit-learn>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from tokenwiser) (1.0.1)\n","Collecting yake-github>=0.4.0\n","  Downloading yake-github-0.4.0.tar.gz (390 kB)\n","\u001b[K     |████████████████████████████████| 390 kB 65.1 MB/s \n","\u001b[?25hCollecting jellyfish>=0.8.2\n","  Downloading jellyfish-0.8.9.tar.gz (137 kB)\n","\u001b[K     |████████████████████████████████| 137 kB 64.1 MB/s \n","\u001b[?25hRequirement already satisfied: snowballstemmer>=2.1.0 in /usr/local/lib/python3.7/dist-packages (from tokenwiser) (2.2.0)\n","Requirement already satisfied: Pyphen>=0.10.0 in /usr/local/lib/python3.7/dist-packages (from tokenwiser) (0.11.0)\n","Collecting PyYAML>=5.3.1\n","  Downloading PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (596 kB)\n","\u001b[K     |████████████████████████████████| 596 kB 45.5 MB/s \n","\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.24.0->tokenwiser) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.24.0->tokenwiser) (3.0.0)\n","Requirement already satisfied: numpy>=1.14.6 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.24.0->tokenwiser) (1.21.4)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.24.0->tokenwiser) (1.4.1)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (1.0.6)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (3.0.8)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (0.4.1)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.12 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (8.0.13)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.0.6)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (1.0.1)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (0.8.2)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (1.8.2)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (0.6.1)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (4.62.3)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (3.10.0.2)\n","Requirement already satisfied: typer<0.5.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (0.4.0)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.0.6)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (21.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.11.3)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (3.0.6)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (57.4.0)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.4.2)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (2.23.0)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from spacy>=3.1.0->tokenwiser) (3.3.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy>=3.1.0->tokenwiser) (3.6.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy>=3.1.0->tokenwiser) (3.0.6)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy>=3.1.0->tokenwiser) (5.2.1)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.1.0->tokenwiser) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.1.0->tokenwiser) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.1.0->tokenwiser) (2021.10.8)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.1.0->tokenwiser) (2.10)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy>=3.1.0->tokenwiser) (7.1.2)\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.7/dist-packages (from yake-github>=0.4.0->tokenwiser) (0.8.9)\n","Collecting segtok\n","  Downloading segtok-1.5.10.tar.gz (25 kB)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.7/dist-packages (from yake-github>=0.4.0->tokenwiser) (2.6.3)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy>=3.1.0->tokenwiser) (2.0.1)\n","Requirement already satisfied: regex in /usr/local/lib/python3.7/dist-packages (from segtok->yake-github>=0.4.0->tokenwiser) (2019.12.20)\n","Building wheels for collected packages: jellyfish, yake-github, segtok\n","  Building wheel for jellyfish (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for jellyfish: filename=jellyfish-0.8.9-cp37-cp37m-linux_x86_64.whl size=73222 sha256=241225aa600ae9084d1fb80bbf824a43dcc5229d4295e1d2aa2eb1fc90ba8bf6\n","  Stored in directory: /root/.cache/pip/wheels/32/a9/ef/5d8742e72deaf0d1de327a180d008c2c0299367581800ea73f\n","  Building wheel for yake-github (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for yake-github: filename=yake_github-0.4.0-py2.py3-none-any.whl size=56627 sha256=73b3fc41bc6b4c1e0c469fd80a5cdaeb31700059cd4a9cdce5e1b7361ff04bac\n","  Stored in directory: /root/.cache/pip/wheels/26/55/0e/edbca8d3acb7fd3b22149e8940c5d003ec8d2ee26671da6fdf\n","  Building wheel for segtok (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for segtok: filename=segtok-1.5.10-py3-none-any.whl size=25030 sha256=8f7ceb81edfc77a966116cf6ceec6a2c1e528f22d2851bb027e1ab203adce62a\n","  Stored in directory: /root/.cache/pip/wheels/67/b7/d0/a121106e61339eee5ed083bc230b1c8dc422c49a5a28c2addd\n","Successfully built jellyfish yake-github segtok\n","Installing collected packages: segtok, jellyfish, yake-github, vowpalwabbit, sentencepiece, PyYAML, tokenwiser\n","  Attempting uninstall: PyYAML\n","    Found existing installation: PyYAML 3.13\n","    Uninstalling PyYAML-3.13:\n","      Successfully uninstalled PyYAML-3.13\n","Successfully installed PyYAML-6.0 jellyfish-0.8.9 segtok-1.5.10 sentencepiece-0.1.96 tokenwiser-0.1.7 vowpalwabbit-8.11.0 yake-github-0.4.0\n"]}]},{"cell_type":"code","metadata":{"id":"hap4Oh5l2hb2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637610070002,"user_tz":300,"elapsed":33539,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"92b74d51-11e5-4bb7-8eb4-f61e3b3d9795"},"source":["# imports\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","\n","# text imports\n","import spacy\n","from spacy import cli\n","from spacytextblob.spacytextblob import SpacyTextBlob\n","import textdescriptives as td\n","import tokenwiser\n","\n","from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer  \n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.pipeline import Pipeline\n","import nltk\n","from nltk.corpus import stopwords\n","nltk.download('stopwords')\n","nltk.download('punkt')\n","\n","import gensim\n","\n","from afinn import Afinn\n","from newspaper import Article\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]}]},{"cell_type":"code","metadata":{"id":"6giVENMf2hgE"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WiTrz7hhafGg"},"source":["##################################### WARMUP Exercise\n","##################################### \n","## there is a file located below: \n","##     https://storage.googleapis.com/qst-datasets/subtitles/Shrek-2001.srt\n","## there is also some started code below\n","## calculate the sentiment over the course of the movie script (Shrek)\n","## plot the sentiment arc over the movie\n","##\n","## Some started code has been provided to you"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AXH25lavcpS1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637610375733,"user_tz":300,"elapsed":417,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"b4744085-ae90-4cc0-feb4-a2af0e633f53"},"source":["# 0. get the file - the file in the browser will auto download\n","#    just make sure you have the file in your working directory\n","\n","# or if on colab\n","! wget https://storage.googleapis.com/qst-datasets/subtitles/Shrek-2001.srt"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-11-22 19:46:15--  https://storage.googleapis.com/qst-datasets/subtitles/Shrek-2001.srt\n","Resolving storage.googleapis.com (storage.googleapis.com)... 173.194.193.128, 173.194.197.128, 64.233.191.128, ...\n","Connecting to storage.googleapis.com (storage.googleapis.com)|173.194.193.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 86283 (84K) [application/octet-stream]\n","Saving to: ‘Shrek-2001.srt’\n","\n","\rShrek-2001.srt        0%[                    ]       0  --.-KB/s               \rShrek-2001.srt      100%[===================>]  84.26K  --.-KB/s    in 0.001s  \n","\n","2021-11-22 19:46:15 (120 MB/s) - ‘Shrek-2001.srt’ saved [86283/86283]\n","\n"]}]},{"cell_type":"code","metadata":{"id":"2-d1CJKQafKe"},"source":["# 1. get the file and parse\n","\n","import pysrt\n","subs = pysrt.open('Shrek-2001.srt', encoding='iso-8859-1')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aTzQNo024flz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637610412423,"user_tz":300,"elapsed":118,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"88ef4bd5-2105-436f-b24b-ff3a1cc982e7"},"source":["# the first message -- each entry has a text attribute we can use to build our corpus\n","print(subs[0].text)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Once upon a time there\n","was a lovely princess.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OzzpDqmRP2bY","executionInfo":{"status":"ok","timestamp":1637611435459,"user_tz":300,"elapsed":148,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"b55c9667-6cff-489e-8eca-1e2c535d6c6c"},"source":["len(subs)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1097"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"imCuvmJ4afPD"},"source":["# make a corpus (list of texts)\n","corpus = [sub.text for sub in subs]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZorwTuMuo9cK"},"source":["# afinn\n","afinn = Afinn()\n","\n","scores = [afinn.score(doc) for doc in corpus]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mk_j0Rx4QI-_","executionInfo":{"status":"ok","timestamp":1637611518381,"user_tz":300,"elapsed":167,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"5919e04c-5458-44fd-bf52-50ebc77df87a"},"source":["scores[:5]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[3.0, -2.0, 4.0, -5.0, -2.0]"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":142},"id":"xLNHd0YqQNy3","executionInfo":{"status":"ok","timestamp":1637611573165,"user_tz":300,"elapsed":112,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"aa07382e-5327-463a-f098-7cefbb105435"},"source":["# put into a dataframe\n","shrek = pd.DataFrame({'scene':corpus,'sent':scores})\n","\n","shrek.head(3)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>scene</th>\n","      <th>sent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Once upon a time there\\nwas a lovely princess.</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>But she had an enchantment upon her\\nof a fear...</td>\n","      <td>-2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>which could only be broken\\nby Love's first kiss.</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                               scene  sent\n","0     Once upon a time there\\nwas a lovely princess.   3.0\n","1  But she had an enchantment upon her\\nof a fear...  -2.0\n","2  which could only be broken\\nby Love's first kiss.   4.0"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"hYWoUQFvQbHo","executionInfo":{"status":"ok","timestamp":1637611714234,"user_tz":300,"elapsed":623,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"2ffb8894-5ffe-4849-b590-7b8d39b55e0a"},"source":["# line plot\n","sns.lineplot(x=shrek.index, y='sent', data=shrek)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f1eed958290>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"z1MunI7xQNxA","executionInfo":{"status":"ok","timestamp":1637612026751,"user_tz":300,"elapsed":560,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"e2f95508-60a3-46db-9697-697c34406c1e"},"source":["shrek['ma20']=shrek.sent.rolling(20).mean()\n","#rolling function: windowing over the value counts\n","\n","plt.figure(figsize=(10,4))\n","sns.lineplot(x=shrek.index, y='ma20',data=shrek)\n","plt.axhline(y=0, linestyle='--')\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.lines.Line2D at 0x7f1eebe5bc50>"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"7yeFIZwI2hle"},"source":["##################################### Quick Recap - Tokenization\n","##################################### \n","## nltk has built in tokenizers\n","## lets extend what we saw in the context of a sklearn flow\n","\n","from nltk.tokenize import word_tokenize, TweetTokenizer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qLIJG-9m2hoH"},"source":["# a simple corpus\n","\n","corpus = ['Brock has a dog named Bodhi', \n","          '@brocktibert loves to write code in #pydata']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"u54CaI4b2hqJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637612236062,"user_tz":300,"elapsed":101,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"4f2187f3-f767-4409-a756-dd4b0b9c3a39"},"source":["# word tokenizer is basic\n","# this is helpful as a starting point -- we will see some tools want a list of lists, with each entry considered a token\n","[word_tokenize(doc) for doc in corpus]\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[['Brock', 'has', 'a', 'dog', 'named', 'Bodhi'],\n"," ['@', 'brocktibert', 'loves', 'to', 'write', 'code', 'in', '#', 'pydata']]"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"bPrLgYBW2hsB"},"source":["# of course, we could always go to base python\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dNAwriNo5x7P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637612307438,"user_tz":300,"elapsed":148,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"9e3a5f83-92b3-4e02-f63c-2ae30dfdc9de"},"source":["# we could use TweetTokenizer\n","social = TweetTokenizer()\n","\n","[social.tokenize(doc) for doc in corpus]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[['Brock', 'has', 'a', 'dog', 'named', 'Bodhi'],\n"," ['@brocktibert', 'loves', 'to', 'write', 'code', 'in', '#pydata']]"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"3CI5NEE_6B17","colab":{"base_uri":"https://localhost:8080/","height":112},"executionInfo":{"status":"ok","timestamp":1637612457261,"user_tz":300,"elapsed":137,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"54c9b54d-922f-4dd1-bb62-a8dcb0fe67a7"},"source":["# roll it into sklearn\n","\n","def parser(text):\n","  social = TweetTokenizer()\n","  return social.tokenize(text)\n","\n","cv = CountVectorizer(tokenizer=parser)  \n","cv.fit(corpus)\n","\n","dtm = cv.transform(corpus)\n","\n","df = pd.DataFrame(dtm.toarray(), columns=cv.get_feature_names_out())\n","\n","df\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>#pydata</th>\n","      <th>@brocktibert</th>\n","      <th>a</th>\n","      <th>bodhi</th>\n","      <th>brock</th>\n","      <th>code</th>\n","      <th>dog</th>\n","      <th>has</th>\n","      <th>in</th>\n","      <th>loves</th>\n","      <th>named</th>\n","      <th>to</th>\n","      <th>write</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   #pydata  @brocktibert  a  bodhi  brock  ...  in  loves  named  to  write\n","0        0             0  1      1      1  ...   0      0      1   0      0\n","1        1             1  0      0      0  ...   1      1      0   1      1\n","\n","[2 rows x 13 columns]"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"SYeNVrD9pMGA"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uzrqh3cMUsta"},"source":["### Your turn:"]},{"cell_type":"code","metadata":{"id":"39eIp9DdHw0K"},"source":["##################################### Your turn\n","###\n","### tokenize the shrek movie script corpus using word_tokenize from nltk\n","### TIPS:\n","###      try word_tokenize on a single piece of text\n","###      roll your own function to tokenize\n","###      use count vectorizer\n","###      put it back into a dataframe for review --- this isn't usually necessary, but helps with the intuition of what is happening!"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-qqMZTaRUvhk"},"source":["#### Answer:"]},{"cell_type":"code","metadata":{"id":"BgBkZwKCHwtb"},"source":["# rebuild the corpus \n","\n","corpus = [sub.text for sub in subs]\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vhaJf70RIYUr","colab":{"base_uri":"https://localhost:8080/","height":461},"executionInfo":{"status":"ok","timestamp":1637613357575,"user_tz":300,"elapsed":666,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"58bebd4f-7f56-4b83-cd59-0d3e08e87999"},"source":["# the function to be our tokenizer\n","def shrek_tokens(doc):\n","  # we could do all sorts of pre-processing \n","  return word_tokenize(doc)\n","\n","cv = CountVectorizer(tokenizer=shrek_tokens)  \n","cv.fit(corpus)\n","\n","dtm = cv.transform(corpus)\n","\n","shrek_df = pd.DataFrame(dtm.toarray(), columns=cv.get_feature_names_out())\n","\n","shrek_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>!</th>\n","      <th>'</th>\n","      <th>''</th>\n","      <th>'cause</th>\n","      <th>'course</th>\n","      <th>'d</th>\n","      <th>'digged</th>\n","      <th>'ll</th>\n","      <th>'m</th>\n","      <th>'re</th>\n","      <th>'s</th>\n","      <th>'the</th>\n","      <th>'til</th>\n","      <th>'ve</th>\n","      <th>,</th>\n","      <th>-</th>\n","      <th>--</th>\n","      <th>-25</th>\n","      <th>-aah</th>\n","      <th>-ah</th>\n","      <th>-all</th>\n","      <th>-and</th>\n","      <th>-anyone</th>\n","      <th>-are</th>\n","      <th>-as</th>\n","      <th>-back</th>\n","      <th>-but</th>\n","      <th>-by</th>\n","      <th>-can</th>\n","      <th>-come</th>\n","      <th>-dead</th>\n","      <th>-do</th>\n","      <th>-does</th>\n","      <th>-donkey</th>\n","      <th>-dragon</th>\n","      <th>-eat</th>\n","      <th>-every</th>\n","      <th>-example</th>\n","      <th>-fiona</th>\n","      <th>-for</th>\n","      <th>...</th>\n","      <th>window</th>\n","      <th>winner</th>\n","      <th>wipe</th>\n","      <th>wish</th>\n","      <th>witch</th>\n","      <th>with</th>\n","      <th>without</th>\n","      <th>witness</th>\n","      <th>wo</th>\n","      <th>woman</th>\n","      <th>won</th>\n","      <th>wonder</th>\n","      <th>wonderful</th>\n","      <th>wondering</th>\n","      <th>wooden</th>\n","      <th>woods</th>\n","      <th>word</th>\n","      <th>work</th>\n","      <th>worked</th>\n","      <th>world</th>\n","      <th>worried</th>\n","      <th>worse</th>\n","      <th>would</th>\n","      <th>wouldst</th>\n","      <th>wow</th>\n","      <th>wrapped</th>\n","      <th>wrong</th>\n","      <th>wrote</th>\n","      <th>yank</th>\n","      <th>yanking</th>\n","      <th>yeah</th>\n","      <th>years</th>\n","      <th>yes</th>\n","      <th>yesterday</th>\n","      <th>yet</th>\n","      <th>you</th>\n","      <th>young</th>\n","      <th>your</th>\n","      <th>yours</th>\n","      <th>yourself</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1092</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1093</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1094</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1095</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1096</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1097 rows × 1385 columns</p>\n","</div>"],"text/plain":["      !  '  ''  'cause  'course  'd  ...  yet  you  young  your  yours  yourself\n","0     0  0   0       0        0   0  ...    0    0      0     0      0         0\n","1     0  0   0       0        0   0  ...    0    0      0     0      0         0\n","2     0  0   0       0        0   0  ...    0    0      0     0      0         0\n","3     0  0   0       0        0   0  ...    0    0      0     0      0         0\n","4     0  0   0       0        0   0  ...    0    0      0     0      0         0\n","...  .. ..  ..     ...      ...  ..  ...  ...  ...    ...   ...    ...       ...\n","1092  0  0   0       0        0   0  ...    0    0      0     0      0         0\n","1093  0  0   0       0        0   0  ...    0    0      0     0      0         0\n","1094  0  0   0       0        0   0  ...    0    0      0     0      0         0\n","1095  0  0   0       0        0   0  ...    0    0      0     0      0         0\n","1096  0  0   0       0        0   0  ...    0    0      0     0      0         0\n","\n","[1097 rows x 1385 columns]"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","metadata":{"id":"K898fDPJIYQv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637613406481,"user_tz":300,"elapsed":132,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"b7f87a2c-8d9b-4b98-ec0d-82b996f0b994"},"source":["shrek_df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1097, 1385)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"7V4syVr9IYKj"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aYy6N_g_c4ps","executionInfo":{"status":"ok","timestamp":1637614864632,"user_tz":300,"elapsed":109,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"bf89749e-5177-401d-d47e-e45c9421d6e4"},"source":["shrek_tokens('Hello my name is @Brock!')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Hello', 'my', 'name', 'is', '@', 'Brock', '!']"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"YTPT5VM_YP9S"},"source":["### Next "]},{"cell_type":"code","metadata":{"id":"fChG6lNrHwkQ"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2D09cKgq6jH4"},"source":["### The big point here is that a number of tools may look\n","### for our a list of lists, including scikit learn.\n","### I bring this up for spacy, where the parsed doc is an object\n","### but if we have to, we can simply coerce to that format."],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jTpEQwXgpSAC"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_KtNZ-wX89DS"},"source":["##################################### Key Words in Context - Concordance\n","###\n","### powerful tool to look at a set of text (full corpus) and look for\n","### words before/after\n","###\n","### helpful for eda, look for patterns to help support data annotation, etc.\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"auxMcUfV-6xi"},"source":["# get the data -- airline tweets\n","\n","from google.colab import auth\n","auth.authenticate_user()\n","SQL = \"SELECT * from `questrom.datasets.airlines-tweets`\"\n","PROJECT = \"ba-820-wyl\"\n","tweets = pd.read_gbq(SQL, PROJECT)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C0MRaTOx_mUP","colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"status":"ok","timestamp":1637615187097,"user_tz":300,"elapsed":189,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"addd58a0-0587-4108-90e5-125f349ada7f"},"source":["tweets. head(2)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet_id</th>\n","      <th>airline_sentiment</th>\n","      <th>airline_sentiment_confidence</th>\n","      <th>negativereason</th>\n","      <th>negativereason_confidence</th>\n","      <th>airline</th>\n","      <th>airline_sentiment_gold</th>\n","      <th>name</th>\n","      <th>negativereason_gold</th>\n","      <th>retweet_count</th>\n","      <th>text</th>\n","      <th>tweet_coord</th>\n","      <th>tweet_created</th>\n","      <th>tweet_location</th>\n","      <th>user_timezone</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>570264145116819457</td>\n","      <td>positive</td>\n","      <td>1.0</td>\n","      <td>None</td>\n","      <td>NaN</td>\n","      <td>Virgin America</td>\n","      <td>None</td>\n","      <td>DT_Les</td>\n","      <td>None</td>\n","      <td>0</td>\n","      <td>@VirginAmerica I love this graphic. http://t.c...</td>\n","      <td>[40.74804263, -73.99295302]</td>\n","      <td>2015-02-24 08:49:01 -0800</td>\n","      <td>None</td>\n","      <td>None</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>570051381534396416</td>\n","      <td>positive</td>\n","      <td>1.0</td>\n","      <td>None</td>\n","      <td>NaN</td>\n","      <td>Virgin America</td>\n","      <td>None</td>\n","      <td>Nicsplace</td>\n","      <td>None</td>\n","      <td>0</td>\n","      <td>@VirginAmerica Moodlighting is the only way to...</td>\n","      <td>None</td>\n","      <td>2015-02-23 18:43:35 -0800</td>\n","      <td>Central Texas</td>\n","      <td>None</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             tweet_id airline_sentiment  ...  tweet_location user_timezone\n","0  570264145116819457          positive  ...            None          None\n","1  570051381534396416          positive  ...   Central Texas          None\n","\n","[2 rows x 15 columns]"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"kRQQntiD-62c"},"source":["# text -- acts like a big corpus\n","from nltk import Text\n","\n","# get the text into the correct format\n","\n","tweet_text = tweets.text.tolist()\n","# print(len(intents_text))\n","\n","# put into a corpus (as if it were 1 big file, ignoring that we have intents)\n","\n","corpus = \" \".join(tweet_text)\n","\n","# tokenize\n","\n","tokens = nltk.word_tokenize(corpus)\n","# len(tokens)\n","\n","# put the corpus into a Text object.  \n","# some nice features when we consider the corpus a blob of text that lacks \n","# structure like sentences, or by user, etc.  Just the text combined like a book chapter.\n","\n","text = Text(tokens)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TrrwRhSF-65g","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637615365982,"user_tz":300,"elapsed":141,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"08d9e176-0050-4c8f-9f9f-0137adb5c71c"},"source":["# look for the context of words\n","# Key work in context, or concordance\n","\n","## flight / delay / service / baggage / boston\n","text.concordance(\"boston\", width=80, lines=10)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Displaying 10 of 85 matches:\n"," the 90s music blasting at gate in # Boston while waiting for flight to # SanFra\n","ca fly direct from Seattle to NYC or Boston ? @ VirginAmerica That 's classy . @\n","o smooth , safe and fast flights ! # Boston # Houston # LUVSWA http : //t.co/elh\n","s from # Columbus to Oakland & amp ; Boston starting August 2015 # cmh # oak # b\n","r all good now . Going to make it to Boston on time . I 'm actually on your wifi\n","! # PointsMe @ JetBlue flight 462 to Boston delayed due to weather in Tampa ? @ \n","at airline even better ! # jetblue # Boston # westpalmbeach # flybetter @ JetBlu\n"," do . @ JetBlue I see my flight from Boston to Pitts is ok from this afternoon .\n"," thank you ! I know the weather in # Boston is n't great . Everyone 's tired @ J\n","of the playlist ! Thanks ! @ JetBlue Boston gate C12 @ JetBlue will I be charged\n"]}]},{"cell_type":"code","metadata":{"id":"ykBy06mRfd93"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X4Nb-wis-68C"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z0D55aw964Vr"},"source":["##################################### Text Exploratory Descriptive Stats\n","##################################### https://github.com/HLasse/TextDescriptives\n","##\n","## desctriptive stats for a piece of text\n","## plays well with spacy and dataframes\n","## think of this as a way to featurize our text beyond tokenization\n","## depending on our tasks, this could help with downstream classification tasks\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sugSQTNpCmOc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637615478830,"user_tz":300,"elapsed":6303,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"89d2f66e-09c1-437e-b780-5d9e74bb0c80"},"source":["# download the small spacy language model\n","\n","model = \"en_core_web_sm\"\n","cli.download(model)\n","nlp = spacy.load(model)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('en_core_web_sm')\n"]}]},{"cell_type":"markdown","metadata":{"id":"CWfKrFAmDUA8"},"source":["![](https://d33wubrfki0l68.cloudfront.net/3ad0582d97663a1272ffc4ccf09f1c5b335b17e9/7f49c/pipeline-fde48da9b43661abcdf62ab70a546d71.svg)"]},{"cell_type":"code","metadata":{"id":"kqJ-BQXRDdWn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637615671244,"user_tz":300,"elapsed":93,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"6dadb962-7c5f-4c97-90d2-d3966e79e070"},"source":["# what do we have \n","nlp.pipe_names\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['tok2vec', 'tagger', 'parser', 'attribute_ruler', 'lemmatizer', 'ner']"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"A23ZIbzkCmTt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637615707853,"user_tz":300,"elapsed":102,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"9b2731e8-c607-44a4-abde-14f5ca8a781a"},"source":["# lets add additional components\n","\n","nlp.add_pipe(\"spacytextblob\")\n","nlp.add_pipe(\"textdescriptives\") "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<textdescriptives.load_components.TextDescriptives at 0x7f1ee0308250>"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"f8xAg3PmCmW5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637615793441,"user_tz":300,"elapsed":110,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"4a222791-52ef-4f41-952f-10f838e8ed06"},"source":["# review the robust NLP pipeline\n","nlp.pipe_names"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['tok2vec',\n"," 'tagger',\n"," 'parser',\n"," 'attribute_ruler',\n"," 'lemmatizer',\n"," 'ner',\n"," 'spacytextblob',\n"," 'descriptive_stats',\n"," 'readability',\n"," 'dependency_distance',\n"," 'pos_stats',\n"," 'textdescriptives']"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"DyJ0NNezC_Jl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637615816492,"user_tz":300,"elapsed":276,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"b3dda81c-f39e-4234-d1fe-ec49f267c7bf"},"source":["# lets parse our tweets dataset from earlier\n","tweets.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(14640, 15)"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"iCLubt-VD5r0"},"source":["# lets take a sample of 100 to help keep this \"fast\"\n","# worth noting that real datasets and balancing runtimes and performance can be at odds at times\n","\n","docs = nlp.pipe(tweets.text.sample(100, random_state=820))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KA5OXqUfEA8l"},"source":["# extract the summary stats from the tweet docs\n","# every tweet is being run through the nlp pipeline\n","\n","tweets_df= td.extract_df(docs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BWZuFMbnECbw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637615934610,"user_tz":300,"elapsed":3,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"b42dfef2-6c65-44c2-c7db-2057a658edac"},"source":["tweets_df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(100, 45)"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"UQaWScspErVD","colab":{"base_uri":"https://localhost:8080/","height":285},"executionInfo":{"status":"ok","timestamp":1637615953767,"user_tz":300,"elapsed":106,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"ec4b2168-8498-4895-c3b8-1baea3bd7452"},"source":["tweets_df.head(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>token_length_mean</th>\n","      <th>token_length_median</th>\n","      <th>token_length_std</th>\n","      <th>sentence_length_mean</th>\n","      <th>sentence_length_median</th>\n","      <th>sentence_length_std</th>\n","      <th>syllables_per_token_mean</th>\n","      <th>syllables_per_token_median</th>\n","      <th>syllables_per_token_std</th>\n","      <th>n_tokens</th>\n","      <th>n_unique_tokens</th>\n","      <th>proportion_unique_tokens</th>\n","      <th>n_characters</th>\n","      <th>n_sentences</th>\n","      <th>flesch_reading_ease</th>\n","      <th>flesch_kincaid_grade</th>\n","      <th>smog</th>\n","      <th>gunning_fog</th>\n","      <th>automated_readability_index</th>\n","      <th>coleman_liau_index</th>\n","      <th>lix</th>\n","      <th>rix</th>\n","      <th>dependency_distance_mean</th>\n","      <th>dependency_distance_std</th>\n","      <th>prop_adjacent_dependency_relation_mean</th>\n","      <th>prop_adjacent_dependency_relation_std</th>\n","      <th>pos_prop_X</th>\n","      <th>pos_prop_PUNCT</th>\n","      <th>pos_prop_NUM</th>\n","      <th>pos_prop_AUX</th>\n","      <th>pos_prop_PART</th>\n","      <th>pos_prop_VERB</th>\n","      <th>pos_prop_PRON</th>\n","      <th>pos_prop_NOUN</th>\n","      <th>pos_prop_CCONJ</th>\n","      <th>pos_prop_SCONJ</th>\n","      <th>pos_prop_DET</th>\n","      <th>pos_prop_ADJ</th>\n","      <th>pos_prop_PROPN</th>\n","      <th>pos_prop_ADP</th>\n","      <th>pos_prop_ADV</th>\n","      <th>pos_prop_SYM</th>\n","      <th>pos_prop_SPACE</th>\n","      <th>pos_prop_INTJ</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>@AmericanAir ...2/2 doesn't help me.</td>\n","      <td>5.000000</td>\n","      <td>4.0</td>\n","      <td>3.577709</td>\n","      <td>5.0</td>\n","      <td>5.0</td>\n","      <td>0.0</td>\n","      <td>1.400000</td>\n","      <td>1.0</td>\n","      <td>0.800000</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>1.0</td>\n","      <td>32</td>\n","      <td>1</td>\n","      <td>83.320000</td>\n","      <td>2.880000</td>\n","      <td>NaN</td>\n","      <td>10.000000</td>\n","      <td>4.620000</td>\n","      <td>7.680000</td>\n","      <td>25.000000</td>\n","      <td>1.0</td>\n","      <td>1.8750</td>\n","      <td>0.0000</td>\n","      <td>0.375</td>\n","      <td>0.0</td>\n","      <td>0.125</td>\n","      <td>0.250000</td>\n","      <td>0.125</td>\n","      <td>0.125000</td>\n","      <td>0.125</td>\n","      <td>0.125000</td>\n","      <td>0.125000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>@USAirways and if the flight is full?</td>\n","      <td>4.285714</td>\n","      <td>3.0</td>\n","      <td>2.657296</td>\n","      <td>7.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>1.285714</td>\n","      <td>1.0</td>\n","      <td>0.699854</td>\n","      <td>7</td>\n","      <td>7</td>\n","      <td>1.0</td>\n","      <td>31</td>\n","      <td>1</td>\n","      <td>90.958571</td>\n","      <td>2.311429</td>\n","      <td>NaN</td>\n","      <td>8.514286</td>\n","      <td>2.255714</td>\n","      <td>5.171429</td>\n","      <td>21.285714</td>\n","      <td>1.0</td>\n","      <td>1.7500</td>\n","      <td>0.0000</td>\n","      <td>0.500</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.125000</td>\n","      <td>NaN</td>\n","      <td>0.125000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0.250000</td>\n","      <td>0.125000</td>\n","      <td>0.125</td>\n","      <td>0.125000</td>\n","      <td>0.125000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>@SouthwestAir Gate attendant at McCarran C16 (...</td>\n","      <td>4.909091</td>\n","      <td>4.0</td>\n","      <td>3.028787</td>\n","      <td>11.0</td>\n","      <td>11.0</td>\n","      <td>2.0</td>\n","      <td>1.545455</td>\n","      <td>1.0</td>\n","      <td>0.782030</td>\n","      <td>22</td>\n","      <td>22</td>\n","      <td>1.0</td>\n","      <td>112</td>\n","      <td>2</td>\n","      <td>64.924545</td>\n","      <td>6.936364</td>\n","      <td>NaN</td>\n","      <td>11.672727</td>\n","      <td>7.191818</td>\n","      <td>10.374545</td>\n","      <td>33.727273</td>\n","      <td>2.5</td>\n","      <td>2.0125</td>\n","      <td>0.1125</td>\n","      <td>0.500</td>\n","      <td>0.0</td>\n","      <td>NaN</td>\n","      <td>0.192308</td>\n","      <td>NaN</td>\n","      <td>0.038462</td>\n","      <td>NaN</td>\n","      <td>0.038462</td>\n","      <td>0.038462</td>\n","      <td>0.115385</td>\n","      <td>0.038462</td>\n","      <td>NaN</td>\n","      <td>0.038462</td>\n","      <td>0.076923</td>\n","      <td>0.192308</td>\n","      <td>0.192308</td>\n","      <td>0.038462</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                text  ...  pos_prop_INTJ\n","0               @AmericanAir ...2/2 doesn't help me.  ...            NaN\n","1              @USAirways and if the flight is full?  ...            NaN\n","2  @SouthwestAir Gate attendant at McCarran C16 (...  ...            NaN\n","\n","[3 rows x 45 columns]"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MH-T4SwRh-Ul","executionInfo":{"status":"ok","timestamp":1637616206749,"user_tz":300,"elapsed":174,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"a3dac9cd-f3ff-4e18-8261-2d93f590d4b8"},"source":["# average grade\n","\n","tweets_df.gunning_fog.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    100.000000\n","mean       8.235409\n","std        3.923389\n","min        0.800000\n","25%        5.657143\n","50%        8.133333\n","75%       10.942944\n","max       20.584615\n","Name: gunning_fog, dtype: float64"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"BhEiqyWfh-Sq","executionInfo":{"status":"ok","timestamp":1637616267420,"user_tz":300,"elapsed":336,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"924e00e6-e6fd-4a42-cbd0-a98f3eb5957a"},"source":["#look at agreement\n","sns.scatterplot(data=tweets_df, x='gunning_fog', y='coleman_liau_index')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f1ede175a10>"]},"metadata":{},"execution_count":54},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"dtC0ND35h0l7"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"62DTHfVBEvFQ"},"source":["# review the docs -- summarizes stats for tokens and sentences, but also some complexity estimates\n","# https://hlasse.github.io/TextDescriptives/readability.html#\n","# whats interesting about this is these could be features depending on your task\n","# news or clickbait\n","# valid news or social post\n","# news source (tabloid versus the NYT or BBC)\n","# I have even seen readability considered for SEO/content reviews on websites\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oajGtMhSE_6e"},"source":["# what is the average grade using gunning_fog\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IV0nFWPWGMPa"},"source":["# researchers/linguists try to quantify complexity/grade level\n","# take two approaches, see if there is relative agreement\n","# variance tends to increase > 10\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DjCfQFGy1wHq"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"itCBsCivijuq"},"source":["#### Your turn:"]},{"cell_type":"code","metadata":{"id":"4dza1TwbGrgj"},"source":["##################################### Your turn\n","##\n","\n","## use article to grab entries\n","## source, and generate a pandas dataframe with readability comparisons \n","## establish concepts as features for downstream tasks, potentially\n","\n","URL1 = \"https://www.bbc.com/culture/article/20211117-why-u2s-one-is-the-ultimate-anthem\"\n","URL2 = \"https://www.theonion.com/dollar-dangling-from-fishing-line-sure-does-look-entici-1848019332\"\n","URL3 = \"https://www.nytimes.com/2021/11/20/world/china-congo-cobalt-explained.html\"\n","\n","# general flow\n","# article = Article()\n","# download and then parse methods on the article\n","# use the .text attribute\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s0ZaGIvdksMg"},"source":["### Answer:"]},{"cell_type":"code","metadata":{"id":"3YBnldlScBjm"},"source":[" articles = []\n","\n"," article = Article(URL1)\n"," article.download(); article.parse();\n"," articles.append(article.text)\n","\n"," article = Article(URL2)\n"," article.download(); article.parse();\n"," articles.append(article.text)\n","\n"," article = Article(URL3)\n"," article.download(); article.parse();\n"," articles.append(article.text)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JA0EHtXClChS","executionInfo":{"status":"ok","timestamp":1637616989294,"user_tz":300,"elapsed":4,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"3bcf664e-727f-4c77-cd39-e7f009c193f5"},"source":["articles"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['The song continued to evolve during the Zoo TV tour, as Bono introduced an extra verse, which came to him out of nowhere one night in North Carolina in March 1992. Known to fans as Hear Us Coming, it asks God a series of questions, ending with, \"Do you hear us scratching/ Will you make us crawl?\" \"It allows a chance for anger and the focus of that wrath is best kept for religion itself,\" Bono says. \"In the Hebrew Bible, this level of spleen is allowed in the imprecatory psalms: King David shouting at God.\" He once said that this turned One into \"sort of a protest song against God, from a believer\": yet another take on a father and a son.\\n\\nIn January 1993, Michael Stipe and Mike Mills of REM teamed up with Mullen and Clayton under the name Automatic Baby to play One at an MTV Rock the Vote concert to celebrate Bill Clinton\\'s inauguration. Bill Flanagan describes the scene in his fly-on-the-wall book U2 at the End of the World: \"When Stipe sings, \\'We\\'re one but we\\'re not the same, we get to carry each other\\', he is using the song – however hopelessly – to plead a case and make a promise to this whole country. That\\'s a lot of weight for a song to carry! One is a pretty strong song.\" (Stipe actually changed \"get to\" to \"got to\" halfway through but the moment vindicated it.)\\n\\nThe song\\'s fluidity is a thread running through Flanagan\\'s book: \"One seems to have an infinite capacity to open up, and U2 shows no inclination to tie it down.\" In Germany in May 1993, amid a political storm about immigration, Bono dedicated One to \"the immigrants to Deutschland\". In July of that year, it followed a satellite-linked conversation with a friend of the band in the besieged Bosnian capital of Sarajevo. Bono told journalist Niall Stokes how, in certain contexts, One \"suddenly becomes what it is about that night.\" It is a sturdy, inviting vessel for whatever emotions are circulating in the room, or the country, for there is always conflict and the hope of resolution. \"I have been reduced to a puddle by it myself in the most differentiated environments,\" Bono says.\\n\\nEdge\\'s favourite memory of performing One is from Madison Square Garden in October 2001: U2\\'s first New York concert after 9/11. \"After that show, all of the first responders who were present invaded the stage and it became this kind of group therapy session,\" he recalls. \"It was a really humbling thing just to be present as a witness, leave alone being the catalyst for it. It was unforgettable.\"\\n\\n\\'An unfinished song\\'\\n\\nBono initially resisted naming the ONE Campaign, the non-profit he co-founded in 2004 to fight extreme poverty and preventable disease, after this \"very bitter song\". Nonetheless, it has become a popular choice for U2\\'s benefit concert appearances: for Bosnia in 1995, for Tibet in 1997, for Nelson Mandela in 2003, and at Live 8 in 2005. That same year, U2 performed it at a fundraiser for victims of Hurricane Katrina, bringing Mary J Blige on stage for the second verse. While learning the words two years earlier for a tribute to Bono, she had begun thinking about 9/11 and its aftermath. Later, it came to encompass the human catastrophe of Katrina. For her, the lines \"Love is the temple, love the higher law/ You ask me to enter and then you make me crawl\" represented the broken promise of America. \"The United States say they care about us and stuff like that, and we got to go through so much,\" she told journalist Gavin Martin.\\n\\n\"Mary J Blige brought the song places I couldn\\'t possibly have been or understood,\" Bono says. \"I don\\'t know exactly where she went, or the names she put on the places, or the problems she was trying to solve with her interpretation, but I felt them so strongly.\"\\n\\n\"She made it her own in a way that is kind of amazing,\" Edge agrees. \"Same lyrics, same melody, but it felt like it was a different song when she sang it.\"',\n"," 'BRATTLEBORO, VT—Rubbing his hands together in what appeared to be more anticipation than he could contain, local man Dennis Kaili stated Tuesday that the dollar bill currently dangling from a fishing line right there along the path he was walking sure did look enticing. “By gosh, that’s one good-lookin’ buckaroo, ain’t it?” said Kaili, a wide grin reportedly spreading across his face as he took in the sight of the dollar, a hook, and the fishing line, which disappeared into a row of bushes. “And it’s ripe for the pickin’, too! If I jump on it real fast, I’m sure I could grab it. Don’t look like there’s anyone ’round gonna beat me to it. Yup, that dollar’s as good as mine!” At press time, sources confirmed Kaili was being pulled along the sidewalk with the hook in his cheek and still struggling to get the dollar bill off the line and into his pocket.',\n"," 'The five biggest Chinese mining companies in Congo that focus on cobalt and copper mining also had lines of credit from Chinese state-backed banks totaling $124 billion.\\n\\nRace to the Future Players in the clean energy revolution are increasingly caught in a cycle of exploitation and greed over resources. At the center of it is the quest for a prized metal: cobalt. Global Rivalries: The competition for cobalt, used in electric cars, has set off a power struggle between China and the United States in Congo. How the U.S. Lost Ground to China: Americans failed to safeguard decades of investments in Congo, essentially surrendering resources to China. Key Takeaways: The Times dispatched reporters across three continents drawn into the fight. Here are some findings from their investigation. Hunter Biden’s Business Ties: A firm co-founded by the president’s son facilitated the sale of a cobalt mine in Congo to a Chinese company. Here are the deal’s details. How Electric Car Batteries Are Made: It all starts with prized minerals and metals like cobalt.\\n\\n\\n\\nOne of the government-backed companies, China Molybdenum, which bought the two American-owned reserves, described itself to The Times as “a pure business entity” traded on two stock exchanges. Records show 25 percent of the company is owned by a local government in China.\\n\\nCongolese officials accuse Chinese mining companies of cheating the country of promised revenues and improvements.\\n\\nThe Congolese are reviewing past mining contracts with financial help from the American government, part of a broader anti-corruption effort. They are also examining whether Chinese promises to build roads, schools, hospitals and other infrastructure were kept.\\n\\nSeparately, Chinese Molybdenum is being accused of withholding payments to the government at its Tenke Fungurume cobalt and copper mine. The company said it had done nothing wrong, and questioned if there was an organized effort to undermine it.\\n\\nChina has an idiom that goes something like: “Where there is a will to condemn, evidence will follow,” a spokesman said. “Vaguely I feel that we may be caught in the gaming of greater powers.”\\n\\nThe purchase by the Chinese of an American-owned mine was facilitated by a firm with Hunter Biden on the board.\\n\\nTenke Fungurume, one of the biggest cobalt mines in the world, was controlled by an American company, Freeport-McMoRan. Then it was sold in 2016 in a series of transactions worth $3.8 billion to China Molybdenum. The sale was aided by a Chinese private equity firm that bought out a minority owner in the mine.\\n\\nA founding board member of the private equity firm was Hunter Biden, son of the American president. A Washington company that had been controlled by Mr. Biden remains a shareholder in the firm, according to Chinese financial documents. Chris Clark, a lawyer for Mr. Biden, said his client “no longer holds any interest, directly or indirectly,” in the Washington and Chinese firms. Filings in China show he is no longer a board member of the Chinese firm. Mr. Biden did not respond to requests for comment.']"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","metadata":{"id":"B-hn5KlMcBgn"},"source":["docs = nlp.pipe(articles)\n","\n","# extractive summaries\n","articles_df = td.extract_df(docs, metrics='readability')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hNSjX-fPcBdD","colab":{"base_uri":"https://localhost:8080/","height":319},"executionInfo":{"status":"ok","timestamp":1637617046030,"user_tz":300,"elapsed":110,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"524027b2-ded5-4c7c-d245-81fc95ff4977"},"source":["articles_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>flesch_reading_ease</th>\n","      <th>flesch_kincaid_grade</th>\n","      <th>smog</th>\n","      <th>gunning_fog</th>\n","      <th>automated_readability_index</th>\n","      <th>coleman_liau_index</th>\n","      <th>lix</th>\n","      <th>rix</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>The song continued to evolve during the Zoo TV...</td>\n","      <td>75.029716</td>\n","      <td>8.259602</td>\n","      <td>10.052491</td>\n","      <td>11.470455</td>\n","      <td>9.741378</td>\n","      <td>8.036648</td>\n","      <td>40.039773</td>\n","      <td>3.96875</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>BRATTLEBORO, VT—Rubbing his hands together in ...</td>\n","      <td>78.313636</td>\n","      <td>8.191948</td>\n","      <td>8.418075</td>\n","      <td>10.883117</td>\n","      <td>9.709532</td>\n","      <td>7.105697</td>\n","      <td>36.298701</td>\n","      <td>3.00000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>The five biggest Chinese mining companies in C...</td>\n","      <td>69.606379</td>\n","      <td>8.022337</td>\n","      <td>10.924579</td>\n","      <td>11.337931</td>\n","      <td>10.353046</td>\n","      <td>10.998084</td>\n","      <td>43.670498</td>\n","      <td>4.62069</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                text  ...      rix\n","0  The song continued to evolve during the Zoo TV...  ...  3.96875\n","1  BRATTLEBORO, VT—Rubbing his hands together in ...  ...  3.00000\n","2  The five biggest Chinese mining companies in C...  ...  4.62069\n","\n","[3 rows x 9 columns]"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","metadata":{"id":"2U-9_PsTcX5X"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kJxDEclj3ShQ"},"source":["## FUN PRACTICE AND THOUGHT EXERCISE - SHREK MOVIE TRANSCRIPT\n","## You could practice and think about readbility by using the Shrek transcript\n","## lets think about the reading model:  https://en.wikipedia.org/wiki/Coleman%E2%80%93Liau_index\n","## are we supplying a proper dataset if we use the Shrek movie transcript?  does it make sense directionally, use as index and not absolutes?\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NkV_lBJ9eveR"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v3-Nzf9ulyTU"},"source":[" ###  Intent Classification within spacy:"]},{"cell_type":"code","metadata":{"id":"YRLhOMpY54uY"},"source":["##################################### Intent Classification within spacy\n","## I mentioned everything will start to show a concept of frameowrks\n","##\n","## we already saw spacy has pipelines\n","## we can also extend the objects, in this case, the Doc object\n","## we will set an extension on a Doc that will apply the \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Tat3nEJUBRN-"},"source":["# tokenwiser is a fantastic abstraction layer for some pre-processing tasks\n","# it also created the bridge for us to plug sklearn models into spacy\n","# as a doc extension\n","\n","from tokenwiser.extension import sklearn_method"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kijlP2PV1V1m"},"source":["# get the data training dataset for sms spam\n","\n","# SQL = \"SELECT * from `questrom.SMSspam.train`\"\n","SQL = \"SELECT * from `questrom.SMSspam.train`\"\n","PROJECT = \"ba-820-wyl\"\n","train = pd.read_gbq(SQL, PROJECT)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZLokHfgm3shz","colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1637617294510,"user_tz":300,"elapsed":154,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"60165925-5da1-4411-abd9-9dcc2a8a747d"},"source":["# first few rows\n","train.tail(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>message</th>\n","      <th>label</th>\n","      <th>id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3832</th>\n","      <td>ASKED 3MOBILE IF 0870 CHATLINES INCLU IN FREE ...</td>\n","      <td>spam</td>\n","      <td>4240</td>\n","    </tr>\n","    <tr>\n","      <th>3833</th>\n","      <td>Had your contract mobile 11 Mnths? Latest Moto...</td>\n","      <td>spam</td>\n","      <td>4245</td>\n","    </tr>\n","    <tr>\n","      <th>3834</th>\n","      <td>This is the 2nd time we have tried 2 contact u...</td>\n","      <td>spam</td>\n","      <td>4259</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                message label    id\n","3832  ASKED 3MOBILE IF 0870 CHATLINES INCLU IN FREE ...  spam  4240\n","3833  Had your contract mobile 11 Mnths? Latest Moto...  spam  4245\n","3834  This is the 2nd time we have tried 2 contact u...  spam  4259"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","metadata":{"id":"4_KBJr2dyxIN"},"source":["# lets build a pipeline from sklearn to classify the messages\n","\n","steps = [(\"cv\", CountVectorizer()), \n","         (\"clf\", DecisionTreeClassifier(max_depth=7, \n","                                        min_samples_leaf=15, \n","                                        min_samples_split=30, \n","                                        random_state=820))]\n","\n","pipe = Pipeline(steps)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JlVsfSdOz9BM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637617473746,"user_tz":300,"elapsed":369,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"033e5026-5dac-420f-85d1-99eff450f0d2"},"source":["# fit the model - use spacy to \n","pipe.fit(train.message, train.label)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('cv', CountVectorizer()),\n","                ('clf',\n","                 DecisionTreeClassifier(max_depth=7, min_samples_leaf=15,\n","                                        min_samples_split=30,\n","                                        random_state=820))])"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"P9ddBG5N38-P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637617574958,"user_tz":300,"elapsed":263,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"c8b82cb0-a900-4b65-d033-bfb107a3fc3a"},"source":["# play with the model\n","sms = 'Hey, how are ya?!?!'\n","pipe.predict([sms])\n","pipe.predict_proba([sms])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.97609181, 0.02390819]])"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"kDR3ljod4IJ-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637617583856,"user_tz":300,"elapsed":110,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"151aa8db-fbf7-4ce3-cae1-7783f1342574"},"source":["# review the classes\n","pipe.classes_\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['ham', 'spam'], dtype=object)"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"N5mS9Uqh48e6"},"source":["# lets set this as a property\n","\n","from spacy.tokens import Doc\n","Doc.set_extension(\"spam\", getter=sklearn_method(pipe))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ak46OxNihT-a","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637617677299,"user_tz":300,"elapsed":110,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"8f9fafd2-5742-442e-fc42-1b172147e5ea"},"source":["# lets play around\n","doc = nlp(sms)\n","doc._.spam"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'ham': 0.9760918074593561, 'spam': 0.023908192540643927}"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"sBKDOIb_h8M0"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xCMsNKtDiNsr"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V_no3aiSieMe"},"source":["# we could always roll our own without tokenwiser attribute \n","\n","def spam_cat(doc):\n","  label = pipe.predict([doc.text[0]])\n","  label = str(label[0])\n","  return label\n","\n","Doc.set_extension(\"label\", getter=spam_cat)\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E_W58BZNkA4b","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1637617835699,"user_tz":300,"elapsed":129,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"b8d08ad0-2046-4ba9-8cca-8084198fb848"},"source":["doc = nlp(sms)\n","doc._.label"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'ham'"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","metadata":{"id":"cR8XkTQCq5Ql"},"source":["##################################### Lets zoom out\n","##\n","## we are fitting a classifier with python\n","## we are showing that we COULD include it in a spacy pipeline.  This is helpful is spacy is at the core of a stack\n","## spacy is very powerful, as we will continue to use spacy for NER tasks and embeddings\n","## \n","## Classification has a broad range of applications\n","## news categories for content sorting\n","## customer service requests\n","## chatbots (what is the user asking for)    <------ Rasa, in part, uses spacy to help build chatbots\n","## topic classification   <-------- There is topic modeling, but I have always felt like ML classifiation task are better for all sorts of problems\n","##   --- we will see a form of this when we jump into embedding representations of text\n","##\n","## "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nFMGs745kD2X"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qGW-v2mbmAGW"},"source":["##################################### a domain-specific ML approach\n","## \n","## Work in your capstone groups - you should be working in teams, not by yourself\n","##\n","## When it comes to things like sentiment, sometimes its better to annotate and build our own classifier\n","## \n","## What does this mean?\n","## 1. collect a dataset\n","## 2. annotate the data with our own business rules\n","##  --------> Label studio?\n","## 3. we can use some of the tools above \n","## ---------> generate a score, define a threshold, give labels\n","## ---------> fit a model on labels\n","## ---------> review, iterate, review, iterate\n","##\n","## Why build our own?\n","## \n","## - out of the box generalize (thats a theme you have heard me say)\n","## - domain specific words may not be captured\n","## - also, sarcasm is hard to detect even with modifier approaches like TextBlob or Vader\n","##\n","## \n","## there is an airlines tweets dataset on biq query\n","## bring in questrom.datasets.airlines-tweets\n","## just the tweet_id, airline_sentiment, airline, and text columns\n","##\n","## NOTES:  You can use any model you like\n","##         You DO NOT have to use spacy, just highligting that these tools can be play well together\n","## \n","## after you make predictions, are there any differences by airline?\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pIdQnJJlsSTG"},"source":[""],"execution_count":null,"outputs":[]}]}