{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Exam 1 cheetsheet","provenance":[],"authorship_tag":"ABX9TyM60tbxtz3QBymSLgICdctR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"QwWGf89ZeA4T"},"source":["# imports - usual suspects\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# for distance and h-clustering\n","#scientific python laborary \n","from scipy.cluster.hierarchy import linkage, dendrogram, fcluster\n","from scipy.spatial.distance import pdist, squareform\n","\n","# imports\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# what we need for today\n","from sklearn.cluster import KMeans, DBSCAN\n","from sklearn.neighbors import NearestNeighbors\n","from scipy.cluster.hierarchy import linkage, dendrogram\n","from scipy.cluster.hierarchy import fcluster\n","\n","from sklearn import metrics \n","from sklearn.datasets import make_blobs\n","from sklearn.preprocessing import StandardScaler\n","! pip install scikit-plot\n","\n","import scikitplot as skplt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V9TxOHh426g0"},"source":["# import dataset\n","from google.colab import auth\n","auth.authenticate_user()\n","SQL = \"SELECT * from `questrom.datasets.judges`\"\n","PROJECT = \"ba-820-wyl\"\n","judges = pd.read_gbq(SQL, PROJECT)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T_vpqEcweY0V"},"source":["####对于unique和missing value 的处理：\n"]},{"cell_type":"code","metadata":{"id":"wwrTU2WceEb9"},"source":["#unique \n","dupes=groceries.duplicated()\n","dupes.sum()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GfCnbAlxeEj4"},"source":["#missing values\n","tx.info()\n","pd.options.display.max_rows=200\n","tx.info(verbose=True)\n","tx.isna().sum()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WCHE8TYqeEoH"},"source":["#replace\n","tx.fillna(False,inplace=True)\n","tx.isna().sum().sum()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5u7aq2MikHkV"},"source":["###Hclust - hierarchical cluster"]},{"cell_type":"code","metadata":{"id":"MUhTHY2weEqE"},"source":["# numpy array of the datase && measuring distance\n","\n","# Start with our first\n","d1=pdist(a)\n","\n","# squareform\n","squareform(d1)\n","\n","# manhattan\n","cb=pdist(a,metric='cityblock')\n","squareform(cb)\n","\n","# cosine\n","cs=pdist(a,metric='cosine')\n","squareform(cs)\n","\n","# euclidean\n","pairwise_distances(a_df,metric='euclidean')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KplI4COMeEsK"},"source":["## for hcluster:\n","\n","# np array of dataset \n","\n","cdist =pdist(cars.values)\n","cars.head(3)\n","\n","# visualize the dataset \n","sns.heatmap(squareform(cdist),cmap='Reds')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CdpLsW8HeEwW"},"source":["# lets build out first cluster solution !\n","# by default, single linkage///// METHODS = ['single', 'complete', 'average', 'ward']\n","hc1=linkage(cdist) \n","\n","# what do we have\n","type(hc1)  # np array\n","hc1.shape  #(31,4)\n","len(cars)  #32\n","\n","hc1 # the third column (distance) is the most important column we have\n","\n","# lets create out first dendrogram:\n","dendrogram(hc1,labels=cars.index)\n","plt.show()\n","\n","# tweak & draw a line at level 80:\n","DIST = 80\n","plt.figure(figsize=(5,6))\n","dendrogram(hc1, \n","            labels = cars.index,\n","            orientation = \"left\", \n","            color_threshold = DIST)\n","plt.axvline(x=DIST, c='grey', lw=1, linestyle='dashed')\n","plt.show()\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4AT5cA4TmkRx"},"source":["2 ways of fcluster"]},{"cell_type":"code","metadata":{"id":"q4-SUbrseEyc"},"source":["# fcluster - - identify the distance we want\n","fcluster(hc1,80, criterion='distance') #np array  \n","## 80 means we cut the pic on 80 \n","c1 =fcluster(hc1,80, criterion='distance')\n","cars['cluster1']= c1 # add a new column to dataset \n","cars.head(3) # a new column will be on the right - cluster1\n","\n","\n","# fcluster - - identify the number of clusters we want\n","c2 = fcluster(hc1, 2, criterion='maxclust')\n","## 2 means we want 2 clusters\n","c2\n","cars['cluster2']= c2 # add a new column - cluster2\n","cars.head(3)  # a new column will be on the right - cluster2\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_rZWecRymt6b"},"source":["### K-Means:"]},{"cell_type":"code","metadata":{"id":"aMXKFV1Lm1bt"},"source":["## fit a cluster solution with 5 clusters\n","## apply it back it to the dataset \n","## do a quick profile/persona of the clusters"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UBucTn-Bm15l"},"source":["# dataset: judges\n","k5=KMeans(5)\n","k5.fit(judges)\n","labs2=k5.predict(judges)\n","labs2\n","\n","\n","# number of iterations:\n","k5.n_iter_\n","\n","# create a new column on the original dataset called 'kn'\n","judges['k5']=labs2\n","judges.sample(3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E5E6iymHyDpd"},"source":["# do a profile:\n","k5_profile=judges.groupby('k5').mean()\n","k5_profile.T\n","\n","# heatmap\n","sns.heatmap(k5_profile,cmap='rainbow')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bcFQ8PI1m10E"},"source":["# inertia value for k5/k3\n","k3.inertia_ #124\n","k5.inertia_ #73\n","# because k5's inertia value < k3's\n","# so we pick k5 "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5GkLR88EyvsR"},"source":["To draw a K-means picture:"]},{"cell_type":"code","metadata":{"id":"9xVl8qlwm1yJ"},"source":["## fit range of cluster solutions for 2 to 10, k=2, k=3\n","## save out a way to evaluate the slotuions based on the inertia of the fit\n","\n","# judge is our dataset \n","\n","j=judges.copy()\n","Krange=range(2,11)\n","\n","# a container\n","ss=[]\n","\n","for k in Krange:\n","  km=KMeans(k)\n","  lab=km.fit_predict(j)\n","  ss.append(km.inertia_)\n","\n","sns.lineplot(Krange,ss)\n","plt.show() "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"a3t-9G7Y08tE"},"source":["To draw a silhouette plot:"]},{"cell_type":"code","metadata":{"id":"3AZdJR_vzK9q"},"source":["##!!! important !!!\n","#DELETE the new column to draw silhouette plot! 不然会报错！\n","del j['k5\n","\n","\n","# silo score (fit and the samples) comes from the metrics module\n","k5.inertia_\n","\n","\n","silo_overall=metrics.silhouette_score(j,k5.predict(j))\n","silo_overall\n","\n","\n","# samples\n","silo_samples=metrics.silhouette_samples(j,k5.predict(j))\n","silo_samples.shape\n","\n","# plotting\n","skplt.metrics.plot_silhouette(j,k5.predict(j),figsize=(7,7))\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aLqkCvHW0f50"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yNyd3FDf0g-D"},"source":["# 3. use kmeans to fit a 5 cluster solution\n","# 4. generate the silohouette plot for the solution\n","# 5. create a boxplot of the column carat by cluster label (one boxplot for each cluster)\n","\n","\n","\n","#standard scaler\n","\n","scaler=StandardScaler()\n","scaler.fit(ju_num)\n","\n","ju_scaled=scaler.transform(ju_num)\n","\n","k5=KMeans(5)\n","k5_labs=k5.fit_predict(ju_scaled)\n","\n","# next\n","judges['k5']=k5_labs\n","\n","# next\n","sns.boxplot(data=judges,x='k5',y='carat')\n","plt.show()\n","\n","# next \n","# silhouette plot\n","skplt.metrics.plot_silhouette(ju_scaled,k5_labs)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WRUhVm0H0I1j"},"source":["### PCA:"]},{"cell_type":"code","metadata":{"id":"GwVz4I7e0Ldb"},"source":["# import dataset\n","from google.colab import auth\n","auth.authenticate_user()\n","SQL = \"SELECT * from `questrom.datasets.judges`\"\n","PROJECT = \"ba-820-wyl\"\n","judges = pd.read_gbq(SQL, PROJECT)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KzS1AmWi0Mh4"},"source":["# set a index & delete non-numerical column\n","judges.index=judges.judge\n","del judges['judge']\n","\n","# correlation matrix\n","jcor=judges.corr()\n","sns.heatmap(jcor,center=0)\n","plt.show()\n","\n","# fit our first PCA model\n","pca = PCA()\n","pcs = pca.fit_transform(judges)\n","\n","type(pcs)\n","pcs.shape\n","pcs[:5,:5]\n","\n","# variance explanation ratio - -pc explained variance\n","varexp= pca.explained_variance_ratio_\n","type(varexp)\n","\n","### 3 types of plots:\n","\n","# plot the variance explained the PC\n","plt.title('Explained Variance per PC')\n","sns.lineplot(range(1,len(varexp)+1),varexp)\n","plt.show()\n","\n","\n","# cumulative running percentage\n","plt.title('Explained Variance per PC')\n","sns.lineplot(range(1,len(varexp)+1),np.cumsum(varexp))\n","plt.axhline(.95)\n","plt.show()\n","\n","\n","# explained variance - -eigenvalue(特征值)\n","explvar = pca.explained_variance_\n","plt.title('Eigenvalue')\n","sns.lineplot(range(1,len(explvar)+1),explvar)\n","plt.axhline(1)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9iwWNfn02Z6A"},"source":["如果要画一个pc1 和 pc2 的scatter plot:"]},{"cell_type":"code","metadata":{"id":"3MmKAsZ50Mf4"},"source":["###### judges\n","pca.n_components_\n","COLS=['PC' + str(i) for i in range(1,len(varexp)+1)]\n","COLS\n","\n","comps = pca.components_\n","\n","loadings=pd.DataFrame(comps.T,columns=COLS,index=judges.columns)\n","\n","# heatmap:\n","sns.heatmap(loadings,cmap='vlag')\n","plt.show()\n","\n","# scatter plot:\n","j =pd.DataFrame(pcs[:,:2],columns=['pc1','pc2'],index=judges.index)\n","\n","sns.scatterplot(data=j,x='pc1',y='pc2')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I_W5F1Ub0Mdu"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XlqYpG500Mbx"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J9ycyWg20MZr"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yofkH7_K0MXb"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7ZiZcYxi0MVe"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"r7j2V-Nl0MTi"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hk0cvepb0MRm"},"source":[""],"execution_count":null,"outputs":[]}]}