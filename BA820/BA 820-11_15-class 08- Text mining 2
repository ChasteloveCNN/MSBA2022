{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BA 820-11/15-class 08- Text mining 2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"ToVw6Z31GGpD"},"source":["# LEARNING GOALS\n","#\n","#                 - tokenization deeper dive\n","#                 - reinforce text prep and tokenization options\n","#                 - Cluster documents setup"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AS1V2mqiGGni"},"source":["\n","# installs\n","! pip install newspaper3k  # allow u to download from website\n","! pip install spacy # really powerful\n","! pip install nltk\n","! pip install -U scikit-learn\n","! pip install scikit-plot\n","! pip install umap-learn\n","! pip install tokenwiser  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o4sihOs1GGlr"},"source":["# imports\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import scikitplot as skplot\n","\n","import re\n","\n","# new imports\n","import spacy\n","from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer,TfidfVectorizer  \n","import nltk\n","from tokenwiser.textprep import HyphenTextPrep\n","\n","from newspaper import Article"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vd6EmvBpLH2s"},"source":["## Exercise:\n"]},{"cell_type":"code","metadata":{"id":"f5_Kd9eeI1qE"},"source":["from google.colab import auth\n","auth.authenticate_user()\n","SQL = \"SELECT * from `questrom.SMSspam.train`\"\n","PROJECT = \"ba-820-wyl\"\n","smstrain = pd.read_gbq(SQL, PROJECT)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gHIQtopbKWBh","executionInfo":{"status":"ok","timestamp":1637006325809,"user_tz":300,"elapsed":384,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"046c5b0d-f073-4322-c17c-cc7c53712718"},"source":["smstrain.head(20)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>message</th>\n","      <th>label</th>\n","      <th>id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Go until jurong point, crazy.. Available only ...</td>\n","      <td>ham</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Ok lar... Joking wif u oni...</td>\n","      <td>ham</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>U dun say so early hor... U c already then say...</td>\n","      <td>ham</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>I HAVE A DATE ON SUNDAY WITH WILL!!</td>\n","      <td>ham</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Fine if that’s the way u feel. That’s the way ...</td>\n","      <td>ham</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Is that seriously how you spell his name?</td>\n","      <td>ham</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>I‘m going to try for 2 months ha ha only joking</td>\n","      <td>ham</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>So ü pay first lar... Then when is da stock co...</td>\n","      <td>ham</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Aft i finish my lunch then i go str down lor. ...</td>\n","      <td>ham</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Ffffffffff. Alright no way I can meet up with ...</td>\n","      <td>ham</td>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>Ahhh. Work. I vaguely remember that! What does...</td>\n","      <td>ham</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>For fear of fainting with the of all that hous...</td>\n","      <td>ham</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>Yup... Ok i go home look at the timings then i...</td>\n","      <td>ham</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>I see the letter B on my car</td>\n","      <td>ham</td>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>Anything lor... U decide...</td>\n","      <td>ham</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>Pls go ahead with watts. I just wanted to be s...</td>\n","      <td>ham</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>Did I forget to tell you ? I want you , I need...</td>\n","      <td>ham</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>WHO ARE YOU SEEING?</td>\n","      <td>ham</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>Great! I hope you like your man well endowed. ...</td>\n","      <td>ham</td>\n","      <td>31</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>No calls..messages..missed calls</td>\n","      <td>ham</td>\n","      <td>32</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                              message label  id\n","0   Go until jurong point, crazy.. Available only ...   ham   1\n","1                       Ok lar... Joking wif u oni...   ham   2\n","2   U dun say so early hor... U c already then say...   ham   3\n","3                 I HAVE A DATE ON SUNDAY WITH WILL!!   ham   9\n","4   Fine if that’s the way u feel. That’s the way ...   ham  12\n","5           Is that seriously how you spell his name?   ham  14\n","6     I‘m going to try for 2 months ha ha only joking   ham  15\n","7   So ü pay first lar... Then when is da stock co...   ham  16\n","8   Aft i finish my lunch then i go str down lor. ...   ham  17\n","9   Ffffffffff. Alright no way I can meet up with ...   ham  18\n","10  Ahhh. Work. I vaguely remember that! What does...   ham  20\n","11  For fear of fainting with the of all that hous...   ham  22\n","12  Yup... Ok i go home look at the timings then i...   ham  24\n","13                       I see the letter B on my car   ham  25\n","14                        Anything lor... U decide...   ham  26\n","15  Pls go ahead with watts. I just wanted to be s...   ham  27\n","16  Did I forget to tell you ? I want you , I need...   ham  28\n","17                                WHO ARE YOU SEEING?   ham  30\n","18  Great! I hope you like your man well endowed. ...   ham  31\n","19                   No calls..messages..missed calls   ham  32"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"4Rdkgka3KV_l"},"source":["from google.colab import auth\n","auth.authenticate_user()\n","SQL = \"SELECT * from `questrom.SMSspam.test`\"\n","PROJECT = \"ba-820-wyl\"\n","smstest = pd.read_gbq(SQL, PROJECT)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BfWVBWxvKV9e","executionInfo":{"status":"ok","timestamp":1637006035542,"user_tz":300,"elapsed":133,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"80d1dee1-0b79-4baa-df9d-87390cdb67f3"},"source":["smstest.head(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>message</th>\n","      <th>id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Even my brother is not like to speak with me. ...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WINNER!! As a valued network customer you have...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Eh u remember how 2 spell his name... Yes i di...</td>\n","      <td>11</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                             message  id\n","0  Even my brother is not like to speak with me. ...   4\n","1  WINNER!! As a valued network customer you have...   5\n","2  Eh u remember how 2 spell his name... Yes i di...  11"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"f-lCP2iTLcqK"},"source":["from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn import metrics"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ql-HCLXDKtgy"},"source":["# just highlighting what is possible, you don't need to do this\n","# keep just the numbers and letters\n","# just highlighting that depending on your use cases, you can \n","# roll your own functions to clean text\n","# pandas makes it easy to `apply` these to our text column!\n","def remove_punct(text):\n","  import string\n","  text = ''.join([p for p in text if p not in set(string.punctuation)])\n","  return text\n","\n","topics['text'] = topics.text.apply(remove_punct)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RtiGdmUGLKFf"},"source":["topics['tokens']=topics.text.str.split()\n","topics.head(1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"syFZitDjL1kD"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DBGE-1aVLKDl","executionInfo":{"status":"ok","timestamp":1637006508058,"user_tz":300,"elapsed":153,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"9bee21d9-bd7a-4645-c720-12f55212db99"},"source":["cv = CountVectorizer()\n","cv.fit(smstrain.message)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CountVectorizer()"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"DIpsV-0hLKB2"},"source":["cv.vocabulary_"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bG1U8mEvKte2","executionInfo":{"status":"ok","timestamp":1637006518546,"user_tz":300,"elapsed":132,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"3d502d4d-2566-4cba-f84d-969f74979032"},"source":["len(cv.vocabulary_)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6875"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"Z3SiBHqDKtcn"},"source":["dtm=cv.transform(smstrain.message)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YcObXe3LKV7X","executionInfo":{"status":"ok","timestamp":1637006553120,"user_tz":300,"elapsed":123,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"d5bfc026-c395-41ad-a29e-71f7c7622c7c"},"source":["dtm.shape\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3835, 6875)"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jiuRmYj5KV40","executionInfo":{"status":"ok","timestamp":1637006563832,"user_tz":300,"elapsed":2472,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"b5c5edac-bb53-429e-d66a-c0499a748eb7"},"source":["dtm.toarray()[:5,:5]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0]])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"18pi4Qc1I1fx","executionInfo":{"status":"ok","timestamp":1637007161714,"user_tz":300,"elapsed":444,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"92916d89-955d-443d-8de2-8818d6634152"},"source":["# make this a dataframe to help with our mental model\n","\n","dtm_df = pd.DataFrame(dtm.toarray(), columns=cv.get_feature_names())\n","dtm_df.columns"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["Index(['00', '000', '000pes', '008704050406', '0089', '0121', '01223585334',\n","       '0125698789', '02', '0207',\n","       ...\n","       'zealand', 'zed', 'zindgi', 'zoe', 'zogtorius', 'zouk', 'zyada', 'èn',\n","       'ú1', '〨ud'],\n","      dtype='object', length=6875)"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"w3Sr2VCVMhje"},"source":["# lets build the datasets for the model\n","\n","X = dtm_df.copy()\n","y = smstrain.label"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WLmU0kH1UAKY","executionInfo":{"status":"ok","timestamp":1637008546474,"user_tz":300,"elapsed":152,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"01559a58-bbd5-4288-de98-ffe7872246ee"},"source":["X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>00</th>\n","      <th>000</th>\n","      <th>000pes</th>\n","      <th>008704050406</th>\n","      <th>0089</th>\n","      <th>0121</th>\n","      <th>01223585334</th>\n","      <th>0125698789</th>\n","      <th>02</th>\n","      <th>0207</th>\n","      <th>02072069400</th>\n","      <th>02073162414</th>\n","      <th>02085076972</th>\n","      <th>03</th>\n","      <th>04</th>\n","      <th>0430</th>\n","      <th>05</th>\n","      <th>050703</th>\n","      <th>0578</th>\n","      <th>06</th>\n","      <th>07</th>\n","      <th>07008009200</th>\n","      <th>07046744435</th>\n","      <th>07090298926</th>\n","      <th>07099833605</th>\n","      <th>07123456789</th>\n","      <th>0721072</th>\n","      <th>07732584351</th>\n","      <th>07734396839</th>\n","      <th>07742676969</th>\n","      <th>07753741225</th>\n","      <th>07781482378</th>\n","      <th>07786200117</th>\n","      <th>077xxx</th>\n","      <th>078</th>\n","      <th>07801543489</th>\n","      <th>07808</th>\n","      <th>07808247860</th>\n","      <th>07808726822</th>\n","      <th>07815296484</th>\n","      <th>...</th>\n","      <th>yifeng</th>\n","      <th>yijue</th>\n","      <th>ym</th>\n","      <th>ymca</th>\n","      <th>yo</th>\n","      <th>yoga</th>\n","      <th>yogasana</th>\n","      <th>yor</th>\n","      <th>yorge</th>\n","      <th>you</th>\n","      <th>youdoing</th>\n","      <th>younger</th>\n","      <th>youphone</th>\n","      <th>your</th>\n","      <th>youre</th>\n","      <th>yourinclusive</th>\n","      <th>yourjob</th>\n","      <th>yours</th>\n","      <th>yourself</th>\n","      <th>youuuuu</th>\n","      <th>youwanna</th>\n","      <th>yoville</th>\n","      <th>yoyyooo</th>\n","      <th>yr</th>\n","      <th>yrs</th>\n","      <th>ystrday</th>\n","      <th>yummy</th>\n","      <th>yun</th>\n","      <th>yuo</th>\n","      <th>yup</th>\n","      <th>zealand</th>\n","      <th>zed</th>\n","      <th>zindgi</th>\n","      <th>zoe</th>\n","      <th>zogtorius</th>\n","      <th>zouk</th>\n","      <th>zyada</th>\n","      <th>èn</th>\n","      <th>ú1</th>\n","      <th>〨ud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3830</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3831</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3832</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3833</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3834</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3835 rows × 6875 columns</p>\n","</div>"],"text/plain":["      00  000  000pes  008704050406  0089  ...  zouk  zyada  èn  ú1  〨ud\n","0      0    0       0             0     0  ...     0      0   0   0    0\n","1      0    0       0             0     0  ...     0      0   0   0    0\n","2      0    0       0             0     0  ...     0      0   0   0    0\n","3      0    0       0             0     0  ...     0      0   0   0    0\n","4      0    0       0             0     0  ...     0      0   0   0    0\n","...   ..  ...     ...           ...   ...  ...   ...    ...  ..  ..  ...\n","3830   0    0       0             0     0  ...     0      0   0   0    0\n","3831   0    0       0             0     0  ...     0      0   0   0    0\n","3832   0    0       0             0     0  ...     0      0   0   0    0\n","3833   0    0       0             0     0  ...     0      0   0   0    0\n","3834   0    0       0             0     0  ...     0      0   0   0    0\n","\n","[3835 rows x 6875 columns]"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qbh6ilqQMhhV","executionInfo":{"status":"ok","timestamp":1637008143982,"user_tz":300,"elapsed":199,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"9ffd74c8-08f4-41a0-940f-3555e17bedd1"},"source":["X.shape\n","#y.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3835, 6875)"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6A6EeX-OMhOC","executionInfo":{"status":"ok","timestamp":1637006959845,"user_tz":300,"elapsed":739,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"badda339-2392-49d2-91fa-aa6903a50593"},"source":["# fit the model\n","\n","tree = DecisionTreeClassifier(max_depth=5, min_samples_split=30, min_samples_leaf=15)\n","tree.fit(X, y)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(max_depth=5, min_samples_leaf=15, min_samples_split=30)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"usUmkjVjOGId","executionInfo":{"status":"ok","timestamp":1637007316772,"user_tz":300,"elapsed":147,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"d53ba957-f494-41ee-aa00-15d37a27312d"},"source":["smstest.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>message</th>\n","      <th>id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Even my brother is not like to speak with me. ...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WINNER!! As a valued network customer you have...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Eh u remember how 2 spell his name... Yes i di...</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Lol your always so convincing.</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>K tell me anything about you.</td>\n","      <td>21</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                             message  id\n","0  Even my brother is not like to speak with me. ...   4\n","1  WINNER!! As a valued network customer you have...   5\n","2  Eh u remember how 2 spell his name... Yes i di...  11\n","3                     Lol your always so convincing.  19\n","4                      K tell me anything about you.  21"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h-zoSExEOcQ2","executionInfo":{"status":"ok","timestamp":1637007344015,"user_tz":300,"elapsed":138,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"a709b88e-b8d3-4938-807e-61bc876b5fca"},"source":["cv2 = CountVectorizer()\n","cv2.fit(smstest.message)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CountVectorizer()"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"Q95LVGmVOcO3"},"source":["dtm2=cv2.transform(smstest.message)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fPUZ9U3sPxQ0","executionInfo":{"status":"ok","timestamp":1637007435188,"user_tz":300,"elapsed":160,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"c37e36da-5c55-4151-ae6f-30bacc33862a"},"source":["dtm2.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(427, 1882)"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IAS-QylSS97r","executionInfo":{"status":"ok","timestamp":1637008271643,"user_tz":300,"elapsed":218,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"41c1e290-088a-4d6c-c758-737a209fe60a"},"source":["dtm.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3835, 6875)"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XraSgrpqOcL2","executionInfo":{"status":"ok","timestamp":1637007347073,"user_tz":300,"elapsed":122,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"1e2879f0-4c18-41b9-c349-57ddf5f15f22"},"source":["dtm2.toarray()[:5,:5]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0]])"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"InKol_4UOGD6","executionInfo":{"status":"ok","timestamp":1637008713357,"user_tz":300,"elapsed":523,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"06184b79-bf15-4011-a745-317245a68264"},"source":["# make this a dataframe to help with our mental model\n","\n","dtm2_df = pd.DataFrame(dtm2.toarray(), columns=cv2.get_feature_names())\n","dtm2_df.columns"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["Index(['00', '000', '01223585236', '02', '03', '05', '0578', '06', '078498',\n","       '07xxxxxxxxx',\n","       ...\n","       'yes', 'yesterday', 'yet', 'yhl', 'yo', 'you', 'your', 'yours', 'yup',\n","       'zebra'],\n","      dtype='object', length=1882)"]},"metadata":{},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"wIl4_UWtQhwK"},"source":["X2 = dtm2_df.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZHnQsox6U9dc"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"B_leJeXbU6Cp"},"source":["dtm2=cv.transform(smstest.message)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hpv-wQjpU9Ua","executionInfo":{"status":"ok","timestamp":1637008797415,"user_tz":300,"elapsed":126,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"5e0584fd-40dc-47f9-faf1-c6f9e3c3c49a"},"source":["dtm2_df = pd.DataFrame(dtm2.toarray(), columns=cv.get_feature_names())\n","dtm2_df.columns"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["Index(['00', '000', '000pes', '008704050406', '0089', '0121', '01223585334',\n","       '0125698789', '02', '0207',\n","       ...\n","       'zealand', 'zed', 'zindgi', 'zoe', 'zogtorius', 'zouk', 'zyada', 'èn',\n","       'ú1', '〨ud'],\n","      dtype='object', length=6875)"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"p2JgGZQIOF0D"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PEoDgG6aMhKi"},"source":["# fit metrics on test\n","\n","preds = tree.predict(X2)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WqeaCyAyVPg5"},"source":["smstest['label']=preds"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZV6hJsA4VVJG","executionInfo":{"status":"ok","timestamp":1637008893622,"user_tz":300,"elapsed":121,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"107fac26-9c0b-458a-aa77-bb15fe8d4cf3"},"source":["smstest.head(20)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>message</th>\n","      <th>id</th>\n","      <th>prediction</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Even my brother is not like to speak with me. ...</td>\n","      <td>4</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WINNER!! As a valued network customer you have...</td>\n","      <td>5</td>\n","      <td>spam</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Eh u remember how 2 spell his name... Yes i di...</td>\n","      <td>11</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Lol your always so convincing.</td>\n","      <td>19</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>K tell me anything about you.</td>\n","      <td>21</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>K..k:)where are you?how did you performed?</td>\n","      <td>52</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Ok i am on the way to home hi hi</td>\n","      <td>59</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Hi. Wk been ok - on hols now! Yes on for a bit...</td>\n","      <td>70</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>What is the plural of the noun research?</td>\n","      <td>76</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>GENT! We are trying to contact you. Last weeke...</td>\n","      <td>78</td>\n","      <td>spam</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>He is there. You call and meet him</td>\n","      <td>93</td>\n","      <td>spam</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>A swt thought: 'Nver get tired of doing little...</td>\n","      <td>97</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>Yes see ya not on the dot</td>\n","      <td>99</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>New car and house for my parents.:)i have only...</td>\n","      <td>111</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>BangBabes Ur order is on the way. U SHOULD rec...</td>\n","      <td>113</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>ok. I am a gentleman and will treat you with d...</td>\n","      <td>126</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>It will stop on itself. I however suggest she ...</td>\n","      <td>135</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>Hello darlin ive finished college now so txt m...</td>\n","      <td>142</td>\n","      <td>spam</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>U call me alter at 11 ok.</td>\n","      <td>145</td>\n","      <td>ham</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>Both :) i shoot big loads so get ready!</td>\n","      <td>149</td>\n","      <td>ham</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                              message   id prediction\n","0   Even my brother is not like to speak with me. ...    4        ham\n","1   WINNER!! As a valued network customer you have...    5       spam\n","2   Eh u remember how 2 spell his name... Yes i di...   11        ham\n","3                      Lol your always so convincing.   19        ham\n","4                       K tell me anything about you.   21        ham\n","5          K..k:)where are you?how did you performed?   52        ham\n","6                    Ok i am on the way to home hi hi   59        ham\n","7   Hi. Wk been ok - on hols now! Yes on for a bit...   70        ham\n","8            What is the plural of the noun research?   76        ham\n","9   GENT! We are trying to contact you. Last weeke...   78       spam\n","10                 He is there. You call and meet him   93       spam\n","11  A swt thought: 'Nver get tired of doing little...   97        ham\n","12                          Yes see ya not on the dot   99        ham\n","13  New car and house for my parents.:)i have only...  111        ham\n","14  BangBabes Ur order is on the way. U SHOULD rec...  113        ham\n","15  ok. I am a gentleman and will treat you with d...  126        ham\n","16  It will stop on itself. I however suggest she ...  135        ham\n","17  Hello darlin ive finished college now so txt m...  142       spam\n","18                          U call me alter at 11 ok.  145        ham\n","19            Both :) i shoot big loads so get ready!  149        ham"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","metadata":{"id":"hYXFu33QWQxp"},"source":["smstest.drop(['prediction'],axis=1,inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EVKanxkVVeTD"},"source":["smstest.to_csv('smstest.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I6_Njgs6VNl_"},"source":["ctable = metrics.classification_report(X2, preds)\n","print(ctable)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YjSM47qTVN17"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lr_qplghROdW"},"source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=820)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8cRMoKTTROad","executionInfo":{"status":"ok","timestamp":1637007871219,"user_tz":300,"elapsed":363,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"36dddaea-13b3-4b96-8064-d2acbba63f5b"},"source":["# fit metrics on test\n","\n","preds = tree.predict(X_test)\n","ctable = metrics.classification_report(y_test, preds)\n","print(ctable)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","         ham       0.96      0.98      0.97       974\n","        spam       0.86      0.78      0.82       177\n","\n","    accuracy                           0.95      1151\n","   macro avg       0.91      0.88      0.89      1151\n","weighted avg       0.95      0.95      0.95      1151\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EbFm4r-iROYJ","executionInfo":{"status":"ok","timestamp":1637007907625,"user_tz":300,"elapsed":613,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"6e7a931d-09bb-4a03-b99b-f89621df5603"},"source":["skplot.metrics.plot_confusion_matrix(y_test, preds,  \n","                                     figsize=(7,4), \n","                                     x_tick_rotation=90 )\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 504x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kP3NKhZXSITj","executionInfo":{"status":"ok","timestamp":1637008058948,"user_tz":300,"elapsed":151,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"1797304f-0422-4cf8-8d09-4e75878a5739"},"source":["smstest.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>message</th>\n","      <th>id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Even my brother is not like to speak with me. ...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>WINNER!! As a valued network customer you have...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Eh u remember how 2 spell his name... Yes i di...</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Lol your always so convincing.</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>K tell me anything about you.</td>\n","      <td>21</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                             message  id\n","0  Even my brother is not like to speak with me. ...   4\n","1  WINNER!! As a valued network customer you have...   5\n","2  Eh u remember how 2 spell his name... Yes i di...  11\n","3                     Lol your always so convincing.  19\n","4                      K tell me anything about you.  21"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"viSvXQ70ROV4"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7qHm6Jr9ROTn"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CH-gQDv0ZAcN"},"source":["### Answer:"]},{"cell_type":"code","metadata":{"id":"VSO3J78Razn4"},"source":["# vectorize the data - -max vocab\n","cv=CountVectorizer(max_features=500)\n","cv.fit(ds_train.message)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6T0HyET6azlp"},"source":["# reduce\n","dtm = cv.transform(ds_train.message).toarray()\n","pca = PCA(50)\n","pcs = pcs.fit.transfrom(dtm)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kTV4mj11azij"},"source":["# how much of the variance did we retain?\n","pcs.explained_variance_ratio.sum()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kibI0WYzbUNw"},"source":["# fit tree\n","tree = DecisionTreeClassifier(max_depth=5,min_samples_split=30,min_samples_leaf=15,random_state=820)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v5C6qX-OMhIN"},"source":["# tree score:\n","tree.score(pcs,ds_train.label)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v2aiPm4EI1X9"},"source":["#剩下的就和自己一样了， fit test中的message 然后再回去 弄label"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p_7DqA4GdMbV"},"source":["# save model !!!! \n","import joblib\n","joblib.dump(pca,'pca.joblib')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AQAnxWXudWCn"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oZF9ljY5Y_KP"},"source":["## Class:"]},{"cell_type":"code","metadata":{"id":"dOXLKwRkd_wi"},"source":["# LEARNING GOALS\n","#\n","#                 - tokenization deeper dive\n","#                 - reinforce text prep and tokenization options\n","#                 - Cluster documents setup"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EMhwM-7NGGkL"},"source":["############################################ Get some data from the using an awesome package Newspaper3k!\n","## https://newspaper.readthedocs.io/en/latest/\n","\n","# Boston based chatbot company, now called Mainstay\n","URL = \"https://voicebot.ai/2021/02/16/conversational-ai-startup-admithub-raises-14m-for-higher-ed-chatbots/\"\n","\n","# # setup the article\n","article = Article(URL)\n","\n","# # get the page\n","article.download()\n","\n","# # parse it -- extracts all sorts of info\n","article.parse()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jgrHNCrfGGiD","executionInfo":{"status":"ok","timestamp":1637011359006,"user_tz":300,"elapsed":203,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"5e539002-79a9-4f41-f3b5-a3053efe03f9"},"source":["# what do we have -- b/c its for news sites, attempts to parse things like dates\n","article.publish_date"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["datetime.datetime(2021, 2, 16, 0, 0)"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":177},"id":"tHK53RnEGGgN","executionInfo":{"status":"ok","timestamp":1637011387238,"user_tz":300,"elapsed":306,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"fd501ff0-09b1-44b3-94f5-14a488375037"},"source":["# the text -- what we are really after\n","article.text"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Conversational AI Startup AdmitHub Raises $14M for Higher Ed Chatbots\\n\\nStudent engagement chatbot platform startup AdmitHub has closed a $14 million Series B funding round led by Rethink Education. The new financing will support AdmitHub as it expands its chatbot platform aimed at improving student enrollment and retention in higher education and changes names to Mainstay.\\n\\nSummer Melt\\n\\nBoston-based AdmitHub uses AI and a knowledge base of more than four million questions on 6,000 topics to interact with potential and current students. The school can use the chatbot builder and trainer without any coding skills, sending the resulting bot into the world to email, text, and chat online with students. The point of the chatbot is to be a resource for students who are uncertain about school or wavering in their attendance plan. AdmitHub claims it reduced the “summer melt,” when high school graduates decide not to go to school over the summer, at Georgia State University by more than 30% and answered more than 80% of student questions posed with natural language. When the chatbot can’t answer a question, it tosses the query to a support team. How the human team responds gets incorporated into the knowledge base to improve the AI over time. All of the conversations are analyzed and collated to share with administrators if there are questions that the chatbot can’t answer or if the priority seems high enough to pass along.\\n\\n“AdmitHub’s technology and approach exemplify the thoughtful application of AI to solve the most pressing challenges in education,” Rethink Education managing partner Matt Greenfield said. “Even amidst the turmoil of the past year, artificial intelligence has played a transformative role in institutions’ efforts to communicate quickly and effectively, in ways that improve access and retention at scale.”\\n\\nAdmitHub says more than three million students have interacted with its AI since it was founded in 2014. The startup has raised a total of more than $21 million, including $7.5 million a little over a year ago. ECMC Group’s Education Impact Fund and Kresge Foundation’s impact investment fund joined the newest funding round.\\n\\nCOVID-19 Chat\\n\\nThe COVID-19 health crisis has played a part in accelerating interest in the kind of virtual agents and chatbots provided by AdmitHub. The surge in interest by healthcare providers ranges from Hyro’s free coronavirus-focused version of its virtual assistant to the conversational AI built by Orbita and the customized versions of Microsoft’s template that some hospitals are using. Even governments like India and the UK released chatbots on WhatsApp for answering coronavirus questions. Even chatbots not related to healthcare have seen a jump, leading to millions in funding for startups like RAIN and Rasa. As educational institutes begin to return to normal, tools like AdmitHub’s chatbots may play a key role in supporting them.\\n\\n“The past year has reinforced the reality that new challenges will always be around the corner for colleges and universities,” said Drew Magliozzi, CEO of AdmitHub. “Partnering in close collaboration with schools around the country, we’re building an empathy engine for higher education that will enable institutions and their students to navigate even the biggest and most unexpected obstacles.”\\n\\nFollow @voicebotai Follow @erichschwartz\\n\\n2'"]},"metadata":{},"execution_count":90}]},{"cell_type":"code","metadata":{"id":"HpLPHionGjW9"},"source":["# tokenize\n","cv = CountVectorizer()\n","  ### to learn vocabular \n","# sklearn expects iterables, like lists\n","atext=article.text\n","atokens = cv.fit_transform([atext])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JifROJShGjTM","executionInfo":{"status":"ok","timestamp":1637011578852,"user_tz":300,"elapsed":333,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"7c97cc20-f40a-4556-b6d1-4191959919c2"},"source":["# how many tokens --- note the new syntax of get feature names out\n","len(cv.vocabulary_) # 281\n","atokens.shape # (1,281)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 281)"]},"metadata":{},"execution_count":95}]},{"cell_type":"code","metadata":{"id":"EjJ_c8C1Gn1t"},"source":["\n","# THOUGHT EXERCISE:\n","# we have a doc-term  matrix with one doc and the terms in the columns\n","# its effectively a 1d array\n","# hypothetically, if we had a reference database with the same term representation (vocabulary)\n","# what do you think we could do?\n","\n","# IDEAS:  identify similar records (scipy cdist) or scikitlearn nearest neighbors"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ixvPBtROGnzo"},"source":["################################################## Lets summarize\n","##\n","## we can use sklearn to keep things in our typical ml format\n","## we can see that there is some pre-processing taking place\n","## lets dive into that a bit more, and then discuss a flow using nltk -> sklearn\n","\n","# https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html\n","\n","# - Notice the lower casing by default\n","# - we can pass our own regex/tokenizer if we wanted, and some people do this (build their own)\n","# - different ways to tokenize\n","# - there are stopwords, but we can pass anything\n","# - we can set the max number of tokens\n","# - we can one hot encode = instead of counts, it can be 0/1 for the word/token\n","# - we can create ngrams\n","# - we can even validate the vocabulary if we wanted\n","#\n","# This last point brings up the concept of unseen words\n","# Remember! sklearn fits the object, so any unseen words will not be parsed on new datsets with transform\n","#\n","# Summary: really powerful and adaptable, but means you plug in your own regex/tools\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_jgYOVx_Gnxi"},"source":["################### part 1: - lets start with ngrams\n","##\n","## instead of single tokens, we can try to capture context by windowing the tokens/phrases\n","## we can pass in a tuple of the ngrams, default is 1,1\n","\n","# a new dataset\n","corpus = [\"tokens, tokens everywhere\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xZRx5fuhGuqR"},"source":["# we could only have bigrams\n","ngrams2=CountVectorizer(ngram_range=(1,2))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HwNzZBvogY91"},"source":["ngrams2_tok=ngrams2.fit_transform(corpus)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nVEDg6lBgdJt","executionInfo":{"status":"ok","timestamp":1637011817007,"user_tz":300,"elapsed":135,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"18ee6b78-6c3c-4371-b7dc-c6f10ec8b4dd"},"source":["ngrams2.vocabulary_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'everywhere': 0, 'tokens': 1, 'tokens everywhere': 2, 'tokens tokens': 3}"]},"metadata":{},"execution_count":100}]},{"cell_type":"code","metadata":{"id":"FNPdZ5OtGuoG"},"source":["# the key point is that you can imagine it might be able to retain context\n","# if we combine tokens with other n-grams.  \n","#"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RRzANY2HGumi","executionInfo":{"status":"ok","timestamp":1637012538356,"user_tz":300,"elapsed":154,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"94632b27-c724-42dc-dd19-8afead1d2b81"},"source":["###################################### Quick task\n","## \n","## build off the chatbot article from above\n","## but instead of parsing the tokens (unigrams), include bigrams (2) and trigrams (3) \n","## to the feature space\n","##\n","## how many features have we extracted from the article?\n","##\n","cv= CountVectorizer(ngram_range=(1,3))\n","cv.fit([atext])\n","len(cv.vocabulary_)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1276"]},"metadata":{},"execution_count":102}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RU0LcI7vjX2e","executionInfo":{"status":"ok","timestamp":1637012580470,"user_tz":300,"elapsed":135,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"4e431b10-9ac9-4087-80c6-6755e8757b16"},"source":["doc=cv.transform([atext])\n","doc.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 1276)"]},"metadata":{},"execution_count":103}]},{"cell_type":"code","metadata":{"id":"hYqW7zriGuku"},"source":["###################################### Question\n","###### what does this say about our choice of tokenization\n","###### what tools might help with this \"issue\"?"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mm2S1ADXGuih","executionInfo":{"status":"ok","timestamp":1637012681422,"user_tz":300,"elapsed":388,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"2bcaffda-ab1b-40e4-bef6-ab97e4cba965"},"source":["\n","###################################### Stopwords\n","## by default stop words are not removed\n","## there is a pre-built list of words, but let's ignore it\n","## nltk is a great toolkit, but for now\n","## lets just use the stopwords from that package\n","\n","# if this is your first time, you may need to download the stopwords\n","# or on colab, for your session\n","\n","nltk.download('stopwords')\n","\n","\n","## OF COURSE, you could always downlod your own.  not the format of below, we just pass in a list in the end\n","\n","# lets get the stopwords\n","from nltk.corpus import stopwords\n","STOPWORDS = list(stopwords.words('english'))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6mhDbz1MGnvU","executionInfo":{"status":"ok","timestamp":1637012736368,"user_tz":300,"elapsed":125,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"a388a20e-4fbb-4c2f-f4c4-49c0f9c3bc63"},"source":["# what do we have?\n","type(STOPWORDS) # list\n","STOPWORDS[:5]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['i', 'me', 'my', 'myself', 'we']"]},"metadata":{},"execution_count":106}]},{"cell_type":"code","metadata":{"id":"IW-EMEJCGnsn"},"source":["# the first few\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2d5O3H-zGnqB"},"source":["# note that everything is lower case!\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uTb05xc3Gnn2"},"source":["# admittedly this is harder to find than it should be\n","# but the languages supported in NLTK\n","\n","stopwords.fileids()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5u0mIgtJGjQ_"},"source":["# now you can imagine that is pretty limiting above, I know\n","# the other approach is to use spacy\n","# https://spacy.io/usage/models\n","# we will dive into spacy later, but I think its important to keep building the intuition\n","# before going into model-driven work\n","\n","# last, we can always add to the stoplist if we wanted to now that its a list above"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m6xNQajGGjPM","executionInfo":{"status":"ok","timestamp":1637012965101,"user_tz":300,"elapsed":3,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"3596c69c-4fe7-4aa9-d868-a520a1b8345c"},"source":["\n","# lets keep the corpus small, so use the original article\n","# but remove stopwords\n","cv=CountVectorizer(stop_words=STOPWORDS)\n","atokens=cv.fit_transform([atext])\n","len(cv.vocabulary_)\n","\n","\n","# 281 -> 237"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["237"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","metadata":{"id":"oOlPjXSTGjNV"},"source":["# and of course, we can see the vocab\n","# cv.vocabulary_"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gQLKwOumGjLW"},"source":["###################################### Max tokens\n","## \n","## this can be helpful if you want to restrict to the top N most frequent tokens\n","## this restricts your space at the start\n","## but the tradeoff is less common words, perhaps, could help with ML models\n","##     -- the tokens/phrases are specific to he known label, and while rare, often occur for the label"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"shwwgex3GjIE"},"source":["## we can use the article again, max with stopwords\n","\n","# cv = CountVectorizer(max_features=20, stop_words=STOPWORDS)\n","# atokens = cv.fit_transform([atext])\n","# cv.vocabulary_"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UBtqtRKaHOLM","executionInfo":{"status":"ok","timestamp":1637013127015,"user_tz":300,"elapsed":169,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"62ca29cb-20e5-4007-e5a8-66d34929e804"},"source":["###################################### character tokens\n","## \n","## if you wanted, you can parse characters\n","## a little out of scope, but highlighting the concept of tokenization can \n","## take all sorts of forms!\n","\n","x = [\"Hello I can't\"]\n","charvec = CountVectorizer(analyzer='char', ngram_range=(1,1))\n","char_tokens = charvec.fit(x)\n","charvec.vocabulary_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{' ': 0,\n"," \"'\": 1,\n"," 'a': 2,\n"," 'c': 3,\n"," 'e': 4,\n"," 'h': 5,\n"," 'i': 6,\n"," 'l': 7,\n"," 'n': 8,\n"," 'o': 9,\n"," 't': 10}"]},"metadata":{},"execution_count":111}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZrUF2HB6lpAQ","executionInfo":{"status":"ok","timestamp":1637013175496,"user_tz":300,"elapsed":189,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"7ce075b5-0fd1-4382-fdf6-5c39d1e044d1"},"source":["charvec = CountVectorizer(analyzer='char', ngram_range=(2,7))\n","char_tokens = charvec.fit(x)\n","charvec.vocabulary_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{' c': 0,\n"," ' ca': 1,\n"," ' can': 2,\n"," \" can'\": 3,\n"," \" can't\": 4,\n"," ' i': 5,\n"," ' i ': 6,\n"," ' i c': 7,\n"," ' i ca': 8,\n"," ' i can': 9,\n"," \" i can'\": 10,\n"," \"'t\": 11,\n"," 'an': 12,\n"," \"an'\": 13,\n"," \"an't\": 14,\n"," 'ca': 15,\n"," 'can': 16,\n"," \"can'\": 17,\n"," \"can't\": 18,\n"," 'el': 19,\n"," 'ell': 20,\n"," 'ello': 21,\n"," 'ello ': 22,\n"," 'ello i': 23,\n"," 'ello i ': 24,\n"," 'he': 25,\n"," 'hel': 26,\n"," 'hell': 27,\n"," 'hello': 28,\n"," 'hello ': 29,\n"," 'hello i': 30,\n"," 'i ': 31,\n"," 'i c': 32,\n"," 'i ca': 33,\n"," 'i can': 34,\n"," \"i can'\": 35,\n"," \"i can't\": 36,\n"," 'll': 37,\n"," 'llo': 38,\n"," 'llo ': 39,\n"," 'llo i': 40,\n"," 'llo i ': 41,\n"," 'llo i c': 42,\n"," 'lo': 43,\n"," 'lo ': 44,\n"," 'lo i': 45,\n"," 'lo i ': 46,\n"," 'lo i c': 47,\n"," 'lo i ca': 48,\n"," \"n'\": 49,\n"," \"n't\": 50,\n"," 'o ': 51,\n"," 'o i': 52,\n"," 'o i ': 53,\n"," 'o i c': 54,\n"," 'o i ca': 55,\n"," 'o i can': 56}"]},"metadata":{},"execution_count":112}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MM7deli-HOJS","executionInfo":{"status":"ok","timestamp":1637013271736,"user_tz":300,"elapsed":147,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"445f4085-f22f-460a-d6dd-3c22d170425a"},"source":["###################################### custom pattern\n","## \n","## if you really wanted to (or needed to), you can roll your own\n","## tokenization\n","## This is a little forward looking  .....\n","## but highlights you all have the power to roll your own\n","##\n","## https://stackoverflow.com/questions/1576789/in-regex-what-does-w-mean\n","##\n","\n","# alpha numeric plus a single quote/contraction\n","PATTERN = \"[\\w']+\"\n","cv= CountVectorizer(token_pattern=PATTERN)\n","cv.fit(x)\n","cv.vocabulary_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{\"can't\": 0, 'hello': 1, 'i': 2}"]},"metadata":{},"execution_count":114}]},{"cell_type":"code","metadata":{"id":"ysPmehpJHOHV"},"source":["###################################### Your Turn\n","## \n","## get the text from the two articles below using Newspaper3k\n","## 1.  https://towardsdatascience.com/can-we-please-stop-using-word-clouds-eca2bbda7b9d\n","## 2.  https://www.businessinsider.com/pie-charts-are-the-worst-2013-6\n","##\n","## create a bag of words representation of the two documents\n","## keep the top 250 word tokens\n","## remove stopwords baesd on the set we used above\n","## use tokens, bigrams (2) and trigrams(3)\n","## TRICKY!  Put back into a dataframe if you can\n","## OPTIONAL:  Can you calculate the distance between the two docs?\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s9NAvJDtHOE4"},"source":["\n","## remember, jaccard is intersection over union, \n","## instead of counts, we just said \"is this word present\"\n","## value is proportion of elements that disagree\n","\n","## lets do a little more parsing before we start clustering!"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o939cyIHHOC_"},"source":["###################################### NLTK parsing\n","###################################### Quick highlight that there are pre-built tools!\n","## \n","## we may not have to reinvent the wheel!\n","## NLTK has some built in tooling we can leverage!\n","## and trust me, other toolkits have their own approaches too!\n","\n","# from nltk.tokenize import word_tokenize, RegexpTokenizer, WordPunctTokenizer, TweetTokenizer"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yURCrCytHOA6"},"source":["\n","# we may also need to download a tool to help with (sentence) parsing amongst other tasks\n","# nltk.download('punkt')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KPwG3h-7HN-4"},"source":["# corpus = ['I want my MTV! www.mtv.com', \"Can't I have it all for $5.00 @customerservice #help\"]\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I4ipqVBzHN9C"},"source":["# want to zoom in on a tokenizer to help with twitter, and perhaps other social data\n","# social = TweetTokenizer()\n","\n","# tokens_social = []\n","# for doc in corpus:\n","#   tokens_social.append(social.tokenize(doc))\n","\n","\n","# # what do we have\n","# tokens_social\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IJYaKHWRHN7A"},"source":["###################################### Summary\n","## \n","## we have super powers via regex, but don't be afraid to look around\n","## some decent tools in sklearn, but nltk has some custom utilities we can leverage\n","##\n","## We have options!  \n","## we can try to parse with nltk and feed to sklearn\n","## we can use the tooling in sklearn but might require we roll our own modifications\n","##\n","## but generally the flow is pre/tokenize -> bag of words of those tokens\n","##\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NMz_Jz4iHN5K"},"source":["############################### So the big question\n","## how does this all fit together?\n","\n","# build a function to pull in the bits we want from NLTK, or whatever framework we want to use\n","# def tokenize(text):\n","#   social = TweetTokenizer()\n","#   tokens = social.tokenize(text)\n","#   return tokens\n","\n","# # NOTE: lower case happens below, not above\n","# combined = CountVectorizer(tokenizer=tokenize)\n","# bow = combined.fit_transform(corpus)\n","\n","# bowdf = pd.DataFrame(bow.toarray(), columns=combined.get_feature_names())\n","\n","# bowdf"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XJtF3JTMHk-s"},"source":["\n","###################################### Next Up:  Beyond simple counts with TFIDF\n","##\n","## instead of count vectors (which you can use, and should try, in your modeling!)\n","## we can try to de-prioritize common words \n","## This surfaces words that may be less common, but nuanced and we want to prioritize those tokens\n","##"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oEvadDNVHkrW"},"source":["\n","# the same data\n","corpus = [\"Can't I have it all for $5.00 @customerservice #help\", \n","          'I want my MTV!']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ooYcbPotHkmP","executionInfo":{"status":"ok","timestamp":1637013399133,"user_tz":300,"elapsed":303,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"d02e94b8-d3be-484e-80aa-3918f4ac8455"},"source":["\n","# equivalent to CountVectorizer -> TfidfTransformer\n","# basically if you want tfidf, do this, it saves a step\n","# and you have the same options for parsing if you like\n","\n","tfidf = TfidfVectorizer(token_pattern=\"[\\w']+\", ngram_range=(1,2))\n","tfidf.fit(corpus)\n"," # vectorizer & transformer "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TfidfVectorizer(ngram_range=(1, 2), token_pattern=\"[\\\\w']+\")"]},"metadata":{},"execution_count":116}]},{"cell_type":"code","metadata":{"id":"HeiBEFAnHkkA"},"source":["## just to call out, being able to specify the pattern can be \n","## really powerful for specific tasks and business needs"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tPWjEwSvHkgf"},"source":["\n","# lets put this into a dataframe\n","idf = tfidf.transform(corpus)\n","\n","idf = pd.DataFrame(idf.toarray(), columns=tfidf.get_feature_names_out())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":374},"id":"XpojmD5zHkeI","executionInfo":{"status":"ok","timestamp":1637013553146,"user_tz":300,"elapsed":465,"user":{"displayName":"Yilun Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12667714364550598412"}},"outputId":"4367ce77-2514-4473-cd5e-eb34079c615e"},"source":["# we could even heatmap this to help understand the intuition here\n","\n","plt.figure(figsize=(4,6))\n","sns.heatmap(idf.T, xticklabels=True, yticklabels=True, cmap='Reds')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x432 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"VVTAJBeeHkbz"},"source":["################### NOTE:\n","## look at the weights generally, what do you see?\n","## now focus in on the word in common, the token i\n","i existing in both\n","##\n","## we can see that when shared, there is the document effect\n","\n","# https://towardsdatascience.com/a-gentle-introduction-to-calculating-the-tf-idf-values-9e391f8a13e5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wJQJTXvkH6xS"},"source":["## but why does this matter?\n","##  We can think of tfidf as attempting to create a more informative feature space\n","##  when we think about similiarty, or how we could reduce this space easily, \n","##  its not hard to consider that DR techniques give us ways to compress but \n","##  we lose the ability to describe the impact of a given token."],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UydpRB73H6vo"},"source":["# lets put this back onto the SMS dataset\n","\n","# sms = pd.read_gbq(\"SELECT label, message from `questrom.SMSspam.train`\", \"questrom\")\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YQNCptZ7H6tm"},"source":["# what do we have again\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q5mrLIzAH6sA"},"source":["# get this into a doc term representation\n","\n","# tfidf = TfidfVectorizer(max_features=1000, ngram_range=(1,3))\n","# sms_idf = tfidf.fit_transform(sms.message)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6KKHahKQH6pu"},"source":["# what do we have\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MfLhya83H6nn"},"source":["# compress the dimensions with UMAP\n","\n","# from umap import UMAP\n","\n","# umap = UMAP(2)\n","# u2 = umap.fit_transform(sms_idf)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ewWQITZyH6lV"},"source":["# we just compressed the tfidf array to 2d\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0A3_ZOPDH6jU"},"source":["\n","# lets plot this up\n","\n","# u2df = pd.DataFrame(u2, columns=[\"e1\", \"e2\"])\n","# sns.scatterplot(data=u2df, x=\"e1\", y=\"e2\", hue=sms.label, alpha=.5)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GN4eM81sH5iZ"},"source":["\n","# we could even attempt to cluster from here\n","\n","# from sklearn.cluster import KMeans\n","\n","# ss = []\n","\n","# for i in range(2, 10):\n","#   km = KMeans(i)\n","#   km.fit(u2)\n","#   ss.append(km.inertia_)\n","\n","# sns.lineplot(range(2,10), ss)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"W45f6lqqHkZL"},"source":["###################################### whats next?\n","##\n","## we will build on clustering as we go -- we can use what we saw in the first half, and the \n","## vocabulary to help reason about how clusters might help us with themeing\n","## sentiment analysis- the easy vs the good (in my opinion, of course)\n","## review how/why this can work, and why sentiment is easy to do poorly\n","## continue to see how text and machine learning fit very well together\n","## spacy to get us thinking about parsing the entities, and gensim preview\n","##"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QXh4utmNGGeU"},"source":["###################################### BREAKOUT Challenge\n","##\n","## Get the topics from big query\n","## questrom:datasets.topics\n","## parse the text into bag of words\n","## (only the text, not the category) - your choice on tokenization and weighting/feature space\n","## cluster the text\n","## how many clusters do you have?\n","## overlay the category on top of the clusters\n","## if we didn't have the category, any evidence that  text processing and clustering would help\n","## find patterns?  Are there documents that appear to be outliers?"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XC_xS72YIN5u"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tV8hmeJlIN3n"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yyyMgNXiIN1X"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zLRPXlW3INzE"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YSugAHkyGGcJ"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RlIAn90xGGBW"},"source":[""],"execution_count":null,"outputs":[]}]}